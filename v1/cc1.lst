
AVRASM ver. 2.1.30  C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm Wed May 29 02:51:20 2024

C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1092): warning: Register r3 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1093): warning: Register r2 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1094): warning: Register r5 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1095): warning: Register r4 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1096): warning: Register r7 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1097): warning: Register r6 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1098): warning: Register r9 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1099): warning: Register r8 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1100): warning: Register r11 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1101): warning: Register r10 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1102): warning: Register r13 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1103): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 20,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': No
                 ;'char' is unsigned     : No
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 	.EQU GPIOR1=0x2A
                 	.EQU GPIOR2=0x2B
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index0=R3
                 	.DEF _rx_rd_index0=R2
                 	.DEF _rx_counter0=R5
                 	.DEF _tx_wr_index0=R4
                 	.DEF _tx_rd_index0=R7
                 	.DEF _tx_counter0=R6
                 	.DEF _caracterUrmator=R9
                 	.DEF _remiza=R8
                 	.DEF _castigat=R11
                 	.DEF __Addr=R10
                 	.DEF __displayfunction=R13
                 	.DEF __displaycontrol=R12
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0073 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0115 	JMP  _timer1_compa_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 00ad 	JMP  _usart0_rx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 00df 	JMP  _usart0_tx_isr
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00003e 2710
00003f 03e8
000040 0064
000041 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000042 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000043 1000
000044 0100
000045 0010
000046 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000047 5809
000048 0000      	.DB  0x9,0x58,0x0,0x0
                 
                 _0x16:
000049 2e2e
00004a 2e2e
00004b 2e2e
00004c 2e2e      	.DB  0x2E,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1161): warning: .cseg .db misalignment - padding zero byte
00004d 002e      	.DB  0x2E
                 _0x0:
00004e 530d
00004f 4955
000050 4949
000051 4949      	.DB  0xD,0x53,0x55,0x49,0x49,0x49,0x49,0x49
000052 4949
000053 2049
000054 2061
000055 6163      	.DB  0x49,0x49,0x49,0x20,0x61,0x20,0x63,0x61
000056 7473
000057 6769
000058 7461
000059 2520      	.DB  0x73,0x74,0x69,0x67,0x61,0x74,0x20,0x25
00005a 0d63
00005b 4d00
00005c 2069
00005d 6573      	.DB  0x63,0xD,0x0,0x4D,0x69,0x20,0x73,0x65
00005e 6620
00005f 6361
000060 2065
000061 6172      	.DB  0x20,0x66,0x61,0x63,0x65,0x20,0x72,0x61
000062 0075      	.DB  0x75,0x0
                 _0x2040060:
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1170): warning: .cseg .db misalignment - padding zero byte
000063 0001      	.DB  0x1
                 _0x2040000:
000064 4e2d
000065 4e41
000066 4900
000067 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1173): warning: .cseg .db misalignment - padding zero byte
000068 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000069 0004      	.DW  0x04
00006a 0008      	.DW  0x08
00006b 008e      	.DW  __REG_VARS*2
                 
00006c 0009      	.DW  0x09
00006d 0210      	.DW  _displayJoc
00006e 0092      	.DW  _0x16*2
                 
00006f 0001      	.DW  0x01
000070 0220      	.DW  __seed_G102
000071 00c6      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000072 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000073 94f8      	CLI
000074 27ee      	CLR  R30
000075 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000076 e0f1      	LDI  R31,1
000077 bff5      	OUT  MCUCR,R31
000078 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000079 e1f8      	LDI  R31,0x18
00007a 95a8      	WDR
00007b b7a4      	IN   R26,MCUSR
00007c 7fa7      	CBR  R26,8
00007d bfa4      	OUT  MCUSR,R26
00007e 93f0 0060 	STS  WDTCSR,R31
000080 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
000082 e08d      	LDI  R24,(14-2)+1
000083 e0a2      	LDI  R26,2
000084 27bb      	CLR  R27
                 __CLEAR_REG:
000085 93ed      	ST   X+,R30
000086 958a      	DEC  R24
000087 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000088 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000089 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00008a e0a0      	LDI  R26,LOW(__SRAM_START)
00008b e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00008c 93ed      	ST   X+,R30
00008d 9701      	SBIW R24,1
00008e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00008f ede2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000090 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000091 9185      	LPM  R24,Z+
000092 9195      	LPM  R25,Z+
000093 9700      	SBIW R24,0
000094 f061      	BREQ __GLOBAL_INI_END
000095 91a5      	LPM  R26,Z+
000096 91b5      	LPM  R27,Z+
000097 9005      	LPM  R0,Z+
000098 9015      	LPM  R1,Z+
000099 01bf      	MOVW R22,R30
00009a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00009b 9005      	LPM  R0,Z+
00009c 920d      	ST   X+,R0
00009d 9701      	SBIW R24,1
00009e f7e1      	BRNE __GLOBAL_INI_LOOP
00009f 01fb      	MOVW R30,R22
0000a0 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
0000a1 e0e0      	LDI  R30,__GPIOR0_INIT
0000a2 bbee      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
0000a3 bdea      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
0000a4 bdeb      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000a5 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000a6 bfed      	OUT  SPL,R30
0000a7 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a8 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a9 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000aa e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ab 940c 0200 	JMP  _main
                 
                 	.ESEG
                 	.ORG 1
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 ;/*********************************************
                 ;Project : Test software
                 ;**********************************************
                 ;Chip type: ATmega164A
                 ;Clock frequency: 20 MHz
                 ;Compilers:  CVAVR 2.x
                 ;*********************************************/
                 ;
                 ;#include <mega164a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <stdlib.h>
                 ;#include <stdint.h>
                 ;#include <i2c.h>
                 ;#include "defs.h"
                 ;#include "functii.h"
                 ;//#include "ecran.h"
                 ;//*************************************************************************************************
                 ;//*********** BEGIN SERIAL STUFF (interrupt-driven, generated by Code Wizard) *********************
                 ;//*************************************************************************************************
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 8
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#else
                 ;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#endif
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 0049 {
                 
                 	.CSEG
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
0000ad 93ea      	ST   -Y,R30
0000ae 93fa      	ST   -Y,R31
0000af b7ef      	IN   R30,SREG
0000b0 93ea      	ST   -Y,R30
                 ; 0000 004A char status,data;
                 ; 0000 004B status=UCSR0A;
0000b1 931a      	ST   -Y,R17
0000b2 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0000b3 9110 00c0 	LDS  R17,192
                 ; 0000 004C data=UDR0;
0000b5 9100 00c6 	LDS  R16,198
                 ; 0000 004D if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000b7 2fe1      	MOV  R30,R17
0000b8 71ec      	ANDI R30,LOW(0x1C)
0000b9 f481      	BRNE _0x3
                 ; 0000 004E    {
                 ; 0000 004F    rx_buffer0[rx_wr_index0++]=data;
0000ba 2de3      	MOV  R30,R3
0000bb 9433      	INC  R3
0000bc e0f0      	LDI  R31,0
0000bd 50e0      	SUBI R30,LOW(-_rx_buffer0)
0000be 4ffe      	SBCI R31,HIGH(-_rx_buffer0)
0000bf 8300      	ST   Z,R16
                 ; 0000 0050 #if RX_BUFFER_SIZE0 == 256
                 ; 0000 0051    // special case for receiver buffer size=256
                 ; 0000 0052    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0000 0053 #else
                 ; 0000 0054    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0000c0 e0e8      	LDI  R30,LOW(8)
0000c1 15e3      	CP   R30,R3
0000c2 f409      	BRNE _0x4
0000c3 2433      	CLR  R3
                 ; 0000 0055    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x4:
0000c4 9453      	INC  R5
0000c5 e0e8      	LDI  R30,LOW(8)
0000c6 15e5      	CP   R30,R5
0000c7 f411      	BRNE _0x5
                 ; 0000 0056       {
                 ; 0000 0057       rx_counter0=0;
0000c8 2455      	CLR  R5
                 ; 0000 0058       rx_buffer_overflow0=1;
0000c9 9af0      	SBI  0x1E,0
                 ; 0000 0059       }
                 ; 0000 005A #endif
                 ; 0000 005B    }
                 _0x5:
                 ; 0000 005C }
                 _0x3:
0000ca 9109      	LD   R16,Y+
0000cb 9119      	LD   R17,Y+
0000cc c025      	RJMP _0x4C
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0063 {
                 _getchar:
                 ; .FSTART _getchar
                 ; 0000 0064 char data;
                 ; 0000 0065 while (rx_counter0==0);
0000cd 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x8:
0000ce 2055      	TST  R5
0000cf f3f1      	BREQ _0x8
                 ; 0000 0066 data=rx_buffer0[rx_rd_index0++];
0000d0 2de2      	MOV  R30,R2
0000d1 9423      	INC  R2
0000d2 e0f0      	LDI  R31,0
0000d3 50e0      	SUBI R30,LOW(-_rx_buffer0)
0000d4 4ffe      	SBCI R31,HIGH(-_rx_buffer0)
0000d5 8110      	LD   R17,Z
                 ; 0000 0067 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0068 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
0000d6 e0e8      	LDI  R30,LOW(8)
0000d7 15e2      	CP   R30,R2
0000d8 f409      	BRNE _0xB
0000d9 2422      	CLR  R2
                 ; 0000 0069 #endif
                 ; 0000 006A #asm("cli")
                 _0xB:
0000da 94f8      	cli
                 ; 0000 006B --rx_counter0;
0000db 945a      	DEC  R5
                 ; 0000 006C #asm("sei")
0000dc 9478      	sei
                 ; 0000 006D return data;
0000dd 2fe1      	MOV  R30,R17
0000de c0fe      	RJMP _0x20A0001
                 ; 0000 006E }
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 8
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#else
                 ;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 007E {
                 _usart0_tx_isr:
                 ; .FSTART _usart0_tx_isr
0000df 93ea      	ST   -Y,R30
0000e0 93fa      	ST   -Y,R31
0000e1 b7ef      	IN   R30,SREG
0000e2 93ea      	ST   -Y,R30
                 ; 0000 007F if (tx_counter0)
0000e3 2066      	TST  R6
0000e4 f069      	BREQ _0xC
                 ; 0000 0080    {
                 ; 0000 0081    --tx_counter0;
0000e5 946a      	DEC  R6
                 ; 0000 0082    UDR0=tx_buffer0[tx_rd_index0++];
0000e6 2de7      	MOV  R30,R7
0000e7 9473      	INC  R7
0000e8 e0f0      	LDI  R31,0
0000e9 5fe8      	SUBI R30,LOW(-_tx_buffer0)
0000ea 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0000eb 81e0      	LD   R30,Z
0000ec 93e0 00c6 	STS  198,R30
                 ; 0000 0083 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0084    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
0000ee e0e8      	LDI  R30,LOW(8)
0000ef 15e7      	CP   R30,R7
0000f0 f409      	BRNE _0xD
0000f1 2477      	CLR  R7
                 ; 0000 0085 #endif
                 ; 0000 0086    }
                 _0xD:
                 ; 0000 0087 }
                 _0xC:
                 _0x4C:
0000f2 91e9      	LD   R30,Y+
0000f3 bfef      	OUT  SREG,R30
0000f4 91f9      	LD   R31,Y+
0000f5 91e9      	LD   R30,Y+
0000f6 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 008E {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 008F while (tx_counter0 == TX_BUFFER_SIZE0);
0000f7 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0xE:
0000f8 e0e8      	LDI  R30,LOW(8)
0000f9 15e6      	CP   R30,R6
0000fa f3e9      	BREQ _0xE
                 ; 0000 0090 #asm("cli")
0000fb 94f8      	cli
                 ; 0000 0091 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
0000fc 2066      	TST  R6
0000fd f421      	BRNE _0x12
0000fe 91e0 00c0 	LDS  R30,192
000100 72e0      	ANDI R30,LOW(0x20)
000101 f469      	BRNE _0x11
                 _0x12:
                 ; 0000 0092    {
                 ; 0000 0093    tx_buffer0[tx_wr_index0++]=c;
000102 2de4      	MOV  R30,R4
000103 9443      	INC  R4
000104 e0f0      	LDI  R31,0
000105 5fe8      	SUBI R30,LOW(-_tx_buffer0)
000106 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
000107 81a8      	LD   R26,Y
000108 83a0      	STD  Z+0,R26
                 ; 0000 0094 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0095    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
000109 e0e8      	LDI  R30,LOW(8)
00010a 15e4      	CP   R30,R4
00010b f409      	BRNE _0x14
00010c 2444      	CLR  R4
                 ; 0000 0096 #endif
                 ; 0000 0097    ++tx_counter0;
                 _0x14:
00010d 9463      	INC  R6
                 ; 0000 0098    }
                 ; 0000 0099 else
00010e c003      	RJMP _0x15
                 _0x11:
                 ; 0000 009A    UDR0=c;
00010f 81e8      	LD   R30,Y
000110 93e0 00c6 	STS  198,R30
                 ; 0000 009B #asm("sei")
                 _0x15:
000112 9478      	sei
                 ; 0000 009C }
000113 9621      	ADIW R28,1
000114 9508      	RET
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;//*************************************************************************************************
                 ;//********************END SERIAL STUFF (USART0)  **************************************************
                 ;//*************************************************************************************************
                 ;//*******   if you need USART1, enable it in Code Wizard and copy coresponding code here  *********
                 ;//*************************************************************************************************
                 ;
                 ;/*
                 ; * Timer 1 Output Compare A interrupt is used to blink LED
                 ; */
                 ;
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 00AA {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
                 ; 0000 00AB //LED1 = ~LED1; // invert LED
                 ; 0000 00AC }
000115 9518      	RETI
                 ; .FEND
                 ;
                 ;/*
                 ; * main function of program
                 ; */
                 ;unsigned char displayJoc[9] = {'.', '.', '.','.', '.', '.','.', '.', '.'};
                 
                 	.DSEG
                 ;unsigned char caracterUrmator = 'X', remiza = 9, castigat = 0;
                 ;
                 ;void UpdateJoc(unsigned short butoane){
                 ; 0000 00B4 void UpdateJoc(unsigned short butoane){
                 
                 	.CSEG
                 _UpdateJoc:
                 ; .FSTART _UpdateJoc
                 ; 0000 00B5     unsigned char i, j;
                 ; 0000 00B6     for(i=0;i<3;i++){
000116 93ba      	ST   -Y,R27
000117 93aa      	ST   -Y,R26
000118 931a      	ST   -Y,R17
000119 930a      	ST   -Y,R16
                 ;	butoane -> Y+2
                 ;	i -> R17
                 ;	j -> R16
00011a e010      	LDI  R17,LOW(0)
                 _0x18:
00011b 3013      	CPI  R17,3
00011c f520      	BRSH _0x19
                 ; 0000 00B7         for(j=0; j<3;j++){
00011d e000      	LDI  R16,LOW(0)
                 _0x1B:
00011e 3003      	CPI  R16,3
00011f f4f8      	BRSH _0x1C
                 ; 0000 00B8             if((butoane & ((unsigned short)1<<(i*4+j))) != 0){
000120 2fe1      	MOV  R30,R17
000121 0fee      	LSL  R30
000122 0fee      	LSL  R30
000123 0fe0      	ADD  R30,R16
000124 940e 0496 	CALL SUBOPT_0x0
000126 81aa      	LDD  R26,Y+2
000127 81bb      	LDD  R27,Y+2+1
000128 23ea      	AND  R30,R26
000129 23fb      	AND  R31,R27
00012a 9730      	SBIW R30,0
00012b f089      	BREQ _0x1D
                 ; 0000 00B9                 if( displayJoc[j*3U+(2U-i)] == '.'){
00012c 940e 049b 	CALL SUBOPT_0x1
00012e 81a0      	LD   R26,Z
00012f 32ae      	CPI  R26,LOW(0x2E)
000130 f459      	BRNE _0x1E
                 ; 0000 00BA                     remiza--;
000131 948a      	DEC  R8
                 ; 0000 00BB                     displayJoc[j*3U+(2U-i)] = caracterUrmator;
000132 940e 049b 	CALL SUBOPT_0x1
000134 8290      	ST   Z,R9
                 ; 0000 00BC                     if(caracterUrmator == 'X'){
000135 e5e8      	LDI  R30,LOW(88)
000136 15e9      	CP   R30,R9
000137 f411      	BRNE _0x1F
                 ; 0000 00BD                         caracterUrmator = '0';
000138 e3e0      	LDI  R30,LOW(48)
000139 c001      	RJMP _0x4B
                 ; 0000 00BE                     }
                 ; 0000 00BF                     else{
                 _0x1F:
                 ; 0000 00C0                         caracterUrmator = 'X';
00013a e5e8      	LDI  R30,LOW(88)
                 _0x4B:
00013b 2e9e      	MOV  R9,R30
                 ; 0000 00C1                     }
                 ; 0000 00C2                 }
                 ; 0000 00C3                 break;
                 _0x1E:
00013c c002      	RJMP _0x1C
                 ; 0000 00C4             }
                 ; 0000 00C5         }
                 _0x1D:
00013d 5f0f      	SUBI R16,-1
00013e cfdf      	RJMP _0x1B
                 _0x1C:
                 ; 0000 00C6 
                 ; 0000 00C7     }
00013f 5f1f      	SUBI R17,-1
000140 cfda      	RJMP _0x18
                 _0x19:
                 ; 0000 00C8 }
000141 8119      	LDD  R17,Y+1
000142 8108      	LDD  R16,Y+0
000143 9624      	ADIW R28,4
000144 9508      	RET
                 ; .FEND
                 ;
                 ;void VerificaInvingatorul(){
                 ; 0000 00CA void VerificaInvingatorul(){
                 _VerificaInvingatorul:
                 ; .FSTART _VerificaInvingatorul
                 ; 0000 00CB     unsigned char i;
                 ; 0000 00CC     for(i=0;i<3;i++){
000145 931a      	ST   -Y,R17
                 ;	i -> R17
000146 e010      	LDI  R17,LOW(0)
                 _0x22:
000147 3013      	CPI  R17,3
000148 f008      	BRLO PC+2
000149 c04d      	RJMP _0x23
                 ; 0000 00CD         if(((displayJoc[i*3U] == displayJoc[i*3U+1U]) &&( displayJoc[i*3U+1U] == displayJoc[i*3U+2U])) && displayJoc[i*3 ...
00014a e0e3      	LDI  R30,LOW(3)
00014b 9fe1      	MUL  R30,R17
00014c 01f0      	MOVW R30,R0
00014d 01bf      	MOVW R22,R30
00014e 5fe0      	SUBI R30,LOW(-_displayJoc)
00014f 4ffd      	SBCI R31,HIGH(-_displayJoc)
000150 81a0      	LD   R26,Z
000151 01f0      	MOVW R30,R0
                +
000152 5eef     +SUBI R30 , LOW ( - _displayJoc - ( 1 ) )
000153 4ffd     +SBCI R31 , HIGH ( - _displayJoc - ( 1 ) )
                 	__ADDW1MN _displayJoc,1
000154 81e0      	LD   R30,Z
000155 17ea      	CP   R30,R26
000156 f451      	BRNE _0x25
000157 01fb      	MOVW R30,R22
                +
000158 5eef     +SUBI R30 , LOW ( - _displayJoc - ( 1 ) )
000159 4ffd     +SBCI R31 , HIGH ( - _displayJoc - ( 1 ) )
                 	__ADDW1MN _displayJoc,1
00015a 81a0      	LD   R26,Z
00015b 01fb      	MOVW R30,R22
                +
00015c 5eee     +SUBI R30 , LOW ( - _displayJoc - ( 2 ) )
00015d 4ffd     +SBCI R31 , HIGH ( - _displayJoc - ( 2 ) )
                 	__ADDW1MN _displayJoc,2
00015e 81e0      	LD   R30,Z
00015f 17ea      	CP   R30,R26
000160 f009      	BREQ _0x26
                 _0x25:
000161 c006      	RJMP _0x27
                 _0x26:
000162 01fb      	MOVW R30,R22
000163 5fe0      	SUBI R30,LOW(-_displayJoc)
000164 4ffd      	SBCI R31,HIGH(-_displayJoc)
000165 81a0      	LD   R26,Z
000166 32ae      	CPI  R26,LOW(0x2E)
000167 f409      	BRNE _0x28
                 _0x27:
000168 c006      	RJMP _0x24
                 _0x28:
                 ; 0000 00CE             castigat = displayJoc[i*3U];
000169 e0e3      	LDI  R30,LOW(3)
00016a 9fe1      	MUL  R30,R17
00016b 01f0      	MOVW R30,R0
00016c 5fe0      	SUBI R30,LOW(-_displayJoc)
00016d 4ffd      	SBCI R31,HIGH(-_displayJoc)
00016e 80b0      	LD   R11,Z
                 ; 0000 00CF         }
                 ; 0000 00D0         if(((displayJoc[i] == displayJoc[i+3U]) &&( displayJoc[i+3U] == displayJoc[i+6U])) && displayJoc[i] != '.'){
                 _0x24:
00016f 2fe1      	MOV  R30,R17
000170 e0f0      	LDI  R31,0
000171 5fe0      	SUBI R30,LOW(-_displayJoc)
000172 4ffd      	SBCI R31,HIGH(-_displayJoc)
000173 81a0      	LD   R26,Z
000174 2fe1      	MOV  R30,R17
000175 e0f0      	LDI  R31,0
                +
000176 5eed     +SUBI R30 , LOW ( - _displayJoc - ( 3 ) )
000177 4ffd     +SBCI R31 , HIGH ( - _displayJoc - ( 3 ) )
                 	__ADDW1MN _displayJoc,3
000178 81e0      	LD   R30,Z
000179 17ea      	CP   R30,R26
00017a f461      	BRNE _0x2A
00017b 2fe1      	MOV  R30,R17
00017c e0f0      	LDI  R31,0
                +
00017d 5eed     +SUBI R30 , LOW ( - _displayJoc - ( 3 ) )
00017e 4ffd     +SBCI R31 , HIGH ( - _displayJoc - ( 3 ) )
                 	__ADDW1MN _displayJoc,3
00017f 81a0      	LD   R26,Z
000180 2fe1      	MOV  R30,R17
000181 e0f0      	LDI  R31,0
                +
000182 5eea     +SUBI R30 , LOW ( - _displayJoc - ( 6 ) )
000183 4ffd     +SBCI R31 , HIGH ( - _displayJoc - ( 6 ) )
                 	__ADDW1MN _displayJoc,6
000184 81e0      	LD   R30,Z
000185 17ea      	CP   R30,R26
000186 f009      	BREQ _0x2B
                 _0x2A:
000187 c007      	RJMP _0x2C
                 _0x2B:
000188 2fe1      	MOV  R30,R17
000189 e0f0      	LDI  R31,0
00018a 5fe0      	SUBI R30,LOW(-_displayJoc)
00018b 4ffd      	SBCI R31,HIGH(-_displayJoc)
00018c 81a0      	LD   R26,Z
00018d 32ae      	CPI  R26,LOW(0x2E)
00018e f409      	BRNE _0x2D
                 _0x2C:
00018f c005      	RJMP _0x29
                 _0x2D:
                 ; 0000 00D1             castigat = displayJoc[i];
000190 2fe1      	MOV  R30,R17
000191 e0f0      	LDI  R31,0
000192 5fe0      	SUBI R30,LOW(-_displayJoc)
000193 4ffd      	SBCI R31,HIGH(-_displayJoc)
000194 80b0      	LD   R11,Z
                 ; 0000 00D2         }
                 ; 0000 00D3     }
                 _0x29:
000195 5f1f      	SUBI R17,-1
000196 cfb0      	RJMP _0x22
                 _0x23:
                 ; 0000 00D4     if(((displayJoc[0U] == displayJoc[4U]) &&( displayJoc[4U] == displayJoc[8U])) && displayJoc[0U] != '.'){
                +
000197 91e0 0214+LDS R30 , _displayJoc + ( 4 )
                 	__GETB1MN _displayJoc,4
000199 91a0 0210 	LDS  R26,_displayJoc
00019b 17ea      	CP   R30,R26
00019c f431      	BRNE _0x2F
                +
00019d 91a0 0214+LDS R26 , _displayJoc + ( 4 )
                 	__GETB2MN _displayJoc,4
                +
00019f 91e0 0218+LDS R30 , _displayJoc + ( 8 )
                 	__GETB1MN _displayJoc,8
0001a1 17ea      	CP   R30,R26
0001a2 f009      	BREQ _0x30
                 _0x2F:
0001a3 c004      	RJMP _0x31
                 _0x30:
0001a4 91a0 0210 	LDS  R26,_displayJoc
0001a6 32ae      	CPI  R26,LOW(0x2E)
0001a7 f409      	BRNE _0x32
                 _0x31:
0001a8 c002      	RJMP _0x2E
                 _0x32:
                 ; 0000 00D5             castigat = displayJoc[4U];
                +
0001a9 90b0 0214+LDS R11 , _displayJoc + ( 4 )
                 	__GETBRMN 11,_displayJoc,4
                 ; 0000 00D6     }
                 ; 0000 00D7     if(((displayJoc[6U] == displayJoc[4U]) &&( displayJoc[4U] == displayJoc[2U])) && displayJoc[2U] != '.'){
                 _0x2E:
                +
0001ab 91a0 0216+LDS R26 , _displayJoc + ( 6 )
                 	__GETB2MN _displayJoc,6
                +
0001ad 91e0 0214+LDS R30 , _displayJoc + ( 4 )
                 	__GETB1MN _displayJoc,4
0001af 17ea      	CP   R30,R26
0001b0 f431      	BRNE _0x34
                +
0001b1 91a0 0214+LDS R26 , _displayJoc + ( 4 )
                 	__GETB2MN _displayJoc,4
                +
0001b3 91e0 0212+LDS R30 , _displayJoc + ( 2 )
                 	__GETB1MN _displayJoc,2
0001b5 17ea      	CP   R30,R26
0001b6 f009      	BREQ _0x35
                 _0x34:
0001b7 c004      	RJMP _0x36
                 _0x35:
                +
0001b8 91a0 0212+LDS R26 , _displayJoc + ( 2 )
                 	__GETB2MN _displayJoc,2
0001ba 32ae      	CPI  R26,LOW(0x2E)
0001bb f409      	BRNE _0x37
                 _0x36:
0001bc c002      	RJMP _0x33
                 _0x37:
                 ; 0000 00D8             castigat = displayJoc[4U];
                +
0001bd 90b0 0214+LDS R11 , _displayJoc + ( 4 )
                 	__GETBRMN 11,_displayJoc,4
                 ; 0000 00D9     }
                 ; 0000 00DA     if(castigat){
                 _0x33:
0001bf 20bb      	TST  R11
0001c0 f081      	BREQ _0x38
                 ; 0000 00DB         LED1 = 1;
0001c1 9a5e      	SBI  0xB,6
                 ; 0000 00DC         printf("\rSUIIIIIIII a castigat %c\r", castigat);
                +
0001c2 e9ec     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001c3 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001c4 93fa      	ST   -Y,R31
0001c5 93ea      	ST   -Y,R30
0001c6 2deb      	MOV  R30,R11
0001c7 27ff      	CLR  R31
0001c8 2766      	CLR  R22
0001c9 2777      	CLR  R23
0001ca 940e 050b 	CALL __PUTPARD1
0001cc e084      	LDI  R24,4
0001cd 940e 0458 	CALL _printf
0001cf 9626      	ADIW R28,6
                 ; 0000 00DD     }
                 ; 0000 00DE     else if(remiza == 0){
0001d0 c00c      	RJMP _0x3B
                 _0x38:
0001d1 2088      	TST  R8
0001d2 f451      	BRNE _0x3C
                 ; 0000 00DF         castigat = 1;
0001d3 e0e1      	LDI  R30,LOW(1)
0001d4 2ebe      	MOV  R11,R30
                 ; 0000 00E0         printf("Mi se face rau");
                +
0001d5 ebe7     +LDI R30 , LOW ( 2 * _0x0 + ( 27 ) )
0001d6 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 27 ) )
                 	__POINTW1FN _0x0,27
0001d7 93fa      	ST   -Y,R31
0001d8 93ea      	ST   -Y,R30
0001d9 e080      	LDI  R24,0
0001da 940e 0458 	CALL _printf
0001dc 9622      	ADIW R28,2
                 ; 0000 00E1     }
                 ; 0000 00E2 
                 ; 0000 00E3 
                 ; 0000 00E4 }
                 _0x3C:
                 _0x3B:
                 _0x20A0001:
0001dd 9119      	LD   R17,Y+
0001de 9508      	RET
                 ; .FEND
                 ;
                 ;void PrinteazaJoc(){
                 ; 0000 00E6 void PrinteazaJoc(){
                 _PrinteazaJoc:
                 ; .FSTART _PrinteazaJoc
                 ; 0000 00E7     unsigned char i = 0, j=0;
                 ; 0000 00E8     for(i=0;i<3;i++){
0001df 931a      	ST   -Y,R17
0001e0 930a      	ST   -Y,R16
                 ;	i -> R17
                 ;	j -> R16
0001e1 e010      	LDI  R17,0
0001e2 e000      	LDI  R16,0
0001e3 e010      	LDI  R17,LOW(0)
                 _0x3E:
0001e4 3013      	CPI  R17,3
0001e5 f4a8      	BRSH _0x3F
                 ; 0000 00E9         for(j=0;j<3;j++){
0001e6 e000      	LDI  R16,LOW(0)
                 _0x41:
0001e7 3003      	CPI  R16,3
0001e8 f470      	BRSH _0x42
                 ; 0000 00EA             putchar(displayJoc[i*3U+j]);
0001e9 e0e3      	LDI  R30,LOW(3)
0001ea 9fe1      	MUL  R30,R17
0001eb 01f0      	MOVW R30,R0
0001ec 01df      	MOVW R26,R30
0001ed 2fe0      	MOV  R30,R16
0001ee e0f0      	LDI  R31,0
0001ef 0fea      	ADD  R30,R26
0001f0 1ffb      	ADC  R31,R27
0001f1 5fe0      	SUBI R30,LOW(-_displayJoc)
0001f2 4ffd      	SBCI R31,HIGH(-_displayJoc)
0001f3 81a0      	LD   R26,Z
0001f4 df02      	RCALL _putchar
                 ; 0000 00EB         }
0001f5 5f0f      	SUBI R16,-1
0001f6 cff0      	RJMP _0x41
                 _0x42:
                 ; 0000 00EC         putchar('\r');
0001f7 e0ad      	LDI  R26,LOW(13)
0001f8 defe      	RCALL _putchar
                 ; 0000 00ED     }
0001f9 5f1f      	SUBI R17,-1
0001fa cfe9      	RJMP _0x3E
                 _0x3F:
                 ; 0000 00EE     putchar('\r');
0001fb e0ad      	LDI  R26,LOW(13)
0001fc defa      	RCALL _putchar
                 ; 0000 00EF }
0001fd 9109      	LD   R16,Y+
0001fe 9119      	LD   R17,Y+
0001ff 9508      	RET
                 ; .FEND
                 ;
                 ;void main (void)
                 ; 0000 00F2 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00F3 unsigned short butoane;
                 ; 0000 00F4 	Init_initController();  // this must be the first "init" action/call!
                 ;	butoane -> R16,R17
000200 d01c      	RCALL _Init_initController
                 ; 0000 00F5 	#asm("sei")             // enable interrupts
000201 9478      	sei
                 ; 0000 00F6 	//LED1 = 1;           	// initial state, will be changed by timer 1
                 ; 0000 00F7     //putchar(AdresaNebuna);
                 ; 0000 00F8     DDRC &= (1<<0) | (1<<1);
000202 b1e7      	IN   R30,0x7
000203 70e3      	ANDI R30,LOW(0x3)
000204 b9e7      	OUT  0x7,R30
                 ; 0000 00F9     PORTC=(1<<0) | (1<<1);
000205 e0e3      	LDI  R30,LOW(3)
000206 b9e8      	OUT  0x8,R30
                 ; 0000 00FA     //TWBR = (1<<6) & (1<<3);
                 ; 0000 00FB     //TWCR = (1<<TWIE);
                 ; 0000 00FC     //i2c_init();
                 ; 0000 00FD     /*lcd(0x27,20,4);
                 ; 0000 00FE     init();
                 ; 0000 00FF     // Print a message to the LCD.
                 ; 0000 0100     backlight();
                 ; 0000 0101     setCursor(3,0);
                 ; 0000 0102     //print("Hello, world!");
                 ; 0000 0103     setCursor(2,1);
                 ; 0000 0104     //print("Ywrobot Arduino!");
                 ; 0000 0105     setCursor(0,2);
                 ; 0000 0106     //print("Arduino LCM IIC 2004");
                 ; 0000 0107     setCursor(2,3);
                 ; 0000 0108     //print("Power By Ec-yuan!");*/
                 ; 0000 0109     PrinteazaJoc();
000207 dfd7      	RCALL _PrinteazaJoc
                 ; 0000 010A 	while(TRUE)
                 _0x43:
                 ; 0000 010B 	{
                 ; 0000 010C         unsigned char temp;
                 ; 0000 010D         if(rx_counter0)     // if a character is available on serial port USART0
000208 9721      	SBIW R28,1
                 ;	temp -> Y+0
000209 2055      	TST  R5
00020a f011      	BREQ _0x46
                 ; 0000 010E 		{
                 ; 0000 010F 			temp = getchar();
00020b dec1      	RCALL _getchar
00020c 83e8      	ST   Y,R30
                 ; 0000 0110             //command(temp);
                 ; 0000 0111             //putchar(temp);
                 ; 0000 0112 		}
                 ; 0000 0113         butoane = ButoaneUpdate();
                 _0x46:
00020d 940e 0285 	CALL _ButoaneUpdate
00020f 018f      	MOVW R16,R30
                 ; 0000 0114         if(butoane && !castigat){
000210 2e00      	MOV  R0,R16
000211 2a01      	OR   R0,R17
000212 f011      	BREQ _0x48
000213 20bb      	TST  R11
000214 f009      	BREQ _0x49
                 _0x48:
000215 c004      	RJMP _0x47
                 _0x49:
                 ; 0000 0115             //TrimiteButoane(butoane);
                 ; 0000 0116             //update joc
                 ; 0000 0117             UpdateJoc(butoane);
000216 01d8      	MOVW R26,R16
000217 defe      	RCALL _UpdateJoc
                 ; 0000 0118             PrinteazaJoc();
000218 dfc6      	RCALL _PrinteazaJoc
                 ; 0000 0119             VerificaInvingatorul();
000219 df2b      	RCALL _VerificaInvingatorul
                 ; 0000 011A         }
                 ; 0000 011B 
                 ; 0000 011C     }
                 _0x47:
00021a 9621      	ADIW R28,1
00021b cfec      	RJMP _0x43
                 ; 0000 011D 
                 ; 0000 011E 
                 ; 0000 011F }// end main loop
                 _0x4A:
00021c cfff      	RJMP _0x4A
                 ; .FEND
                 ;
                 ;
                 ;/* initialization file */
                 ;
                 ;#include <mega164a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "defs.h"
                 ;
                 ;
                 ;/*
                 ; * most intialization values are generated using Code Wizard and depend on clock value
                 ; */
                 ;void Init_initController(void)
                 ; 0001 000B {
                 
                 	.CSEG
                 _Init_initController:
                 ; .FSTART _Init_initController
                 ; 0001 000C // Crystal Oscillator division factor: 1
                 ; 0001 000D #pragma optsize-
                 ; 0001 000E CLKPR=0x80;
00021d e8e0      	LDI  R30,LOW(128)
00021e 93e0 0061 	STS  97,R30
                 ; 0001 000F CLKPR=0x00;
000220 e0e0      	LDI  R30,LOW(0)
000221 93e0 0061 	STS  97,R30
                 ; 0001 0010 #ifdef _OPTIMIZE_SIZE_
                 ; 0001 0011 #pragma optsize+
                 ; 0001 0012 #endif
                 ; 0001 0013 
                 ; 0001 0014 // Input/Output Ports initialization
                 ; 0001 0015 // Port A initialization
                 ; 0001 0016 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0001 0017 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0001 0018 PORTA=0x00;
000223 b9e2      	OUT  0x2,R30
                 ; 0001 0019 DDRA=0x00;
000224 b9e1      	OUT  0x1,R30
                 ; 0001 001A 
                 ; 0001 001B // Port B initialization
                 ; 0001 001C PORTB=0x00;
000225 b9e5      	OUT  0x5,R30
                 ; 0001 001D DDRB=0x00;
000226 b9e4      	OUT  0x4,R30
                 ; 0001 001E 
                 ; 0001 001F // Port C initialization
                 ; 0001 0020 PORTC=0x00;
000227 b9e8      	OUT  0x8,R30
                 ; 0001 0021 DDRC=0x00;
000228 b9e7      	OUT  0x7,R30
                 ; 0001 0022 
                 ; 0001 0023 // Port D initialization
                 ; 0001 0024 PORTD=0b00100000; // D.5 needs pull-up resistor
000229 e2e0      	LDI  R30,LOW(32)
00022a b9eb      	OUT  0xB,R30
                 ; 0001 0025 DDRD= 0b01010000; // D.6 is LED, D.4 is test output
00022b e5e0      	LDI  R30,LOW(80)
00022c b9ea      	OUT  0xA,R30
                 ; 0001 0026 
                 ; 0001 0027 // Timer/Counter 0 initialization
                 ; 0001 0028 // Clock source: System Clock
                 ; 0001 0029 // Clock value: Timer 0 Stopped
                 ; 0001 002A // Mode: Normal top=FFh
                 ; 0001 002B // OC0 output: Disconnected
                 ; 0001 002C TCCR0A=0x00;
00022d e0e0      	LDI  R30,LOW(0)
00022e bde4      	OUT  0x24,R30
                 ; 0001 002D TCCR0B=0x00;
00022f bde5      	OUT  0x25,R30
                 ; 0001 002E TCNT0=0x00;
000230 bde6      	OUT  0x26,R30
                 ; 0001 002F OCR0A=0x00;
000231 bde7      	OUT  0x27,R30
                 ; 0001 0030 OCR0B=0x00;
000232 bde8      	OUT  0x28,R30
                 ; 0001 0031 
                 ; 0001 0032 // Timer/Counter 1 initialization
                 ; 0001 0033 // Clock source: System Clock
                 ; 0001 0034 // Clock value: 19.531 kHz = CLOCK/256
                 ; 0001 0035 // Mode: CTC top=OCR1A
                 ; 0001 0036 // OC1A output: Discon.
                 ; 0001 0037 // OC1B output: Discon.
                 ; 0001 0038 // Noise Canceler: Off
                 ; 0001 0039 // Input Capture on Falling Edge
                 ; 0001 003A // Timer 1 Overflow Interrupt: Off
                 ; 0001 003B // Input Capture Interrupt: Off
                 ; 0001 003C // Compare A Match Interrupt: On
                 ; 0001 003D // Compare B Match Interrupt: Off
                 ; 0001 003E 
                 ; 0001 003F TCCR1A=0x00;
000233 93e0 0080 	STS  128,R30
                 ; 0001 0040 TCCR1B=0x0D;
000235 e0ed      	LDI  R30,LOW(13)
000236 93e0 0081 	STS  129,R30
                 ; 0001 0041 TCNT1H=0x00;
000238 e0e0      	LDI  R30,LOW(0)
000239 93e0 0085 	STS  133,R30
                 ; 0001 0042 TCNT1L=0x00;
00023b 93e0 0084 	STS  132,R30
                 ; 0001 0043 ICR1H=0x00;
00023d 93e0 0087 	STS  135,R30
                 ; 0001 0044 ICR1L=0x00;
00023f 93e0 0086 	STS  134,R30
                 ; 0001 0045 
                 ; 0001 0046 // 1 sec = 19531 counts = 4C41H counts, from 0 to 4C40
                 ; 0001 0047 // 4C40H = 4CH (MSB) and 40H (LSB)
                 ; 0001 0048 OCR1AH=0x4C;
000241 e4ec      	LDI  R30,LOW(76)
000242 93e0 0089 	STS  137,R30
                 ; 0001 0049 OCR1AL=0x40;
000244 e4e0      	LDI  R30,LOW(64)
000245 93e0 0088 	STS  136,R30
                 ; 0001 004A 
                 ; 0001 004B OCR1BH=0x00;
000247 e0e0      	LDI  R30,LOW(0)
000248 93e0 008b 	STS  139,R30
                 ; 0001 004C OCR1BL=0x00;
00024a 93e0 008a 	STS  138,R30
                 ; 0001 004D 
                 ; 0001 004E // Timer/Counter 2 initialization
                 ; 0001 004F // Clock source: System Clock
                 ; 0001 0050 // Clock value: Timer2 Stopped
                 ; 0001 0051 // Mode: Normal top=0xFF
                 ; 0001 0052 // OC2A output: Disconnected
                 ; 0001 0053 // OC2B output: Disconnected
                 ; 0001 0054 ASSR=0x00;
00024c 93e0 00b6 	STS  182,R30
                 ; 0001 0055 TCCR2A=0x00;
00024e 93e0 00b0 	STS  176,R30
                 ; 0001 0056 TCCR2B=0x00;
000250 93e0 00b1 	STS  177,R30
                 ; 0001 0057 TCNT2=0x00;
000252 93e0 00b2 	STS  178,R30
                 ; 0001 0058 OCR2A=0x00;
000254 93e0 00b3 	STS  179,R30
                 ; 0001 0059 OCR2B=0x00;
000256 93e0 00b4 	STS  180,R30
                 ; 0001 005A 
                 ; 0001 005B // External Interrupt(s) initialization
                 ; 0001 005C // INT0: Off
                 ; 0001 005D // INT1: Off
                 ; 0001 005E // INT2: Off
                 ; 0001 005F // Interrupt on any change on pins PCINT0-7: Off
                 ; 0001 0060 // Interrupt on any change on pins PCINT8-15: Off
                 ; 0001 0061 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0001 0062 // Interrupt on any change on pins PCINT24-31: Off
                 ; 0001 0063 EICRA=0x00;
000258 93e0 0069 	STS  105,R30
                 ; 0001 0064 EIMSK=0x00;
00025a bbed      	OUT  0x1D,R30
                 ; 0001 0065 PCICR=0x00;
00025b 93e0 0068 	STS  104,R30
                 ; 0001 0066 
                 ; 0001 0067 // Timer/Counter 0,1,2 Interrupt(s) initialization
                 ; 0001 0068 TIMSK0=0x00;
00025d 93e0 006e 	STS  110,R30
                 ; 0001 0069 TIMSK1=0x02;
00025f e0e2      	LDI  R30,LOW(2)
000260 93e0 006f 	STS  111,R30
                 ; 0001 006A TIMSK2=0x00;
000262 e0e0      	LDI  R30,LOW(0)
000263 93e0 0070 	STS  112,R30
                 ; 0001 006B 
                 ; 0001 006C // USART0 initialization
                 ; 0001 006D // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0001 006E // USART0 Receiver: On
                 ; 0001 006F // USART0 Transmitter: On
                 ; 0001 0070 // USART0 Mode: Asynchronous
                 ; 0001 0071 // USART0 Baud rate: 9600
                 ; 0001 0072 UCSR0A=0x00;
000265 93e0 00c0 	STS  192,R30
                 ; 0001 0073 UCSR0B=0xD8;
000267 ede8      	LDI  R30,LOW(216)
000268 93e0 00c1 	STS  193,R30
                 ; 0001 0074 UCSR0C=0x06;
00026a e0e6      	LDI  R30,LOW(6)
00026b 93e0 00c2 	STS  194,R30
                 ; 0001 0075 UBRR0H=0x00;
00026d e0e0      	LDI  R30,LOW(0)
00026e 93e0 00c5 	STS  197,R30
                 ; 0001 0076 UBRR0L=0x81;
000270 e8e1      	LDI  R30,LOW(129)
000271 93e0 00c4 	STS  196,R30
                 ; 0001 0077 
                 ; 0001 0078 // USART1 initialization
                 ; 0001 0079 // USART1 disabled
                 ; 0001 007A UCSR1B=0x00;
000273 e0e0      	LDI  R30,LOW(0)
000274 93e0 00c9 	STS  201,R30
                 ; 0001 007B 
                 ; 0001 007C 
                 ; 0001 007D // Analog Comparator initialization
                 ; 0001 007E // Analog Comparator: Off
                 ; 0001 007F // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0001 0080 ACSR=0x80;
000276 e8e0      	LDI  R30,LOW(128)
000277 bfe0      	OUT  0x30,R30
                 ; 0001 0081 ADCSRB=0x00;
000278 e0e0      	LDI  R30,LOW(0)
000279 93e0 007b 	STS  123,R30
                 ; 0001 0082 DIDR1=0x00;
00027b 93e0 007f 	STS  127,R30
                 ; 0001 0083 
                 ; 0001 0084 // Watchdog Timer initialization
                 ; 0001 0085 // Watchdog Timer Prescaler: OSC/2048
                 ; 0001 0086 #pragma optsize-
                 ; 0001 0087 #asm("wdr")
00027d 95a8      	wdr
                 ; 0001 0088 // Write 2 consecutive values to enable watchdog
                 ; 0001 0089 // this is NOT a mistake !
                 ; 0001 008A WDTCSR=0x10;
00027e e1e0      	LDI  R30,LOW(16)
00027f 93e0 0060 	STS  96,R30
                 ; 0001 008B WDTCSR=0x00;
000281 e0e0      	LDI  R30,LOW(0)
000282 93e0 0060 	STS  96,R30
                 ; 0001 008C #ifdef _OPTIMIZE_SIZE_
                 ; 0001 008D #pragma optsize+
                 ; 0001 008E #endif
                 ; 0001 008F 
                 ; 0001 0090 }
000284 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;#include "functii.h"
                 ;#include <mega164a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;unsigned short ButoaneUpdate(){
                 ; 0002 0006 unsigned short ButoaneUpdate(){
                 
                 	.CSEG
                 _ButoaneUpdate:
                 ; .FSTART _ButoaneUpdate
                 ; 0002 0007     static unsigned short StareButoaneInainte = 0x00;
                 ; 0002 0008     volatile unsigned short StareButoane = 0x00, ButoaneApasate = 0x00, i;
                 ; 0002 0009     volatile unsigned char aux;
                 ; 0002 000A 
                 ; 0002 000B     PORTA = (1<<PINA4);// & 0xF0;
000285 9727      	SBIW R28,7
000286 e0e0      	LDI  R30,LOW(0)
000287 83eb      	STD  Y+3,R30
000288 83ec      	STD  Y+4,R30
000289 83ed      	STD  Y+5,R30
00028a 83ee      	STD  Y+6,R30
                 ;	StareButoane -> Y+5
                 ;	ButoaneApasate -> Y+3
                 ;	i -> Y+1
                 ;	aux -> Y+0
00028b e1e0      	LDI  R30,LOW(16)
00028c 940e 04ab 	CALL SUBOPT_0x2
                 ; 0002 000C     DDRA = 0xFF;
                 ; 0002 000D     delay_us(1);
                 ; 0002 000E     DDRA = (1<<PINA4);
00028e e1e0      	LDI  R30,LOW(16)
00028f 940e 04b2 	CALL SUBOPT_0x3
                 ; 0002 000F     for(i=0; i<10;i++){
                 _0x40004:
000291 81a9      	LDD  R26,Y+1
000292 81ba      	LDD  R27,Y+1+1
000293 971a      	SBIW R26,10
000294 f428      	BRSH _0x40005
                 ; 0002 0010         aux = PINA;
000295 b1e0      	IN   R30,0x0
000296 83e8      	ST   Y,R30
                 ; 0002 0011     }
000297 940e 04b7 	CALL SUBOPT_0x4
000299 cff7      	RJMP _0x40004
                 _0x40005:
                 ; 0002 0012     StareButoane |= (unsigned short)(aux & ((1<<PINA0) | (1<<PINA1) | (1<< PINA2) | (1<<PINA3)));
00029a 81e8      	LD   R30,Y
00029b 70ef      	ANDI R30,LOW(0xF)
00029c e0f0      	LDI  R31,0
00029d 940e 04bd 	CALL SUBOPT_0x5
                 ; 0002 0013 
                 ; 0002 0014     PORTA = (1<<PINA5);// & 0xF0;
00029f e2e0      	LDI  R30,LOW(32)
0002a0 940e 04ab 	CALL SUBOPT_0x2
                 ; 0002 0015     DDRA = 0xFF;
                 ; 0002 0016     delay_us(1);
                 ; 0002 0017     DDRA = (1<<PINA5);
0002a2 e2e0      	LDI  R30,LOW(32)
0002a3 940e 04b2 	CALL SUBOPT_0x3
                 ; 0002 0018     for(i=0; i<10;i++){
                 _0x40007:
0002a5 81a9      	LDD  R26,Y+1
0002a6 81ba      	LDD  R27,Y+1+1
0002a7 971a      	SBIW R26,10
0002a8 f428      	BRSH _0x40008
                 ; 0002 0019         aux = PINA;
0002a9 b1e0      	IN   R30,0x0
0002aa 83e8      	ST   Y,R30
                 ; 0002 001A     }
0002ab 940e 04b7 	CALL SUBOPT_0x4
0002ad cff7      	RJMP _0x40007
                 _0x40008:
                 ; 0002 001B     StareButoane |= (unsigned short)(aux & ((1<<PINA0) | (1<<PINA1) | (1<< PINA2) | (1<<PINA3))) << 4;
0002ae 81e8      	LD   R30,Y
0002af 70ef      	ANDI R30,LOW(0xF)
0002b0 e0f0      	LDI  R31,0
0002b1 940e 04fa 	CALL __LSLW4
0002b3 940e 04bd 	CALL SUBOPT_0x5
                 ; 0002 001C 
                 ; 0002 001D     PORTA = (1<<PINA6);// & 0xF0;
0002b5 e4e0      	LDI  R30,LOW(64)
0002b6 940e 04ab 	CALL SUBOPT_0x2
                 ; 0002 001E     DDRA = 0xFF;
                 ; 0002 001F     delay_us(1);
                 ; 0002 0020     DDRA = (1<<PINA6);
0002b8 e4e0      	LDI  R30,LOW(64)
0002b9 940e 04b2 	CALL SUBOPT_0x3
                 ; 0002 0021     for(i=0; i<10;i++){
                 _0x4000A:
0002bb 81a9      	LDD  R26,Y+1
0002bc 81ba      	LDD  R27,Y+1+1
0002bd 971a      	SBIW R26,10
0002be f428      	BRSH _0x4000B
                 ; 0002 0022         aux = PINA;
0002bf b1e0      	IN   R30,0x0
0002c0 83e8      	ST   Y,R30
                 ; 0002 0023     }
0002c1 940e 04b7 	CALL SUBOPT_0x4
0002c3 cff7      	RJMP _0x4000A
                 _0x4000B:
                 ; 0002 0024     StareButoane |= (unsigned short)(aux & ((1<<PINA0) | (1<<PINA1) | (1<< PINA2) | (1<<PINA3))) << 8;
0002c4 81e8      	LD   R30,Y
0002c5 70ef      	ANDI R30,LOW(0xF)
0002c6 2ffe      	MOV  R31,R30
0002c7 e0e0      	LDI  R30,0
0002c8 940e 04bd 	CALL SUBOPT_0x5
                 ; 0002 0025 
                 ; 0002 0026     PORTA = (1<<PINA7);// & 0xF0;
0002ca e8e0      	LDI  R30,LOW(128)
0002cb 940e 04ab 	CALL SUBOPT_0x2
                 ; 0002 0027     DDRA = 0xFF;
                 ; 0002 0028     delay_us(1);
                 ; 0002 0029     DDRA = (1<<PINA7);
0002cd e8e0      	LDI  R30,LOW(128)
0002ce 940e 04b2 	CALL SUBOPT_0x3
                 ; 0002 002A     for(i=0; i<10;i++){
                 _0x4000D:
0002d0 81a9      	LDD  R26,Y+1
0002d1 81ba      	LDD  R27,Y+1+1
0002d2 971a      	SBIW R26,10
0002d3 f428      	BRSH _0x4000E
                 ; 0002 002B         aux = PINA;
0002d4 b1e0      	IN   R30,0x0
0002d5 83e8      	ST   Y,R30
                 ; 0002 002C     }
0002d6 940e 04b7 	CALL SUBOPT_0x4
0002d8 cff7      	RJMP _0x4000D
                 _0x4000E:
                 ; 0002 002D     PORTA = 0;
0002d9 e0e0      	LDI  R30,LOW(0)
0002da b9e2      	OUT  0x2,R30
                 ; 0002 002E     StareButoane |= (unsigned short)(aux & ((1<<PINA0) | (1<<PINA1) | (1<< PINA2) | (1<<PINA3))) << 12;
0002db 81e8      	LD   R30,Y
0002dc 70ef      	ANDI R30,LOW(0xF)
0002dd e0f0      	LDI  R31,0
0002de 940e 04fa 	CALL __LSLW4
0002e0 2ffe      	MOV  R31,R30
0002e1 e0e0      	LDI  R30,0
0002e2 940e 04bd 	CALL SUBOPT_0x5
                 ; 0002 002F 
                 ; 0002 0030     for(i=0;i<16;i++){
0002e4 e0e0      	LDI  R30,LOW(0)
0002e5 83e9      	STD  Y+1,R30
0002e6 83ea      	STD  Y+1+1,R30
                 _0x40010:
0002e7 81a9      	LDD  R26,Y+1
0002e8 81ba      	LDD  R27,Y+1+1
0002e9 9750      	SBIW R26,16
0002ea f508      	BRSH _0x40011
                 ; 0002 0031         if(((StareButoaneInainte & ((unsigned short)1<<i)) == 0) && ((StareButoane & ((unsigned short)1<<i)) != 0)){
0002eb 81e9      	LDD  R30,Y+1
0002ec 940e 0496 	CALL SUBOPT_0x0
0002ee 91a0 0219 	LDS  R26,_StareButoaneInainte_S0020000000
0002f0 91b0 021a 	LDS  R27,_StareButoaneInainte_S0020000000+1
0002f2 23ea      	AND  R30,R26
0002f3 23fb      	AND  R31,R27
0002f4 9730      	SBIW R30,0
0002f5 f449      	BRNE _0x40013
0002f6 81e9      	LDD  R30,Y+1
0002f7 940e 0496 	CALL SUBOPT_0x0
0002f9 81ad      	LDD  R26,Y+5
0002fa 81be      	LDD  R27,Y+5+1
0002fb 23ea      	AND  R30,R26
0002fc 23fb      	AND  R31,R27
0002fd 9730      	SBIW R30,0
0002fe f409      	BRNE _0x40014
                 _0x40013:
0002ff c009      	RJMP _0x40012
                 _0x40014:
                 ; 0002 0032             ButoaneApasate |= ((unsigned short)1<<i);
000300 81e9      	LDD  R30,Y+1
000301 940e 0496 	CALL SUBOPT_0x0
000303 81ab      	LDD  R26,Y+3
000304 81bc      	LDD  R27,Y+3+1
000305 2bea      	OR   R30,R26
000306 2bfb      	OR   R31,R27
000307 83eb      	STD  Y+3,R30
000308 83fc      	STD  Y+3+1,R31
                 ; 0002 0033         }
                 ; 0002 0034     }
                 _0x40012:
000309 940e 04b7 	CALL SUBOPT_0x4
00030b cfdb      	RJMP _0x40010
                 _0x40011:
                 ; 0002 0035     StareButoaneInainte = StareButoane;
00030c 81ed      	LDD  R30,Y+5
00030d 81fe      	LDD  R31,Y+5+1
00030e 93e0 0219 	STS  _StareButoaneInainte_S0020000000,R30
000310 93f0 021a 	STS  _StareButoaneInainte_S0020000000+1,R31
                 ; 0002 0036     return ButoaneApasate;
000312 81eb      	LDD  R30,Y+3
000313 81fc      	LDD  R31,Y+3+1
000314 9627      	ADIW R28,7
000315 9508      	RET
                 ; 0002 0037 }
                 ; .FEND
                 ;
                 ;void TrimiteButoane(unsigned short Butoane){
                 ; 0002 0039 void TrimiteButoane(unsigned short Butoane){
                 ; 0002 003A     unsigned char i, Printez = 0;
                 ; 0002 003B     for(i = 0; i < 16; i++){
                 ;	Butoane -> Y+2
                 ;	i -> R17
                 ;	Printez -> R16
                 ; 0002 003C         if(Butoane % 2 == 1){
                 ; 0002 003D             putchar(i + 'a');
                 ; 0002 003E             Printez = 1;
                 ; 0002 003F         }
                 ; 0002 0040         Butoane /= 2;
                 ; 0002 0041     }
                 ; 0002 0042     if(Printez){
                 ; 0002 0043         putchar('\r');
                 ; 0002 0044     }
                 ; 0002 0045 
                 ; 0002 0046 }
                 ;#include "ecran.h"
                 ;#include <stdio.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;#include <i2c.h>
                 ;
                 ;  uint8_t _Addr;
                 ;  uint8_t _displayfunction;
                 ;  uint8_t _displaycontrol;
                 ;  uint8_t _displaymode;
                 ;  uint8_t _numlines;
                 ;  uint8_t _cols;
                 ;  uint8_t _rows;
                 ;  uint8_t _backlightval;
                 ;
                 ;  // Based on the work by DFRobot
                 ;
                 ;#define printIIC(args)    i2c_write(args)//Wire.send(args)
                 ;void write(uint8_t value) {
                 ; 0003 0012 void write(uint8_t value) {
                 
                 	.CSEG
                 ; 0003 0013     send(value, Rs);
                 ;	value -> Y+0
                 ; 0003 0014 }
                 ;
                 ;
                 ;// When the display powers up, it is configured as follows:
                 ;//
                 ;// 1. Display clear
                 ;// 2. Function set:
                 ;//    DL = 1; 8-bit interface data
                 ;//    N = 0; 1-line display
                 ;//    F = 0; 5x8 dot character font
                 ;// 3. Display on/off control:
                 ;//    D = 0; Display off
                 ;//    C = 0; Cursor off
                 ;//    B = 0; Blinking off
                 ;// 4. Entry mode set:
                 ;//    I/D = 1; Increment by 1
                 ;//    S = 0; No shift
                 ;//
                 ;// Note, however, that resetting the Arduino doesn't reset the LCD, so we
                 ;// can't assume that its in that state when a sketch starts (and the
                 ;// LiquidCrystal constructor is called).
                 ;
                 ;void lcd(uint8_t lcd_Addr,uint8_t lcd_cols,uint8_t lcd_rows)
                 ; 0003 002B {
                 ; 0003 002C   _Addr = lcd_Addr;
                 ;	lcd_Addr -> Y+2
                 ;	lcd_cols -> Y+1
                 ;	lcd_rows -> Y+0
                 ; 0003 002D   _cols = lcd_cols;
                 ; 0003 002E   _rows = lcd_rows;
                 ; 0003 002F   _backlightval = LCD_NOBACKLIGHT;
                 ; 0003 0030 }
                 ;
                 ;void init(){
                 ; 0003 0032 void init(){
                 ; 0003 0033     init_priv();
                 ; 0003 0034 }
                 ;
                 ;void init_priv()
                 ; 0003 0037 {
                 ; 0003 0038     //Wire.begin();
                 ; 0003 0039     i2c_init();
                 ; 0003 003A     _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
                 ; 0003 003B     begin(_cols, _rows, LCD_5x8DOTS);
                 ; 0003 003C }
                 ;
                 ;void begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
                 ; 0003 003E void begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
                 ; 0003 003F     if (lines > 1) {
                 ;	cols -> Y+2
                 ;	lines -> Y+1
                 ;	dotsize -> Y+0
                 ; 0003 0040         _displayfunction |= LCD_2LINE;
                 ; 0003 0041     }
                 ; 0003 0042     _numlines = lines;
                 ; 0003 0043 
                 ; 0003 0044     // for some 1 line displays you can select a 10 pixel high font
                 ; 0003 0045     if ((dotsize != 0) && (lines == 1)) {
                 ; 0003 0046         _displayfunction |= LCD_5x10DOTS;
                 ; 0003 0047     }
                 ; 0003 0048 
                 ; 0003 0049     // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
                 ; 0003 004A     // according to datasheet, we need at least 40ms after power rises above 2.7V
                 ; 0003 004B     // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
                 ; 0003 004C     delay_ms(50);
                 ; 0003 004D 
                 ; 0003 004E     // Now we pull both RS and R/W low to begin commands
                 ; 0003 004F     expanderWrite(_backlightval);    // reset expanderand turn backlight off (Bit 8 =1)
                 ; 0003 0050     delay_ms(1000);
                 ; 0003 0051 
                 ; 0003 0052       //put the LCD into 4 bit mode
                 ; 0003 0053     // this is according to the hitachi HD44780 datasheet
                 ; 0003 0054     // figure 24, pg 46
                 ; 0003 0055 
                 ; 0003 0056       // we start in 8bit mode, try to set 4 bit mode
                 ; 0003 0057    write4bits(0x03 << 4);
                 ; 0003 0058    delay_us(4500); // wait min 4.1ms
                 ; 0003 0059 
                 ; 0003 005A    // second try
                 ; 0003 005B    write4bits(0x03 << 4);
                 ; 0003 005C    delay_us(4500); // wait min 4.1ms
                 ; 0003 005D 
                 ; 0003 005E    // third go!
                 ; 0003 005F    write4bits(0x03 << 4);
                 ; 0003 0060    delay_us(150);
                 ; 0003 0061 
                 ; 0003 0062    // finally, set to 4-bit interface
                 ; 0003 0063    write4bits(0x02 << 4);
                 ; 0003 0064 
                 ; 0003 0065 
                 ; 0003 0066     // set # lines, font size, etc.
                 ; 0003 0067     command(LCD_FUNCTIONSET | _displayfunction);
                 ; 0003 0068 
                 ; 0003 0069     // turn the display on with no cursor or blinking default
                 ; 0003 006A     _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
                 ; 0003 006B     display();
                 ; 0003 006C 
                 ; 0003 006D     // clear it off
                 ; 0003 006E     clear();
                 ; 0003 006F 
                 ; 0003 0070     // Initialize to default text direction (for roman languages)
                 ; 0003 0071     _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
                 ; 0003 0072 
                 ; 0003 0073     // set the entry mode
                 ; 0003 0074     command(LCD_ENTRYMODESET | _displaymode);
                 ; 0003 0075 
                 ; 0003 0076     home();
                 ; 0003 0077 
                 ; 0003 0078 }
                 ;
                 ;/********** high level commands, for the user! */
                 ;void clear(){
                 ; 0003 007B void clear(){
                 ; 0003 007C     command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
                 ; 0003 007D     delay_us(2000);  // this command takes a long time!
                 ; 0003 007E }
                 ;
                 ;void home(){
                 ; 0003 0080 void home(){
                 ; 0003 0081     command(LCD_RETURNHOME);  // set cursor position to zero
                 ; 0003 0082     delay_us(2000);  // this command takes a long time!
                 ; 0003 0083 }
                 ;
                 ;void setCursor(uint8_t col, uint8_t row){
                 ; 0003 0085 void setCursor(uint8_t col, uint8_t row){
                 ; 0003 0086     int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
                 ; 0003 0087     if ( row > _numlines ) {
                 ;	col -> Y+9
                 ;	row -> Y+8
                 ;	row_offsets -> Y+0
                 ; 0003 0088         row = _numlines-1;    // we count rows starting w/0
                 ; 0003 0089     }
                 ; 0003 008A     command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
                 ; 0003 008B }
                 ;
                 ;// Turn the display on/off (quickly)
                 ;void noDisplay() {
                 ; 0003 008E void noDisplay() {
                 ; 0003 008F     _displaycontrol &= ~LCD_DISPLAYON;
                 ; 0003 0090     command(LCD_DISPLAYCONTROL | _displaycontrol);
                 ; 0003 0091 }
                 ;void display() {
                 ; 0003 0092 void display() {
                 ; 0003 0093     _displaycontrol |= LCD_DISPLAYON;
                 ; 0003 0094     command(LCD_DISPLAYCONTROL | _displaycontrol);
                 ; 0003 0095 }
                 ;
                 ;// Turns the underline cursor on/off
                 ;void noCursor() {
                 ; 0003 0098 void noCursor() {
                 ; 0003 0099     _displaycontrol &= ~LCD_CURSORON;
                 ; 0003 009A     command(LCD_DISPLAYCONTROL | _displaycontrol);
                 ; 0003 009B }
                 ;void cursor() {
                 ; 0003 009C void cursor() {
                 ; 0003 009D     _displaycontrol |= LCD_CURSORON;
                 ; 0003 009E     command(LCD_DISPLAYCONTROL | _displaycontrol);
                 ; 0003 009F }
                 ;
                 ;// Turn on and off the blinking cursor
                 ;void noBlink() {
                 ; 0003 00A2 void noBlink() {
                 ; 0003 00A3     _displaycontrol &= ~LCD_BLINKON;
                 ; 0003 00A4     command(LCD_DISPLAYCONTROL | _displaycontrol);
                 ; 0003 00A5 }
                 ;void blink() {
                 ; 0003 00A6 void blink() {
                 ; 0003 00A7     _displaycontrol |= LCD_BLINKON;
                 ; 0003 00A8     command(LCD_DISPLAYCONTROL | _displaycontrol);
                 ; 0003 00A9 }
                 ;
                 ;// These commands scroll the display without changing the RAM
                 ;void scrollDisplayLeft(void) {
                 ; 0003 00AC void scrollDisplayLeft(void) {
                 ; 0003 00AD     command(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
                 ; 0003 00AE }
                 ;void scrollDisplayRight(void) {
                 ; 0003 00AF void scrollDisplayRight(void) {
                 ; 0003 00B0     command(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
                 ; 0003 00B1 }
                 ;
                 ;// This is for text that flows Left to Right
                 ;void leftToRight(void) {
                 ; 0003 00B4 void leftToRight(void) {
                 ; 0003 00B5     _displaymode |= LCD_ENTRYLEFT;
                 ; 0003 00B6     command(LCD_ENTRYMODESET | _displaymode);
                 ; 0003 00B7 }
                 ;
                 ;// This is for text that flows Right to Left
                 ;void rightToLeft(void) {
                 ; 0003 00BA void rightToLeft(void) {
                 ; 0003 00BB     _displaymode &= ~LCD_ENTRYLEFT;
                 ; 0003 00BC     command(LCD_ENTRYMODESET | _displaymode);
                 ; 0003 00BD }
                 ;
                 ;// This will 'right justify' text from the cursor
                 ;void autoscroll(void) {
                 ; 0003 00C0 void autoscroll(void) {
                 ; 0003 00C1     _displaymode |= LCD_ENTRYSHIFTINCREMENT;
                 ; 0003 00C2     command(LCD_ENTRYMODESET | _displaymode);
                 ; 0003 00C3 }
                 ;
                 ;// This will 'left justify' text from the cursor
                 ;void noAutoscroll(void) {
                 ; 0003 00C6 void noAutoscroll(void) {
                 ; 0003 00C7     _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
                 ; 0003 00C8     command(LCD_ENTRYMODESET | _displaymode);
                 ; 0003 00C9 }
                 ;
                 ;// Allows us to fill the first 8 CGRAM locations
                 ;// with custom characters
                 ;void createChar(uint8_t location, uint8_t charmap[]) {
                 ; 0003 00CD void createChar(uint8_t location, uint8_t charmap[]) {
                 ; 0003 00CE     int i;
                 ; 0003 00CF     location &= 0x7; // we only have 8 locations 0-7
                 ;	location -> Y+4
                 ;	charmap -> Y+2
                 ;	i -> R16,R17
                 ; 0003 00D0     command(LCD_SETCGRAMADDR | (location << 3));
                 ; 0003 00D1     for (i=0; i<8; i++) {
                 ; 0003 00D2         write(charmap[i]);
                 ; 0003 00D3     }
                 ; 0003 00D4 }
                 ;
                 ;// Turn the (optional) backlight off/on
                 ;void noBacklight(void) {
                 ; 0003 00D7 void noBacklight(void) {
                 ; 0003 00D8     _backlightval=LCD_NOBACKLIGHT;
                 ; 0003 00D9     expanderWrite(0);
                 ; 0003 00DA }
                 ;
                 ;void backlight(void) {
                 ; 0003 00DC void backlight(void) {
                 ; 0003 00DD     _backlightval=LCD_BACKLIGHT;
                 ; 0003 00DE     expanderWrite(0);
                 ; 0003 00DF }
                 ;
                 ;
                 ;
                 ;/*********** mid level commands, for sending data/cmds */
                 ;void command(uint8_t value) {
                 ; 0003 00E4 void command(uint8_t value) {
                 ; 0003 00E5     send(value, 0);
                 ;	value -> Y+0
                 ; 0003 00E6 }
                 ;
                 ;
                 ;/************ low level data pushing commands **********/
                 ;
                 ;// write either command or data
                 ;void send(uint8_t value, uint8_t mode) {
                 ; 0003 00EC void send(uint8_t value, uint8_t mode) {
                 ; 0003 00ED     uint8_t highnib=value&0xf0;
                 ; 0003 00EE     uint8_t lownib=(value<<4)&0xf0;
                 ; 0003 00EF        write4bits((highnib)|mode);
                 ;	value -> Y+3
                 ;	mode -> Y+2
                 ;	highnib -> R17
                 ;	lownib -> R16
                 ; 0003 00F0     write4bits((lownib)|mode);
                 ; 0003 00F1 }
                 ;
                 ;void write4bits(uint8_t value) {
                 ; 0003 00F3 void write4bits(uint8_t value) {
                 ; 0003 00F4     expanderWrite(value);
                 ;	value -> Y+0
                 ; 0003 00F5     pulseEnable(value);
                 ; 0003 00F6 }
                 ;
                 ;void expanderWrite(uint8_t _data){
                 ; 0003 00F8 void expanderWrite(uint8_t _data){
                 ; 0003 00F9     //Wire.beginTransmission(_Addr);
                 ; 0003 00FA     i2c_start();
                 ;	_data -> Y+0
                 ; 0003 00FB     i2c_write(_Addr);
                 ; 0003 00FC     printIIC((int)(_data) | _backlightval);
                 ; 0003 00FD     //Wire.endTransmission();
                 ; 0003 00FE     i2c_stop();
                 ; 0003 00FF }
                 ;
                 ;void pulseEnable(uint8_t _data){
                 ; 0003 0101 void pulseEnable(uint8_t _data){
                 ; 0003 0102     expanderWrite(_data | En);    // En high
                 ;	_data -> Y+0
                 ; 0003 0103     delay_us(1);        // enable pulse must be >450ns
                 ; 0003 0104 
                 ; 0003 0105     expanderWrite(_data & ~En);    // En low
                 ; 0003 0106     delay_us(50);        // commands need > 37us to settle
                 ; 0003 0107 }
                 ;
                 ;
                 ;// Alias functions
                 ;
                 ;void cursor_on(){
                 ; 0003 010C void cursor_on(){
                 ; 0003 010D     cursor();
                 ; 0003 010E }
                 ;
                 ;void cursor_off(){
                 ; 0003 0110 void cursor_off(){
                 ; 0003 0111     noCursor();
                 ; 0003 0112 }
                 ;
                 ;void blink_on(){
                 ; 0003 0114 void blink_on(){
                 ; 0003 0115     blink();
                 ; 0003 0116 }
                 ;
                 ;void blink_off(){
                 ; 0003 0118 void blink_off(){
                 ; 0003 0119     noBlink();
                 ; 0003 011A }
                 ;
                 ;void load_custom_character(uint8_t char_num, uint8_t *rows){
                 ; 0003 011C void load_custom_character(uint8_t char_num, uint8_t *rows){
                 ; 0003 011D         createChar(char_num, rows);
                 ;	char_num -> Y+2
                 ;	*rows -> Y+0
                 ; 0003 011E }
                 ;
                 ;void setBacklight(uint8_t new_val){
                 ; 0003 0120 void setBacklight(uint8_t new_val){
                 ; 0003 0121     if(new_val){
                 ;	new_val -> Y+0
                 ; 0003 0122         backlight();        // turn backlight on
                 ; 0003 0123     }else{
                 ; 0003 0124         noBacklight();        // turn backlight off
                 ; 0003 0125     }
                 ; 0003 0126 }
                 ;
                 ;/*void printstr(const char c[]){
                 ;    //This function is not identical to the function used for "real" I2C displays
                 ;    //it's here so the user sketch doesn't have to be changed
                 ;    //print(c);
                 ;} */
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
000316 93ba      	ST   -Y,R27
000317 93aa      	ST   -Y,R26
000318 81aa      	LDD  R26,Y+2
000319 940e 00f7 	CALL _putchar
00031b 81a8      	LD   R26,Y
00031c 81b9      	LDD  R27,Y+1
00031d 91ed      	LD   R30,X+
00031e 91fd      	LD   R31,X+
00031f 9631      	ADIW R30,1
000320 93fe      	ST   -X,R31
000321 93ee      	ST   -X,R30
000322 9623      	ADIW R28,3
000323 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000324 93ba      	ST   -Y,R27
000325 93aa      	ST   -Y,R26
000326 9726      	SBIW R28,6
000327 940e 0517 	CALL __SAVELOCR6
000329 e010      	LDI  R17,0
00032a 85ac      	LDD  R26,Y+12
00032b 85bd      	LDD  R27,Y+12+1
00032c e0e0      	LDI  R30,LOW(0)
00032d e0f0      	LDI  R31,HIGH(0)
00032e 93ed      	ST   X+,R30
00032f 93fc      	ST   X,R31
                 _0x2000016:
000330 89ea      	LDD  R30,Y+18
000331 89fb      	LDD  R31,Y+18+1
000332 9631      	ADIW R30,1
000333 8bea      	STD  Y+18,R30
000334 8bfb      	STD  Y+18+1,R31
000335 9731      	SBIW R30,1
000336 91e4      	LPM  R30,Z
000337 2f2e      	MOV  R18,R30
000338 30e0      	CPI  R30,0
000339 f409      	BRNE PC+2
00033a c115      	RJMP _0x2000018
00033b 2fe1      	MOV  R30,R17
00033c 30e0      	CPI  R30,0
00033d f439      	BRNE _0x200001C
00033e 3225      	CPI  R18,37
00033f f411      	BRNE _0x200001D
000340 e011      	LDI  R17,LOW(1)
000341 c002      	RJMP _0x200001E
                 _0x200001D:
000342 940e 04c4 	CALL SUBOPT_0x6
                 _0x200001E:
000344 c10a      	RJMP _0x200001B
                 _0x200001C:
000345 30e1      	CPI  R30,LOW(0x1)
000346 f4a9      	BRNE _0x200001F
000347 3225      	CPI  R18,37
000348 f419      	BRNE _0x2000020
000349 940e 04c4 	CALL SUBOPT_0x6
00034b c102      	RJMP _0x20000CC
                 _0x2000020:
00034c e012      	LDI  R17,LOW(2)
00034d e040      	LDI  R20,LOW(0)
00034e e000      	LDI  R16,LOW(0)
00034f 322d      	CPI  R18,45
000350 f411      	BRNE _0x2000021
000351 e001      	LDI  R16,LOW(1)
000352 c0fc      	RJMP _0x200001B
                 _0x2000021:
000353 322b      	CPI  R18,43
000354 f411      	BRNE _0x2000022
000355 e24b      	LDI  R20,LOW(43)
000356 c0f8      	RJMP _0x200001B
                 _0x2000022:
000357 3220      	CPI  R18,32
000358 f411      	BRNE _0x2000023
000359 e240      	LDI  R20,LOW(32)
00035a c0f4      	RJMP _0x200001B
                 _0x2000023:
00035b c002      	RJMP _0x2000024
                 _0x200001F:
00035c 30e2      	CPI  R30,LOW(0x2)
00035d f439      	BRNE _0x2000025
                 _0x2000024:
00035e e050      	LDI  R21,LOW(0)
00035f e013      	LDI  R17,LOW(3)
000360 3320      	CPI  R18,48
000361 f411      	BRNE _0x2000026
000362 6800      	ORI  R16,LOW(128)
000363 c0eb      	RJMP _0x200001B
                 _0x2000026:
000364 c003      	RJMP _0x2000027
                 _0x2000025:
000365 30e3      	CPI  R30,LOW(0x3)
000366 f009      	BREQ PC+2
000367 c0e7      	RJMP _0x200001B
                 _0x2000027:
000368 3320      	CPI  R18,48
000369 f010      	BRLO _0x200002A
00036a 332a      	CPI  R18,58
00036b f008      	BRLO _0x200002B
                 _0x200002A:
00036c c007      	RJMP _0x2000029
                 _0x200002B:
00036d e0aa      	LDI  R26,LOW(10)
00036e 9f5a      	MUL  R21,R26
00036f 2d50      	MOV  R21,R0
000370 2fe2      	MOV  R30,R18
000371 53e0      	SUBI R30,LOW(48)
000372 0f5e      	ADD  R21,R30
000373 c0db      	RJMP _0x200001B
                 _0x2000029:
000374 2fe2      	MOV  R30,R18
000375 36e3      	CPI  R30,LOW(0x63)
000376 f449      	BRNE _0x200002F
000377 940e 04cb 	CALL SUBOPT_0x7
000379 89e8      	LDD  R30,Y+16
00037a 89f9      	LDD  R31,Y+16+1
00037b 81a4      	LDD  R26,Z+4
00037c 93aa      	ST   -Y,R26
00037d 940e 04d1 	CALL SUBOPT_0x8
00037f c0ce      	RJMP _0x2000030
                 _0x200002F:
000380 37e3      	CPI  R30,LOW(0x73)
000381 f441      	BRNE _0x2000032
000382 940e 04cb 	CALL SUBOPT_0x7
000384 940e 04d7 	CALL SUBOPT_0x9
000386 940e 047d 	CALL _strlen
000388 2f1e      	MOV  R17,R30
000389 c00a      	RJMP _0x2000033
                 _0x2000032:
00038a 37e0      	CPI  R30,LOW(0x70)
00038b f461      	BRNE _0x2000035
00038c 940e 04cb 	CALL SUBOPT_0x7
00038e 940e 04d7 	CALL SUBOPT_0x9
000390 940e 0489 	CALL _strlenf
000392 2f1e      	MOV  R17,R30
000393 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000394 6002      	ORI  R16,LOW(2)
000395 770f      	ANDI R16,LOW(127)
000396 e030      	LDI  R19,LOW(0)
000397 c034      	RJMP _0x2000036
                 _0x2000035:
000398 36e4      	CPI  R30,LOW(0x64)
000399 f011      	BREQ _0x2000039
00039a 36e9      	CPI  R30,LOW(0x69)
00039b f411      	BRNE _0x200003A
                 _0x2000039:
00039c 6004      	ORI  R16,LOW(4)
00039d c002      	RJMP _0x200003B
                 _0x200003A:
00039e 37e5      	CPI  R30,LOW(0x75)
00039f f431      	BRNE _0x200003C
                 _0x200003B:
0003a0 e7ec      	LDI  R30,LOW(_tbl10_G100*2)
0003a1 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0003a2 83ee      	STD  Y+6,R30
0003a3 83ff      	STD  Y+6+1,R31
0003a4 e015      	LDI  R17,LOW(5)
0003a5 c00c      	RJMP _0x200003D
                 _0x200003C:
0003a6 35e8      	CPI  R30,LOW(0x58)
0003a7 f411      	BRNE _0x200003F
0003a8 6008      	ORI  R16,LOW(8)
0003a9 c003      	RJMP _0x2000040
                 _0x200003F:
0003aa 37e8      	CPI  R30,LOW(0x78)
0003ab f009      	BREQ PC+2
0003ac c0a1      	RJMP _0x2000071
                 _0x2000040:
0003ad e8e6      	LDI  R30,LOW(_tbl16_G100*2)
0003ae e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0003af 83ee      	STD  Y+6,R30
0003b0 83ff      	STD  Y+6+1,R31
0003b1 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0003b2 ff02      	SBRS R16,2
0003b3 c014      	RJMP _0x2000042
0003b4 940e 04cb 	CALL SUBOPT_0x7
0003b6 940e 04e1 	CALL SUBOPT_0xA
0003b8 85ab      	LDD  R26,Y+11
0003b9 23aa      	TST  R26
0003ba f43a      	BRPL _0x2000043
0003bb 85ea      	LDD  R30,Y+10
0003bc 85fb      	LDD  R31,Y+10+1
0003bd 940e 04ed 	CALL __ANEGW1
0003bf 87ea      	STD  Y+10,R30
0003c0 87fb      	STD  Y+10+1,R31
0003c1 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0003c2 3040      	CPI  R20,0
0003c3 f011      	BREQ _0x2000044
0003c4 5f1f      	SUBI R17,-LOW(1)
0003c5 c001      	RJMP _0x2000045
                 _0x2000044:
0003c6 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0003c7 c004      	RJMP _0x2000046
                 _0x2000042:
0003c8 940e 04cb 	CALL SUBOPT_0x7
0003ca 940e 04e1 	CALL SUBOPT_0xA
                 _0x2000046:
                 _0x2000036:
0003cc fd00      	SBRC R16,0
0003cd c011      	RJMP _0x2000047
                 _0x2000048:
0003ce 1715      	CP   R17,R21
0003cf f478      	BRSH _0x200004A
0003d0 ff07      	SBRS R16,7
0003d1 c008      	RJMP _0x200004B
0003d2 ff02      	SBRS R16,2
0003d3 c004      	RJMP _0x200004C
0003d4 7f0b      	ANDI R16,LOW(251)
0003d5 2f24      	MOV  R18,R20
0003d6 5011      	SUBI R17,LOW(1)
0003d7 c001      	RJMP _0x200004D
                 _0x200004C:
0003d8 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0003d9 c001      	RJMP _0x200004E
                 _0x200004B:
0003da e220      	LDI  R18,LOW(32)
                 _0x200004E:
0003db 940e 04c4 	CALL SUBOPT_0x6
0003dd 5051      	SUBI R21,LOW(1)
0003de cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0003df 2f31      	MOV  R19,R17
0003e0 ff01      	SBRS R16,1
0003e1 c017      	RJMP _0x200004F
                 _0x2000050:
0003e2 3030      	CPI  R19,0
0003e3 f0a1      	BREQ _0x2000052
0003e4 ff03      	SBRS R16,3
0003e5 c006      	RJMP _0x2000053
0003e6 81ee      	LDD  R30,Y+6
0003e7 81ff      	LDD  R31,Y+6+1
0003e8 9125      	LPM  R18,Z+
0003e9 83ee      	STD  Y+6,R30
0003ea 83ff      	STD  Y+6+1,R31
0003eb c005      	RJMP _0x2000054
                 _0x2000053:
0003ec 81ae      	LDD  R26,Y+6
0003ed 81bf      	LDD  R27,Y+6+1
0003ee 912d      	LD   R18,X+
0003ef 83ae      	STD  Y+6,R26
0003f0 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0003f1 940e 04c4 	CALL SUBOPT_0x6
0003f3 3050      	CPI  R21,0
0003f4 f009      	BREQ _0x2000055
0003f5 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0003f6 5031      	SUBI R19,LOW(1)
0003f7 cfea      	RJMP _0x2000050
                 _0x2000052:
0003f8 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0003f9 e320      	LDI  R18,LOW(48)
0003fa 81ee      	LDD  R30,Y+6
0003fb 81ff      	LDD  R31,Y+6+1
0003fc 940e 0507 	CALL __GETW1PF
0003fe 87e8      	STD  Y+8,R30
0003ff 87f9      	STD  Y+8+1,R31
000400 81ee      	LDD  R30,Y+6
000401 81ff      	LDD  R31,Y+6+1
000402 9632      	ADIW R30,2
000403 83ee      	STD  Y+6,R30
000404 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000405 85e8      	LDD  R30,Y+8
000406 85f9      	LDD  R31,Y+8+1
000407 85aa      	LDD  R26,Y+10
000408 85bb      	LDD  R27,Y+10+1
000409 17ae      	CP   R26,R30
00040a 07bf      	CPC  R27,R31
00040b f050      	BRLO _0x200005C
00040c 5f2f      	SUBI R18,-LOW(1)
00040d 85a8      	LDD  R26,Y+8
00040e 85b9      	LDD  R27,Y+8+1
00040f 85ea      	LDD  R30,Y+10
000410 85fb      	LDD  R31,Y+10+1
000411 1bea      	SUB  R30,R26
000412 0bfb      	SBC  R31,R27
000413 87ea      	STD  Y+10,R30
000414 87fb      	STD  Y+10+1,R31
000415 cfef      	RJMP _0x200005A
                 _0x200005C:
000416 332a      	CPI  R18,58
000417 f028      	BRLO _0x200005D
000418 ff03      	SBRS R16,3
000419 c002      	RJMP _0x200005E
00041a 5f29      	SUBI R18,-LOW(7)
00041b c001      	RJMP _0x200005F
                 _0x200005E:
00041c 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00041d fd04      	SBRC R16,4
00041e c01a      	RJMP _0x2000061
00041f 3321      	CPI  R18,49
000420 f420      	BRSH _0x2000063
000421 85a8      	LDD  R26,Y+8
000422 85b9      	LDD  R27,Y+8+1
000423 9711      	SBIW R26,1
000424 f409      	BRNE _0x2000062
                 _0x2000063:
000425 c009      	RJMP _0x20000CD
                 _0x2000062:
000426 1753      	CP   R21,R19
000427 f010      	BRLO _0x2000067
000428 ff00      	SBRS R16,0
000429 c001      	RJMP _0x2000068
                 _0x2000067:
00042a c013      	RJMP _0x2000066
                 _0x2000068:
00042b e220      	LDI  R18,LOW(32)
00042c ff07      	SBRS R16,7
00042d c00b      	RJMP _0x2000069
00042e e320      	LDI  R18,LOW(48)
                 _0x20000CD:
00042f 6100      	ORI  R16,LOW(16)
000430 ff02      	SBRS R16,2
000431 c007      	RJMP _0x200006A
000432 7f0b      	ANDI R16,LOW(251)
000433 934a      	ST   -Y,R20
000434 940e 04d1 	CALL SUBOPT_0x8
000436 3050      	CPI  R21,0
000437 f009      	BREQ _0x200006B
000438 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000439 940e 04c4 	CALL SUBOPT_0x6
00043b 3050      	CPI  R21,0
00043c f009      	BREQ _0x200006C
00043d 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00043e 5031      	SUBI R19,LOW(1)
00043f 85a8      	LDD  R26,Y+8
000440 85b9      	LDD  R27,Y+8+1
000441 9712      	SBIW R26,2
000442 f008      	BRLO _0x2000059
000443 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000444 ff00      	SBRS R16,0
000445 c008      	RJMP _0x200006D
                 _0x200006E:
000446 3050      	CPI  R21,0
000447 f031      	BREQ _0x2000070
000448 5051      	SUBI R21,LOW(1)
000449 e2e0      	LDI  R30,LOW(32)
00044a 93ea      	ST   -Y,R30
00044b 940e 04d1 	CALL SUBOPT_0x8
00044d cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
00044e e010      	LDI  R17,LOW(0)
                 _0x200001B:
00044f cee0      	RJMP _0x2000016
                 _0x2000018:
000450 85ac      	LDD  R26,Y+12
000451 85bd      	LDD  R27,Y+12+1
000452 940e 0503 	CALL __GETW1P
000454 940e 051e 	CALL __LOADLOCR6
000456 9664      	ADIW R28,20
000457 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
000458 92ff      	PUSH R15
000459 2ef8      	MOV  R15,R24
00045a 9726      	SBIW R28,6
00045b 931a      	ST   -Y,R17
00045c 930a      	ST   -Y,R16
00045d 01de      	MOVW R26,R28
00045e 9614      	ADIW R26,4
00045f 940e 04e9 	CALL __ADDW2R15
000461 018d      	MOVW R16,R26
000462 e0e0      	LDI  R30,LOW(0)
000463 83ec      	STD  Y+4,R30
000464 83ed      	STD  Y+4+1,R30
000465 83ee      	STD  Y+6,R30
000466 83ef      	STD  Y+6+1,R30
000467 01de      	MOVW R26,R28
000468 9618      	ADIW R26,8
000469 940e 04e9 	CALL __ADDW2R15
00046b 940e 0503 	CALL __GETW1P
00046d 93fa      	ST   -Y,R31
00046e 93ea      	ST   -Y,R30
00046f 931a      	ST   -Y,R17
000470 930a      	ST   -Y,R16
000471 e1e6      	LDI  R30,LOW(_put_usart_G100)
000472 e0f3      	LDI  R31,HIGH(_put_usart_G100)
000473 93fa      	ST   -Y,R31
000474 93ea      	ST   -Y,R30
000475 01de      	MOVW R26,R28
000476 9618      	ADIW R26,8
000477 deac      	RCALL __print_G100
000478 8119      	LDD  R17,Y+1
000479 8108      	LDD  R16,Y+0
00047a 9628      	ADIW R28,8
00047b 90ff      	POP  R15
00047c 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00047d 93ba      	ST   -Y,R27
00047e 93aa      	ST   -Y,R26
00047f 91a9          ld   r26,y+
000480 91b9          ld   r27,y+
000481 27ee          clr  r30
000482 27ff          clr  r31
                 strlen0:
000483 916d          ld   r22,x+
000484 2366          tst  r22
000485 f011          breq strlen1
000486 9631          adiw r30,1
000487 cffb          rjmp strlen0
                 strlen1:
000488 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000489 93ba      	ST   -Y,R27
00048a 93aa      	ST   -Y,R26
00048b 27aa          clr  r26
00048c 27bb          clr  r27
00048d 91e9          ld   r30,y+
00048e 91f9          ld   r31,y+
                 strlenf0:
00048f 9005      	lpm  r0,z+
000490 2000          tst  r0
000491 f011          breq strlenf1
000492 9611          adiw r26,1
000493 cffb          rjmp strlenf0
                 strlenf1:
000494 01fd          movw r30,r26
000495 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer0:
000200           	.BYTE 0x8
                 _tx_buffer0:
000208           	.BYTE 0x8
                 _displayJoc:
000210           	.BYTE 0x9
                 _StareButoaneInainte_S0020000000:
000219           	.BYTE 0x2
                 __displaymode:
00021b           	.BYTE 0x1
                 __numlines:
00021c           	.BYTE 0x1
                 __cols:
00021d           	.BYTE 0x1
                 __rows:
00021e           	.BYTE 0x1
                 __backlightval:
00021f           	.BYTE 0x1
                 __seed_G102:
000220           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000496 e0a1      	LDI  R26,LOW(1)
000497 e0b0      	LDI  R27,HIGH(1)
000498 940e 04f1 	CALL __LSLW12
00049a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
00049b e0e3      	LDI  R30,LOW(3)
00049c 9fe0      	MUL  R30,R16
00049d 01b0      	MOVW R22,R0
00049e 2fe1      	MOV  R30,R17
00049f e0f0      	LDI  R31,0
0004a0 e0a2      	LDI  R26,LOW(2)
0004a1 e0b0      	LDI  R27,HIGH(2)
0004a2 940e 0510 	CALL __SWAPW12
0004a4 1bea      	SUB  R30,R26
0004a5 0bfb      	SBC  R31,R27
0004a6 0fe6      	ADD  R30,R22
0004a7 1ff7      	ADC  R31,R23
0004a8 5fe0      	SUBI R30,LOW(-_displayJoc)
0004a9 4ffd      	SBCI R31,HIGH(-_displayJoc)
0004aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
0004ab b9e2      	OUT  0x2,R30
0004ac efef      	LDI  R30,LOW(255)
0004ad b9e1      	OUT  0x1,R30
                +
0004ae e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
0004af 958a     +DEC R24
0004b0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
0004b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
0004b2 b9e1      	OUT  0x1,R30
0004b3 e0e0      	LDI  R30,LOW(0)
0004b4 83e9      	STD  Y+1,R30
0004b5 83ea      	STD  Y+1+1,R30
0004b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
0004b7 81e9      	LDD  R30,Y+1
0004b8 81fa      	LDD  R31,Y+1+1
0004b9 9631      	ADIW R30,1
0004ba 83e9      	STD  Y+1,R30
0004bb 83fa      	STD  Y+1+1,R31
0004bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
0004bd 81ad      	LDD  R26,Y+5
0004be 81be      	LDD  R27,Y+5+1
0004bf 2bea      	OR   R30,R26
0004c0 2bfb      	OR   R31,R27
0004c1 83ed      	STD  Y+5,R30
0004c2 83fe      	STD  Y+5+1,R31
0004c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
0004c4 932a      	ST   -Y,R18
0004c5 85ad      	LDD  R26,Y+13
0004c6 85be      	LDD  R27,Y+13+1
0004c7 85ef      	LDD  R30,Y+15
0004c8 89f8      	LDD  R31,Y+15+1
0004c9 9509      	ICALL
0004ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
0004cb 89e8      	LDD  R30,Y+16
0004cc 89f9      	LDD  R31,Y+16+1
0004cd 9734      	SBIW R30,4
0004ce 8be8      	STD  Y+16,R30
0004cf 8bf9      	STD  Y+16+1,R31
0004d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
0004d1 85ad      	LDD  R26,Y+13
0004d2 85be      	LDD  R27,Y+13+1
0004d3 85ef      	LDD  R30,Y+15
0004d4 89f8      	LDD  R31,Y+15+1
0004d5 9509      	ICALL
0004d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
0004d7 89a8      	LDD  R26,Y+16
0004d8 89b9      	LDD  R27,Y+16+1
0004d9 9614      	ADIW R26,4
0004da 940e 0503 	CALL __GETW1P
0004dc 83ee      	STD  Y+6,R30
0004dd 83ff      	STD  Y+6+1,R31
0004de 81ae      	LDD  R26,Y+6
0004df 81bf      	LDD  R27,Y+6+1
0004e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
0004e1 89a8      	LDD  R26,Y+16
0004e2 89b9      	LDD  R27,Y+16+1
0004e3 9614      	ADIW R26,4
0004e4 940e 0503 	CALL __GETW1P
0004e6 87ea      	STD  Y+10,R30
0004e7 87fb      	STD  Y+10+1,R31
0004e8 9508      	RET
                 
                 
                 	.CSEG
                 __ADDW2R15:
0004e9 2400      	CLR  R0
0004ea 0daf      	ADD  R26,R15
0004eb 1db0      	ADC  R27,R0
0004ec 9508      	RET
                 
                 __ANEGW1:
0004ed 95f1      	NEG  R31
0004ee 95e1      	NEG  R30
0004ef 40f0      	SBCI R31,0
0004f0 9508      	RET
                 
                 __LSLW12:
0004f1 23ee      	TST  R30
0004f2 2e0e      	MOV  R0,R30
0004f3 01fd      	MOVW R30,R26
0004f4 f021      	BREQ __LSLW12R
                 __LSLW12L:
0004f5 0fee      	LSL  R30
0004f6 1fff      	ROL  R31
0004f7 940a      	DEC  R0
0004f8 f7e1      	BRNE __LSLW12L
                 __LSLW12R:
0004f9 9508      	RET
                 
                 __LSLW4:
0004fa 0fee      	LSL  R30
0004fb 1fff      	ROL  R31
                 __LSLW3:
0004fc 0fee      	LSL  R30
0004fd 1fff      	ROL  R31
                 __LSLW2:
0004fe 0fee      	LSL  R30
0004ff 1fff      	ROL  R31
000500 0fee      	LSL  R30
000501 1fff      	ROL  R31
000502 9508      	RET
                 
                 __GETW1P:
000503 91ed      	LD   R30,X+
000504 91fc      	LD   R31,X
000505 9711      	SBIW R26,1
000506 9508      	RET
                 
                 __GETW1PF:
000507 9005      	LPM  R0,Z+
000508 91f4      	LPM  R31,Z
000509 2de0      	MOV  R30,R0
00050a 9508      	RET
                 
                 __PUTPARD1:
00050b 937a      	ST   -Y,R23
00050c 936a      	ST   -Y,R22
00050d 93fa      	ST   -Y,R31
00050e 93ea      	ST   -Y,R30
00050f 9508      	RET
                 
                 __SWAPW12:
000510 2e1b      	MOV  R1,R27
000511 2fbf      	MOV  R27,R31
000512 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000513 2e1a      	MOV  R1,R26
000514 2fae      	MOV  R26,R30
000515 2de1      	MOV  R30,R1
000516 9508      	RET
                 
                 __SAVELOCR6:
000517 935a      	ST   -Y,R21
                 __SAVELOCR5:
000518 934a      	ST   -Y,R20
                 __SAVELOCR4:
000519 933a      	ST   -Y,R19
                 __SAVELOCR3:
00051a 932a      	ST   -Y,R18
                 __SAVELOCR2:
00051b 931a      	ST   -Y,R17
00051c 930a      	ST   -Y,R16
00051d 9508      	RET
                 
                 __LOADLOCR6:
00051e 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00051f 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000520 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000521 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000522 8119      	LDD  R17,Y+1
000523 8108      	LD   R16,Y
000524 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :  20 r1 :   5 r2 :   4 r3 :   4 r4 :   4 r5 :   6 r6 :   5 r7 :   4 
r8 :   2 r9 :   3 r10:   0 r11:   8 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  51 r17:  54 r18:  27 r19:   8 r20:   9 r21:  17 r22:  12 r23:   3 
r24:  12 r25:   2 r26: 112 r27:  48 r28:  17 r29:   1 r30: 355 r31: 110 
x  :  13 y  : 203 z  :  32 
Registers used: 31 out of 35 (88.6%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   5 
adiw  :  20 and   :   6 andi  :  11 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  25 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   0 brmi  :   0 brne  :  43 brpl  :   1 brsh  :  11 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  61 
cbi   :   0 cbr   :   1 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  15 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  18 cpc   :   1 cpi   :  39 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   8 inc   :   6 jmp   :  32 ld    :  42 ldd   :  86 ldi   : 132 
lds   :  17 lpm   :  14 lsl   :   7 lsr   :   0 mov   :  39 movw  :  21 
mul   :   5 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   5 
ori   :   6 out   :  31 pop   :   1 push  :   1 rcall :  10 ret   :  32 
reti  :   2 rjmp  :  79 rol   :   5 ror   :   0 sbc   :   2 sbci  :  19 
sbi   :   2 sbic  :   0 sbis  :   0 sbiw  :  20 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   3 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  65 std   :  43 sts   :  39 sub   :   2 subi  :  36 swap  :   0 
tst   :  11 wdr   :   2 
Instructions used: 56 out of 116 (48.3%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a4a   2528    106   2634   16384  16.1%
[.dseg] 0x000100 0x000224      0     36     36    1024   3.5%
[.eseg] 0x000000 0x000001      0      0      0     512   0.0%

Assembly complete, 0 errors, 15 warnings
