
AVRASM ver. 2.1.30  C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm Wed May 29 14:10:09 2024

C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1092): warning: Register r3 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1093): warning: Register r2 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1094): warning: Register r5 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1095): warning: Register r4 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1096): warning: Register r7 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1097): warning: Register r6 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1098): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 20,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': No
                 ;'char' is unsigned     : No
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 	.EQU GPIOR1=0x2A
                 	.EQU GPIOR2=0x2B
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index0=R3
                 	.DEF _rx_rd_index0=R2
                 	.DEF _rx_counter0=R5
                 	.DEF _tx_wr_index0=R4
                 	.DEF _tx_rd_index0=R7
                 	.DEF _tx_counter0=R6
                 	.DEF _caracterUrmator=R9
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0166 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 01a0 	JMP  _usart0_rx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 01c0 	JMP  _usart0_tx_isr
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00003e 2710
00003f 03e8
000040 0064
000041 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000042 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000043 1000
000044 0100
000045 0010
000046 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1152): warning: .cseg .db misalignment - padding zero byte
000047 0058      	.DB  0x58
                 
                 _0x40003:
000048 2e2e
000049 2e2e
00004a 2e2e
00004b 2e2e      	.DB  0x2E,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E,0x2E
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1156): warning: .cseg .db misalignment - padding zero byte
00004c 002e      	.DB  0x2E
                 _0x40004:
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1158): warning: .cseg .db misalignment - padding zero byte
00004d 0009      	.DB  0x9
                 _0x40005:
00004e 0000
00004f 0000
000050 0000
000051 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000052 3c18
000053 183c
000054 0018
000055 0018      	.DB  0x18,0x3C,0x3C,0x18,0x18,0x0,0x18,0x0
000056 3636
000057 0000
000058 0000
000059 0000      	.DB  0x36,0x36,0x0,0x0,0x0,0x0,0x0,0x0
00005a 3636
00005b 367f
00005c 367f
00005d 0036      	.DB  0x36,0x36,0x7F,0x36,0x7F,0x36,0x36,0x0
00005e 3e0c
00005f 1e03
000060 1f30
000061 000c      	.DB  0xC,0x3E,0x3,0x1E,0x30,0x1F,0xC,0x0
000062 6300
000063 1833
000064 660c
000065 0063      	.DB  0x0,0x63,0x33,0x18,0xC,0x66,0x63,0x0
000066 361c
000067 6e1c
000068 333b
000069 006e      	.DB  0x1C,0x36,0x1C,0x6E,0x3B,0x33,0x6E,0x0
00006a 0606
00006b 0003
00006c 0000
00006d 0000      	.DB  0x6,0x6,0x3,0x0,0x0,0x0,0x0,0x0
00006e 0c18
00006f 0606
000070 0c06
000071 0018      	.DB  0x18,0xC,0x6,0x6,0x6,0xC,0x18,0x0
000072 0c06
000073 1818
000074 0c18
000075 0006      	.DB  0x6,0xC,0x18,0x18,0x18,0xC,0x6,0x0
000076 6600
000077 ff3c
000078 663c
000079 0000      	.DB  0x0,0x66,0x3C,0xFF,0x3C,0x66,0x0,0x0
00007a 0c00
00007b 3f0c
00007c 0c0c
00007d 0000      	.DB  0x0,0xC,0xC,0x3F,0xC,0xC,0x0,0x0
00007e 0000
00007f 0000
000080 0c00
000081 060c      	.DB  0x0,0x0,0x0,0x0,0x0,0xC,0xC,0x6
000082 0000
000083 3f00
000084 0000
000085 0000      	.DB  0x0,0x0,0x0,0x3F,0x0,0x0,0x0,0x0
000086 0000
000087 0000
000088 0c00
000089 000c      	.DB  0x0,0x0,0x0,0x0,0x0,0xC,0xC,0x0
00008a 3060
00008b 0c18
00008c 0306
00008d 0001      	.DB  0x60,0x30,0x18,0xC,0x6,0x3,0x1,0x0
00008e 633e
00008f 7b73
000090 676f
000091 003e      	.DB  0x3E,0x63,0x73,0x7B,0x6F,0x67,0x3E,0x0
000092 0e0c
000093 0c0c
000094 0c0c
000095 003f      	.DB  0xC,0xE,0xC,0xC,0xC,0xC,0x3F,0x0
000096 331e
000097 1c30
000098 3306
000099 003f      	.DB  0x1E,0x33,0x30,0x1C,0x6,0x33,0x3F,0x0
00009a 331e
00009b 1c30
00009c 3330
00009d 001e      	.DB  0x1E,0x33,0x30,0x1C,0x30,0x33,0x1E,0x0
00009e 3c38
00009f 3336
0000a0 307f
0000a1 0078      	.DB  0x38,0x3C,0x36,0x33,0x7F,0x30,0x78,0x0
0000a2 033f
0000a3 301f
0000a4 3330
0000a5 001e      	.DB  0x3F,0x3,0x1F,0x30,0x30,0x33,0x1E,0x0
0000a6 061c
0000a7 1f03
0000a8 3333
0000a9 001e      	.DB  0x1C,0x6,0x3,0x1F,0x33,0x33,0x1E,0x0
0000aa 333f
0000ab 1830
0000ac 0c0c
0000ad 000c      	.DB  0x3F,0x33,0x30,0x18,0xC,0xC,0xC,0x0
0000ae 331e
0000af 1e33
0000b0 3333
0000b1 001e      	.DB  0x1E,0x33,0x33,0x1E,0x33,0x33,0x1E,0x0
0000b2 331e
0000b3 3e33
0000b4 1830
0000b5 000e      	.DB  0x1E,0x33,0x33,0x3E,0x30,0x18,0xE,0x0
0000b6 0c00
0000b7 000c
0000b8 0c00
0000b9 000c      	.DB  0x0,0xC,0xC,0x0,0x0,0xC,0xC,0x0
0000ba 0c00
0000bb 000c
0000bc 0c00
0000bd 060c      	.DB  0x0,0xC,0xC,0x0,0x0,0xC,0xC,0x6
0000be 0c18
0000bf 0306
0000c0 0c06
0000c1 0018      	.DB  0x18,0xC,0x6,0x3,0x6,0xC,0x18,0x0
0000c2 0000
0000c3 003f
0000c4 3f00
0000c5 0000      	.DB  0x0,0x0,0x3F,0x0,0x0,0x3F,0x0,0x0
0000c6 0c06
0000c7 3018
0000c8 0c18
0000c9 0006      	.DB  0x6,0xC,0x18,0x30,0x18,0xC,0x6,0x0
0000ca 331e
0000cb 1830
0000cc 000c
0000cd 000c      	.DB  0x1E,0x33,0x30,0x18,0xC,0x0,0xC,0x0
0000ce 633e
0000cf 7b7b
0000d0 037b
0000d1 001e      	.DB  0x3E,0x63,0x7B,0x7B,0x7B,0x3,0x1E,0x0
0000d2 1e0c
0000d3 3333
0000d4 333f
0000d5 0033      	.DB  0xC,0x1E,0x33,0x33,0x3F,0x33,0x33,0x0
0000d6 663f
0000d7 3e66
0000d8 6666
0000d9 003f      	.DB  0x3F,0x66,0x66,0x3E,0x66,0x66,0x3F,0x0
0000da 663c
0000db 0303
0000dc 6603
0000dd 003c      	.DB  0x3C,0x66,0x3,0x3,0x3,0x66,0x3C,0x0
0000de 361f
0000df 6666
0000e0 3666
0000e1 001f      	.DB  0x1F,0x36,0x66,0x66,0x66,0x36,0x1F,0x0
0000e2 467f
0000e3 1e16
0000e4 4616
0000e5 007f      	.DB  0x7F,0x46,0x16,0x1E,0x16,0x46,0x7F,0x0
0000e6 467f
0000e7 1e16
0000e8 0616
0000e9 000f      	.DB  0x7F,0x46,0x16,0x1E,0x16,0x6,0xF,0x0
0000ea 663c
0000eb 0303
0000ec 6673
0000ed 007c      	.DB  0x3C,0x66,0x3,0x3,0x73,0x66,0x7C,0x0
0000ee 3333
0000ef 3f33
0000f0 3333
0000f1 0033      	.DB  0x33,0x33,0x33,0x3F,0x33,0x33,0x33,0x0
0000f2 0c1e
0000f3 0c0c
0000f4 0c0c
0000f5 001e      	.DB  0x1E,0xC,0xC,0xC,0xC,0xC,0x1E,0x0
0000f6 3078
0000f7 3030
0000f8 3333
0000f9 001e      	.DB  0x78,0x30,0x30,0x30,0x33,0x33,0x1E,0x0
0000fa 6667
0000fb 1e36
0000fc 6636
0000fd 0067      	.DB  0x67,0x66,0x36,0x1E,0x36,0x66,0x67,0x0
0000fe 060f
0000ff 0606
000100 6646
000101 007f      	.DB  0xF,0x6,0x6,0x6,0x46,0x66,0x7F,0x0
000102 7763
000103 7f7f
000104 636b
000105 0063      	.DB  0x63,0x77,0x7F,0x7F,0x6B,0x63,0x63,0x0
000106 6763
000107 7b6f
000108 6373
000109 0063      	.DB  0x63,0x67,0x6F,0x7B,0x73,0x63,0x63,0x0
00010a 361c
00010b 6363
00010c 3663
00010d 001c      	.DB  0x1C,0x36,0x63,0x63,0x63,0x36,0x1C,0x0
00010e 663f
00010f 3e66
000110 0606
000111 000f      	.DB  0x3F,0x66,0x66,0x3E,0x6,0x6,0xF,0x0
000112 331e
000113 3333
000114 1e3b
000115 0038      	.DB  0x1E,0x33,0x33,0x33,0x3B,0x1E,0x38,0x0
000116 663f
000117 3e66
000118 6636
000119 0067      	.DB  0x3F,0x66,0x66,0x3E,0x36,0x66,0x67,0x0
00011a 331e
00011b 0e07
00011c 3338
00011d 001e      	.DB  0x1E,0x33,0x7,0xE,0x38,0x33,0x1E,0x0
00011e 2d3f
00011f 0c0c
000120 0c0c
000121 001e      	.DB  0x3F,0x2D,0xC,0xC,0xC,0xC,0x1E,0x0
000122 3333
000123 3333
000124 3333
000125 003f      	.DB  0x33,0x33,0x33,0x33,0x33,0x33,0x3F,0x0
000126 3333
000127 3333
000128 1e33
000129 000c      	.DB  0x33,0x33,0x33,0x33,0x33,0x1E,0xC,0x0
00012a 6363
00012b 6b63
00012c 777f
00012d 0063      	.DB  0x63,0x63,0x63,0x6B,0x7F,0x77,0x63,0x0
00012e 6363
00012f 1c36
000130 361c
000131 0063      	.DB  0x63,0x63,0x36,0x1C,0x1C,0x36,0x63,0x0
000132 3333
000133 1e33
000134 0c0c
000135 001e      	.DB  0x33,0x33,0x33,0x1E,0xC,0xC,0x1E,0x0
000136 637f
000137 1831
000138 664c
000139 007f      	.DB  0x7F,0x63,0x31,0x18,0x4C,0x66,0x7F,0x0
00013a 061e
00013b 0606
00013c 0606
00013d 001e      	.DB  0x1E,0x6,0x6,0x6,0x6,0x6,0x1E,0x0
00013e 0603
00013f 180c
000140 6030
000141 0040      	.DB  0x3,0x6,0xC,0x18,0x30,0x60,0x40,0x0
000142 181e
000143 1818
000144 1818
000145 001e      	.DB  0x1E,0x18,0x18,0x18,0x18,0x18,0x1E,0x0
000146 1c08
000147 6336
000148 0000
000149 0000      	.DB  0x8,0x1C,0x36,0x63,0x0,0x0,0x0,0x0
00014a 0000
00014b 0000
00014c 0000
00014d ff00      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xFF
00014e 0c0c
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1224): warning: .cseg .db misalignment - padding zero byte
00014f 0018      	.DB  0xC,0xC,0x18
                 _0x2040060:
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1226): warning: .cseg .db misalignment - padding zero byte
000150 0001      	.DB  0x1
                 _0x2040000:
000151 4e2d
000152 4e41
000153 4900
000154 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1229): warning: .cseg .db misalignment - padding zero byte
000155 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000156 0001      	.DW  0x01
000157 0009      	.DW  0x09
000158 008e      	.DW  __REG_VARS*2
                 
000159 0009      	.DW  0x09
00015a 0212      	.DW  _displayJoc
00015b 0090      	.DW  _0x40003*2
                 
00015c 0001      	.DW  0x01
00015d 0211      	.DW  _remiza
00015e 009a      	.DW  _0x40004*2
                 
00015f 0203      	.DW  0x203
000160 021b      	.DW  _font8x8_basic
000161 009c      	.DW  _0x40005*2
                 
000162 0001      	.DW  0x01
000163 0425      	.DW  __seed_G102
000164 02a0      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000165 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000166 94f8      	CLI
000167 27ee      	CLR  R30
000168 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000169 e0f1      	LDI  R31,1
00016a bff5      	OUT  MCUCR,R31
00016b bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00016c e1f8      	LDI  R31,0x18
00016d 95a8      	WDR
00016e b7a4      	IN   R26,MCUSR
00016f 7fa7      	CBR  R26,8
000170 bfa4      	OUT  MCUSR,R26
000171 93f0 0060 	STS  WDTCSR,R31
000173 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
000175 e08d      	LDI  R24,(14-2)+1
000176 e0a2      	LDI  R26,2
000177 27bb      	CLR  R27
                 __CLEAR_REG:
000178 93ed      	ST   X+,R30
000179 958a      	DEC  R24
00017a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00017b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00017c e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00017d e0a0      	LDI  R26,LOW(__SRAM_START)
00017e e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00017f 93ed      	ST   X+,R30
000180 9701      	SBIW R24,1
000181 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000182 eaec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000183 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000184 9185      	LPM  R24,Z+
000185 9195      	LPM  R25,Z+
000186 9700      	SBIW R24,0
000187 f061      	BREQ __GLOBAL_INI_END
000188 91a5      	LPM  R26,Z+
000189 91b5      	LPM  R27,Z+
00018a 9005      	LPM  R0,Z+
00018b 9015      	LPM  R1,Z+
00018c 01bf      	MOVW R22,R30
00018d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00018e 9005      	LPM  R0,Z+
00018f 920d      	ST   X+,R0
000190 9701      	SBIW R24,1
000191 f7e1      	BRNE __GLOBAL_INI_LOOP
000192 01fb      	MOVW R30,R22
000193 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
000194 e0e0      	LDI  R30,__GPIOR0_INIT
000195 bbee      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
000196 bdea      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
000197 bdeb      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000198 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000199 bfed      	OUT  SPL,R30
00019a e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00019b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00019c e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00019d e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00019e 940c 01d8 	JMP  _main
                 
                 	.ESEG
                 	.ORG 1
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 ;/*********************************************
                 ;Project : Test software
                 ;**********************************************
                 ;Chip type: ATmega164A
                 ;Clock frequency: 20 MHz
                 ;Compilers:  CVAVR 2.x
                 ;*********************************************/
                 ;
                 ;#include <mega164a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <stdlib.h>
                 ;#include <stdint.h>
                 ;#include <i2c.h>
                 ;#include "defs.h"
                 ;#include "functii.h"
                 ;//#include "ecran.h"
                 ;//*************************************************************************************************
                 ;//*********** BEGIN SERIAL STUFF (interrupt-driven, generated by Code Wizard) *********************
                 ;//*************************************************************************************************
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 8
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#else
                 ;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#endif
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 0049 {
                 
                 	.CSEG
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
0001a0 93ea      	ST   -Y,R30
0001a1 93fa      	ST   -Y,R31
0001a2 b7ef      	IN   R30,SREG
0001a3 93ea      	ST   -Y,R30
                 ; 0000 004A char status,data;
                 ; 0000 004B status=UCSR0A;
0001a4 931a      	ST   -Y,R17
0001a5 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0001a6 9110 00c0 	LDS  R17,192
                 ; 0000 004C data=UDR0;
0001a8 9100 00c6 	LDS  R16,198
                 ; 0000 004D if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0001aa 2fe1      	MOV  R30,R17
0001ab 71ec      	ANDI R30,LOW(0x1C)
0001ac f481      	BRNE _0x3
                 ; 0000 004E    {
                 ; 0000 004F    rx_buffer0[rx_wr_index0++]=data;
0001ad 2de3      	MOV  R30,R3
0001ae 9433      	INC  R3
0001af e0f0      	LDI  R31,0
0001b0 50e0      	SUBI R30,LOW(-_rx_buffer0)
0001b1 4ffe      	SBCI R31,HIGH(-_rx_buffer0)
0001b2 8300      	ST   Z,R16
                 ; 0000 0050 #if RX_BUFFER_SIZE0 == 256
                 ; 0000 0051    // special case for receiver buffer size=256
                 ; 0000 0052    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0000 0053 #else
                 ; 0000 0054    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0001b3 e0e8      	LDI  R30,LOW(8)
0001b4 15e3      	CP   R30,R3
0001b5 f409      	BRNE _0x4
0001b6 2433      	CLR  R3
                 ; 0000 0055    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x4:
0001b7 9453      	INC  R5
0001b8 e0e8      	LDI  R30,LOW(8)
0001b9 15e5      	CP   R30,R5
0001ba f411      	BRNE _0x5
                 ; 0000 0056       {
                 ; 0000 0057       rx_counter0=0;
0001bb 2455      	CLR  R5
                 ; 0000 0058       rx_buffer_overflow0=1;
0001bc 9af0      	SBI  0x1E,0
                 ; 0000 0059       }
                 ; 0000 005A #endif
                 ; 0000 005B    }
                 _0x5:
                 ; 0000 005C }
                 _0x3:
0001bd 9109      	LD   R16,Y+
0001be 9119      	LD   R17,Y+
0001bf c013      	RJMP _0x2B
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0063 {
                 ; 0000 0064 char data;
                 ; 0000 0065 while (rx_counter0==0);
                 ;	data -> R17
                 ; 0000 0066 data=rx_buffer0[rx_rd_index0++];
                 ; 0000 0067 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0068 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                 ; 0000 0069 #endif
                 ; 0000 006A #asm("cli")
                 ; 0000 006B --rx_counter0;
                 ; 0000 006C #asm("sei")
                 ; 0000 006D return data;
                 ; 0000 006E }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 8
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#else
                 ;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 007E {
                 _usart0_tx_isr:
                 ; .FSTART _usart0_tx_isr
0001c0 93ea      	ST   -Y,R30
0001c1 93fa      	ST   -Y,R31
0001c2 b7ef      	IN   R30,SREG
0001c3 93ea      	ST   -Y,R30
                 ; 0000 007F if (tx_counter0)
0001c4 2066      	TST  R6
0001c5 f069      	BREQ _0xC
                 ; 0000 0080    {
                 ; 0000 0081    --tx_counter0;
0001c6 946a      	DEC  R6
                 ; 0000 0082    UDR0=tx_buffer0[tx_rd_index0++];
0001c7 2de7      	MOV  R30,R7
0001c8 9473      	INC  R7
0001c9 e0f0      	LDI  R31,0
0001ca 5fe8      	SUBI R30,LOW(-_tx_buffer0)
0001cb 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0001cc 81e0      	LD   R30,Z
0001cd 93e0 00c6 	STS  198,R30
                 ; 0000 0083 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0084    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
0001cf e0e8      	LDI  R30,LOW(8)
0001d0 15e7      	CP   R30,R7
0001d1 f409      	BRNE _0xD
0001d2 2477      	CLR  R7
                 ; 0000 0085 #endif
                 ; 0000 0086    }
                 _0xD:
                 ; 0000 0087 }
                 _0xC:
                 _0x2B:
0001d3 91e9      	LD   R30,Y+
0001d4 bfef      	OUT  SREG,R30
0001d5 91f9      	LD   R31,Y+
0001d6 91e9      	LD   R30,Y+
0001d7 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 008E {
                 ; 0000 008F while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 ; 0000 0090 #asm("cli")
                 ; 0000 0091 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
                 ; 0000 0092    {
                 ; 0000 0093    tx_buffer0[tx_wr_index0++]=c;
                 ; 0000 0094 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0095    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
                 ; 0000 0096 #endif
                 ; 0000 0097    ++tx_counter0;
                 ; 0000 0098    }
                 ; 0000 0099 else
                 ; 0000 009A    UDR0=c;
                 ; 0000 009B #asm("sei")
                 ; 0000 009C }
                 ;#pragma used-
                 ;#endif
                 ;//*************************************************************************************************
                 ;//********************END SERIAL STUFF (USART0)  **************************************************
                 ;//*************************************************************************************************
                 ;//*******   if you need USART1, enable it in Code Wizard and copy coresponding code here  *********
                 ;//*************************************************************************************************
                 ;/*
                 ; * main function of program
                 ; */
                 ;extern unsigned char castigat, remiza;
                 ;
                 ;void main (void)
                 ; 0000 00AA {
                 _main:
                 ; .FSTART _main
                 ; 0000 00AB unsigned short butoane;
                 ; 0000 00AC unsigned char temp;
                 ; 0000 00AD 	Init_initController();  // this must be the first "init" action/call!
                 ;	butoane -> R16,R17
                 ;	temp -> R19
0001d8 d048      	RCALL _Init_initController
                 ; 0000 00AE 	#asm("sei")             // enable interrupts
0001d9 9478      	sei
                 ; 0000 00AF     i2c_init();
0001da 940e 0512 	CALL _i2c_init
                 ; 0000 00B0     InitDisplay();
0001dc 940e 040e 	CALL _InitDisplay
                 ; 0000 00B1     RotescLiterele();
0001de 940e 044f 	CALL _RotescLiterele
                 ; 0000 00B2     DisplayClear();
0001e0 940e 0443 	CALL _DisplayClear
                 ; 0000 00B3     PrinteazaJocDisplay();
0001e2 940e 049a 	CALL _PrinteazaJocDisplay
                 ; 0000 00B4 	while(TRUE)
                 _0x16:
                 ; 0000 00B5 	{
                 ; 0000 00B6        /* if(rx_counter0)     // if a character is available on serial port USART0
                 ; 0000 00B7 		{
                 ; 0000 00B8 			temp = getchar();
                 ; 0000 00B9             PrintCaracterDisplay(temp);
                 ; 0000 00BA 		}*/
                 ; 0000 00BB         butoane = ButoaneUpdate();
0001e4 940e 0287 	CALL _ButoaneUpdate
0001e6 018f      	MOVW R16,R30
                 ; 0000 00BC         if(butoane && !castigat){
0001e7 2e00      	MOV  R0,R16
0001e8 2a01      	OR   R0,R17
0001e9 f021      	BREQ _0x1A
0001ea 91e0 0210 	LDS  R30,_castigat
0001ec 30e0      	CPI  R30,0
0001ed f009      	BREQ _0x1B
                 _0x1A:
0001ee c008      	RJMP _0x19
                 _0x1B:
                 ; 0000 00BD             //TrimiteButoane(butoane);
                 ; 0000 00BE             UpdateJoc(butoane);
0001ef 01d8      	MOVW R26,R16
0001f0 940e 0394 	CALL _UpdateJoc
                 ; 0000 00BF             PrinteazaJocDisplay();
0001f2 940e 049a 	CALL _PrinteazaJocDisplay
                 ; 0000 00C0             VerificaInvingatorul();
0001f4 940e 0315 	CALL _VerificaInvingatorul
                 ; 0000 00C1         }
                 ; 0000 00C2         else if(castigat){
0001f6 c028      	RJMP _0x1C
                 _0x19:
0001f7 91e0 0210 	LDS  R30,_castigat
0001f9 30e0      	CPI  R30,0
0001fa f091      	BREQ _0x1D
                 ; 0000 00C3             LED1 = 1;
0001fb 9a5e      	SBI  0xB,6
                 ; 0000 00C4             PrintCaracterDisplay('W');
0001fc e5a7      	LDI  R26,LOW(87)
0001fd 940e 03cb 	CALL _PrintCaracterDisplay
                 ; 0000 00C5             PrintCaracterDisplay('I');
0001ff e4a9      	LDI  R26,LOW(73)
000200 940e 03cb 	CALL _PrintCaracterDisplay
                 ; 0000 00C6             PrintCaracterDisplay('N');
000202 e4ae      	LDI  R26,LOW(78)
000203 940e 03cb 	CALL _PrintCaracterDisplay
                 ; 0000 00C7             PrintCaracterDisplay(' ');
000205 e2a0      	LDI  R26,LOW(32)
000206 940e 03cb 	CALL _PrintCaracterDisplay
                 ; 0000 00C8             PrintCaracterDisplay(castigat);
000208 91a0 0210 	LDS  R26,_castigat
00020a 940e 03cb 	CALL _PrintCaracterDisplay
                 ; 0000 00C9             while(1);
                 _0x20:
00020c cfff      	RJMP _0x20
                 ; 0000 00CA         }
                 ; 0000 00CB         else if (remiza == 0){
                 _0x1D:
00020d 91e0 0211 	LDS  R30,_remiza
00020f 30e0      	CPI  R30,0
000210 f471      	BRNE _0x24
                 ; 0000 00CC             LED1 = 1;
000211 9a5e      	SBI  0xB,6
                 ; 0000 00CD             PrintCaracterDisplay('D');
000212 e4a4      	LDI  R26,LOW(68)
000213 940e 03cb 	CALL _PrintCaracterDisplay
                 ; 0000 00CE             PrintCaracterDisplay('R');
000215 e5a2      	LDI  R26,LOW(82)
000216 940e 03cb 	CALL _PrintCaracterDisplay
                 ; 0000 00CF             PrintCaracterDisplay('A');
000218 e4a1      	LDI  R26,LOW(65)
000219 940e 03cb 	CALL _PrintCaracterDisplay
                 ; 0000 00D0             PrintCaracterDisplay('W');
00021b e5a7      	LDI  R26,LOW(87)
00021c 940e 03cb 	CALL _PrintCaracterDisplay
                 ; 0000 00D1             while(1);
                 _0x27:
00021e cfff      	RJMP _0x27
                 ; 0000 00D2         }
                 ; 0000 00D3     }
                 _0x24:
                 _0x1C:
00021f cfc4      	RJMP _0x16
                 ; 0000 00D4 }// end main loop
                 _0x2A:
000220 cfff      	RJMP _0x2A
                 ; .FEND
                 ;
                 ;
                 ;/* initialization file */
                 ;
                 ;#include <mega164a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "defs.h"
                 ;
                 ;
                 ;/*
                 ; * most intialization values are generated using Code Wizard and depend on clock value
                 ; */
                 ;void Init_initController(void)
                 ; 0001 000B {
                 
                 	.CSEG
                 _Init_initController:
                 ; .FSTART _Init_initController
                 ; 0001 000C // Crystal Oscillator division factor: 1
                 ; 0001 000D #pragma optsize-
                 ; 0001 000E CLKPR=0x80;
000221 e8e0      	LDI  R30,LOW(128)
000222 93e0 0061 	STS  97,R30
                 ; 0001 000F CLKPR=0x00;
000224 e0e0      	LDI  R30,LOW(0)
000225 93e0 0061 	STS  97,R30
                 ; 0001 0010 #ifdef _OPTIMIZE_SIZE_
                 ; 0001 0011 #pragma optsize+
                 ; 0001 0012 #endif
                 ; 0001 0013 
                 ; 0001 0014 // Input/Output Ports initialization
                 ; 0001 0015 // Port A initialization
                 ; 0001 0016 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0001 0017 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0001 0018 PORTA=0x00;
000227 b9e2      	OUT  0x2,R30
                 ; 0001 0019 DDRA=0x00;
000228 b9e1      	OUT  0x1,R30
                 ; 0001 001A 
                 ; 0001 001B // Port B initialization
                 ; 0001 001C PORTB=0x00;
000229 b9e5      	OUT  0x5,R30
                 ; 0001 001D DDRB=0x00;
00022a b9e4      	OUT  0x4,R30
                 ; 0001 001E 
                 ; 0001 001F // Port C initialization
                 ; 0001 0020 PORTC=0x00;
00022b b9e8      	OUT  0x8,R30
                 ; 0001 0021 DDRC=0x00;
00022c b9e7      	OUT  0x7,R30
                 ; 0001 0022 
                 ; 0001 0023 // Port D initialization
                 ; 0001 0024 PORTD=0b00100000; // D.5 needs pull-up resistor
00022d e2e0      	LDI  R30,LOW(32)
00022e b9eb      	OUT  0xB,R30
                 ; 0001 0025 DDRD= 0b01010000; // D.6 is LED, D.4 is test output
00022f e5e0      	LDI  R30,LOW(80)
000230 b9ea      	OUT  0xA,R30
                 ; 0001 0026 
                 ; 0001 0027 // Timer/Counter 0 initialization
                 ; 0001 0028 // Clock source: System Clock
                 ; 0001 0029 // Clock value: Timer 0 Stopped
                 ; 0001 002A // Mode: Normal top=FFh
                 ; 0001 002B // OC0 output: Disconnected
                 ; 0001 002C TCCR0A=0x00;
000231 e0e0      	LDI  R30,LOW(0)
000232 bde4      	OUT  0x24,R30
                 ; 0001 002D TCCR0B=0x00;
000233 bde5      	OUT  0x25,R30
                 ; 0001 002E TCNT0=0x00;
000234 bde6      	OUT  0x26,R30
                 ; 0001 002F OCR0A=0x00;
000235 bde7      	OUT  0x27,R30
                 ; 0001 0030 OCR0B=0x00;
000236 bde8      	OUT  0x28,R30
                 ; 0001 0031 
                 ; 0001 0032 // Timer/Counter 1 initialization
                 ; 0001 0033 // Clock source: System Clock
                 ; 0001 0034 // Clock value: 19.531 kHz = CLOCK/256
                 ; 0001 0035 // Mode: CTC top=OCR1A
                 ; 0001 0036 // OC1A output: Discon.
                 ; 0001 0037 // OC1B output: Discon.
                 ; 0001 0038 // Noise Canceler: Off
                 ; 0001 0039 // Input Capture on Falling Edge
                 ; 0001 003A // Timer 1 Overflow Interrupt: Off
                 ; 0001 003B // Input Capture Interrupt: Off
                 ; 0001 003C // Compare A Match Interrupt: On
                 ; 0001 003D // Compare B Match Interrupt: Off
                 ; 0001 003E 
                 ; 0001 003F TCCR1A=0x00;
000237 93e0 0080 	STS  128,R30
                 ; 0001 0040 TCCR1B=0x0D;
000239 e0ed      	LDI  R30,LOW(13)
00023a 93e0 0081 	STS  129,R30
                 ; 0001 0041 TCNT1H=0x00;
00023c e0e0      	LDI  R30,LOW(0)
00023d 93e0 0085 	STS  133,R30
                 ; 0001 0042 TCNT1L=0x00;
00023f 93e0 0084 	STS  132,R30
                 ; 0001 0043 ICR1H=0x00;
000241 93e0 0087 	STS  135,R30
                 ; 0001 0044 ICR1L=0x00;
000243 93e0 0086 	STS  134,R30
                 ; 0001 0045 
                 ; 0001 0046 // 1 sec = 19531 counts = 4C41H counts, from 0 to 4C40
                 ; 0001 0047 // 4C40H = 4CH (MSB) and 40H (LSB)
                 ; 0001 0048 OCR1AH=0x4C;
000245 e4ec      	LDI  R30,LOW(76)
000246 93e0 0089 	STS  137,R30
                 ; 0001 0049 OCR1AL=0x40;
000248 e4e0      	LDI  R30,LOW(64)
000249 93e0 0088 	STS  136,R30
                 ; 0001 004A 
                 ; 0001 004B OCR1BH=0x00;
00024b e0e0      	LDI  R30,LOW(0)
00024c 93e0 008b 	STS  139,R30
                 ; 0001 004C OCR1BL=0x00;
00024e 93e0 008a 	STS  138,R30
                 ; 0001 004D 
                 ; 0001 004E // Timer/Counter 2 initialization
                 ; 0001 004F // Clock source: System Clock
                 ; 0001 0050 // Clock value: Timer2 Stopped
                 ; 0001 0051 // Mode: Normal top=0xFF
                 ; 0001 0052 // OC2A output: Disconnected
                 ; 0001 0053 // OC2B output: Disconnected
                 ; 0001 0054 ASSR=0x00;
000250 93e0 00b6 	STS  182,R30
                 ; 0001 0055 TCCR2A=0x00;
000252 93e0 00b0 	STS  176,R30
                 ; 0001 0056 TCCR2B=0x00;
000254 93e0 00b1 	STS  177,R30
                 ; 0001 0057 TCNT2=0x00;
000256 93e0 00b2 	STS  178,R30
                 ; 0001 0058 OCR2A=0x00;
000258 93e0 00b3 	STS  179,R30
                 ; 0001 0059 OCR2B=0x00;
00025a 93e0 00b4 	STS  180,R30
                 ; 0001 005A 
                 ; 0001 005B // External Interrupt(s) initialization
                 ; 0001 005C // INT0: Off
                 ; 0001 005D // INT1: Off
                 ; 0001 005E // INT2: Off
                 ; 0001 005F // Interrupt on any change on pins PCINT0-7: Off
                 ; 0001 0060 // Interrupt on any change on pins PCINT8-15: Off
                 ; 0001 0061 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0001 0062 // Interrupt on any change on pins PCINT24-31: Off
                 ; 0001 0063 EICRA=0x00;
00025c 93e0 0069 	STS  105,R30
                 ; 0001 0064 EIMSK=0x00;
00025e bbed      	OUT  0x1D,R30
                 ; 0001 0065 PCICR=0x00;
00025f 93e0 0068 	STS  104,R30
                 ; 0001 0066 
                 ; 0001 0067 // Timer/Counter 0,1,2 Interrupt(s) initialization
                 ; 0001 0068 TIMSK0=0x00;
000261 93e0 006e 	STS  110,R30
                 ; 0001 0069 TIMSK1=0x00;
000263 93e0 006f 	STS  111,R30
                 ; 0001 006A TIMSK2=0x00;
000265 93e0 0070 	STS  112,R30
                 ; 0001 006B 
                 ; 0001 006C // USART0 initialization
                 ; 0001 006D // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0001 006E // USART0 Receiver: On
                 ; 0001 006F // USART0 Transmitter: On
                 ; 0001 0070 // USART0 Mode: Asynchronous
                 ; 0001 0071 // USART0 Baud rate: 9600
                 ; 0001 0072 UCSR0A=0x00;
000267 93e0 00c0 	STS  192,R30
                 ; 0001 0073 UCSR0B=0xD8;
000269 ede8      	LDI  R30,LOW(216)
00026a 93e0 00c1 	STS  193,R30
                 ; 0001 0074 UCSR0C=0x06;
00026c e0e6      	LDI  R30,LOW(6)
00026d 93e0 00c2 	STS  194,R30
                 ; 0001 0075 UBRR0H=0x00;
00026f e0e0      	LDI  R30,LOW(0)
000270 93e0 00c5 	STS  197,R30
                 ; 0001 0076 UBRR0L=0x81;
000272 e8e1      	LDI  R30,LOW(129)
000273 93e0 00c4 	STS  196,R30
                 ; 0001 0077 
                 ; 0001 0078 // USART1 initialization
                 ; 0001 0079 // USART1 disabled
                 ; 0001 007A UCSR1B=0x00;
000275 e0e0      	LDI  R30,LOW(0)
000276 93e0 00c9 	STS  201,R30
                 ; 0001 007B 
                 ; 0001 007C 
                 ; 0001 007D // Analog Comparator initialization
                 ; 0001 007E // Analog Comparator: Off
                 ; 0001 007F // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0001 0080 ACSR=0x80;
000278 e8e0      	LDI  R30,LOW(128)
000279 bfe0      	OUT  0x30,R30
                 ; 0001 0081 ADCSRB=0x00;
00027a e0e0      	LDI  R30,LOW(0)
00027b 93e0 007b 	STS  123,R30
                 ; 0001 0082 DIDR1=0x00;
00027d 93e0 007f 	STS  127,R30
                 ; 0001 0083 
                 ; 0001 0084 // Watchdog Timer initialization
                 ; 0001 0085 // Watchdog Timer Prescaler: OSC/2048
                 ; 0001 0086 #pragma optsize-
                 ; 0001 0087 #asm("wdr")
00027f 95a8      	wdr
                 ; 0001 0088 // Write 2 consecutive values to enable watchdog
                 ; 0001 0089 // this is NOT a mistake !
                 ; 0001 008A WDTCSR=0x10;
000280 e1e0      	LDI  R30,LOW(16)
000281 93e0 0060 	STS  96,R30
                 ; 0001 008B WDTCSR=0x00;
000283 e0e0      	LDI  R30,LOW(0)
000284 93e0 0060 	STS  96,R30
                 ; 0001 008C #ifdef _OPTIMIZE_SIZE_
                 ; 0001 008D #pragma optsize+
                 ; 0001 008E #endif
                 ; 0001 008F 
                 ; 0001 0090 }
000286 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;#include "functii.h"
                 ;#include <mega164a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <i2c.h>
                 ;unsigned char displayJoc[9] = {'.', '.', '.','.', '.', '.','.', '.', '.'};
                 
                 	.DSEG
                 ;unsigned char caracterUrmator = 'X', remiza = 9, castigat = 0;
                 ;#define AdresaDisplayMic 0x3C
                 ;
                 ;unsigned char font8x8_basic[65][8] = {
                 ;    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0020 (space)
                 ;    { 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00},   // U+0021 (!)
                 ;    { 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0022 (")
                 ;    { 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00},   // U+0023 (#)
                 ;    { 0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00},   // U+0024 ($)
                 ;    { 0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00},   // U+0025 (%)
                 ;    { 0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00},   // U+0026 (&)
                 ;    { 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0027 (')
                 ;    { 0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00},   // U+0028 (()
                 ;    { 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00},   // U+0029 ())
                 ;    { 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00},   // U+002A (*)
                 ;    { 0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00},   // U+002B (+)
                 ;    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+002C (,)
                 ;    { 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00},   // U+002D (-)
                 ;    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+002E (.)
                 ;    { 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00},   // U+002F (/)
                 ;    { 0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00},   // U+0030 (0)
                 ;    { 0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00},   // U+0031 (1)
                 ;    { 0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00},   // U+0032 (2)
                 ;    { 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00},   // U+0033 (3)
                 ;    { 0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00},   // U+0034 (4)
                 ;    { 0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00},   // U+0035 (5)
                 ;    { 0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00},   // U+0036 (6)
                 ;    { 0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00},   // U+0037 (7)
                 ;    { 0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00},   // U+0038 (8)
                 ;    { 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00},   // U+0039 (9)
                 ;    { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+003A (:)
                 ;    { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+003B (;)
                 ;    { 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00},   // U+003C (<)
                 ;    { 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00},   // U+003D (=)
                 ;    { 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00},   // U+003E (>)
                 ;    { 0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00},   // U+003F (?)
                 ;    { 0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00},   // U+0040 (@)
                 ;    { 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00},   // U+0041 (A)
                 ;    { 0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00},   // U+0042 (B)
                 ;    { 0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00},   // U+0043 (C)
                 ;    { 0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00},   // U+0044 (D)
                 ;    { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00},   // U+0045 (E)
                 ;    { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00},   // U+0046 (F)
                 ;    { 0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00},   // U+0047 (G)
                 ;    { 0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00},   // U+0048 (H)
                 ;    { 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0049 (I)
                 ;    { 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00},   // U+004A (J)
                 ;    { 0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00},   // U+004B (K)
                 ;    { 0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00},   // U+004C (L)
                 ;    { 0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00},   // U+004D (M)
                 ;    { 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00},   // U+004E (N)
                 ;    { 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00},   // U+004F (O)
                 ;    { 0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00},   // U+0050 (P)
                 ;    { 0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00},   // U+0051 (Q)
                 ;    { 0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00},   // U+0052 (R)
                 ;    { 0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00},   // U+0053 (S)
                 ;    { 0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0054 (T)
                 ;    { 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00},   // U+0055 (U)
                 ;    { 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},   // U+0056 (V)
                 ;    { 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00},   // U+0057 (W)
                 ;    { 0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00},   // U+0058 (X)
                 ;    { 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00},   // U+0059 (Y)
                 ;    { 0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00},   // U+005A (Z)
                 ;    { 0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00},   // U+005B ([)
                 ;    { 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00},   // U+005C (\)
                 ;    { 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00},   // U+005D (])
                 ;    { 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00},   // U+005E (^)
                 ;    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF},   // U+005F (_)
                 ;    { 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00}   // U+0060 (`)
                 ;};
                 ;
                 ;unsigned short ButoaneUpdate(){
                 ; 0002 004E unsigned short ButoaneUpdate(){
                 
                 	.CSEG
                 _ButoaneUpdate:
                 ; .FSTART _ButoaneUpdate
                 ; 0002 004F     static unsigned short StareButoaneInainte = 0x00;    //16 biti
                 ; 0002 0050     volatile unsigned short StareButoane = 0x00, ButoaneApasate = 0x00, i; //16 biti
                 ; 0002 0051     volatile unsigned char aux; //8 biti, folosesc 4
                 ; 0002 0052 
                 ; 0002 0053     PORTA = (1<<PINA4);// pornesc pullup pe pinul a4
000287 9727      	SBIW R28,7
000288 e0e0      	LDI  R30,LOW(0)
000289 83eb      	STD  Y+3,R30
00028a 83ec      	STD  Y+4,R30
00028b 83ed      	STD  Y+5,R30
00028c 83ee      	STD  Y+6,R30
                 ;	StareButoane -> Y+5
                 ;	ButoaneApasate -> Y+3
                 ;	i -> Y+1
                 ;	aux -> Y+0
00028d e1e0      	LDI  R30,LOW(16)
00028e 940e 04c0 	CALL SUBOPT_0x0
                 ; 0002 0054     DDRA = 0xFF;   //fac tot portul a sa fie sink pentru a scoate pinii din high-impedance si a ii aduce intr-o stare de ...
                 ; 0002 0055     delay_us(1);
                 ; 0002 0056     DDRA = (1<<PINA4);  //fac pinul a4 de iesire pentru a alimenta butoanele
000290 e1e0      	LDI  R30,LOW(16)
000291 940e 04c7 	CALL SUBOPT_0x1
                 ; 0002 0057     for(i=0; i<10;i++){
                 _0x40007:
000293 81a9      	LDD  R26,Y+1
000294 81ba      	LDD  R27,Y+1+1
000295 971a      	SBIW R26,10
000296 f428      	BRSH _0x40008
                 ; 0002 0058         aux = PINA;      //citesc pinul de mai multe ori pentru a face debounce
000297 b1e0      	IN   R30,0x0
000298 83e8      	ST   Y,R30
                 ; 0002 0059     }
000299 940e 04cc 	CALL SUBOPT_0x2
00029b cff7      	RJMP _0x40007
                 _0x40008:
                 ; 0002 005A     StareButoane |= (unsigned short)(aux & ((1<<PINA0) | (1<<PINA1) | (1<< PINA2) | (1<<PINA3)));//citesc cei 4 pini de  ...
00029c 81e8      	LD   R30,Y
00029d 70ef      	ANDI R30,LOW(0xF)
00029e e0f0      	LDI  R31,0
00029f 940e 04d2 	CALL SUBOPT_0x3
                 ; 0002 005B 
                 ; 0002 005C     PORTA = (1<<PINA5);// pornesc pullup pe pinul a5
0002a1 e2e0      	LDI  R30,LOW(32)
0002a2 940e 04c0 	CALL SUBOPT_0x0
                 ; 0002 005D     DDRA = 0xFF;   //fac tot portul a sa fie sink pentru a scoate pinii din high-impedance si a ii aduce intr-o stare de ...
                 ; 0002 005E     delay_us(1);
                 ; 0002 005F     DDRA = (1<<PINA5);   //fac pinul a5 de iesire pentru a alimenta butoanele
0002a4 e2e0      	LDI  R30,LOW(32)
0002a5 940e 04c7 	CALL SUBOPT_0x1
                 ; 0002 0060     for(i=0; i<10;i++){
                 _0x4000A:
0002a7 81a9      	LDD  R26,Y+1
0002a8 81ba      	LDD  R27,Y+1+1
0002a9 971a      	SBIW R26,10
0002aa f428      	BRSH _0x4000B
                 ; 0002 0061         aux = PINA;
0002ab b1e0      	IN   R30,0x0
0002ac 83e8      	ST   Y,R30
                 ; 0002 0062     }
0002ad 940e 04cc 	CALL SUBOPT_0x2
0002af cff7      	RJMP _0x4000A
                 _0x4000B:
                 ; 0002 0063     StareButoane |= (unsigned short)(aux & ((1<<PINA0) | (1<<PINA1) | (1<< PINA2) | (1<<PINA3))) << 4;//citesc cei 4 pin ...
0002b0 81e8      	LD   R30,Y
0002b1 70ef      	ANDI R30,LOW(0xF)
0002b2 e0f0      	LDI  R31,0
0002b3 940e 0574 	CALL __LSLW4
0002b5 940e 04d2 	CALL SUBOPT_0x3
                 ; 0002 0064 
                 ; 0002 0065     PORTA = (1<<PINA6);// pornesc pullup pe pinul a6
0002b7 e4e0      	LDI  R30,LOW(64)
0002b8 940e 04c0 	CALL SUBOPT_0x0
                 ; 0002 0066     DDRA = 0xFF;   //fac tot portul a sa fie sink pentru a scoate pinii din high-impedance si a ii aduce intr-o stare de ...
                 ; 0002 0067     delay_us(1);
                 ; 0002 0068     DDRA = (1<<PINA6);    //fac pinul a6 de iesire pentru a alimenta butoanele
0002ba e4e0      	LDI  R30,LOW(64)
0002bb 940e 04c7 	CALL SUBOPT_0x1
                 ; 0002 0069     for(i=0; i<10;i++){
                 _0x4000D:
0002bd 81a9      	LDD  R26,Y+1
0002be 81ba      	LDD  R27,Y+1+1
0002bf 971a      	SBIW R26,10
0002c0 f428      	BRSH _0x4000E
                 ; 0002 006A         aux = PINA;      //citesc pinul de mai multe ori pentru a face debounce
0002c1 b1e0      	IN   R30,0x0
0002c2 83e8      	ST   Y,R30
                 ; 0002 006B     }
0002c3 940e 04cc 	CALL SUBOPT_0x2
0002c5 cff7      	RJMP _0x4000D
                 _0x4000E:
                 ; 0002 006C     StareButoane |= (unsigned short)(aux & ((1<<PINA0) | (1<<PINA1) | (1<< PINA2) | (1<<PINA3))) << 8; //citesc cei 4 pi ...
0002c6 81e8      	LD   R30,Y
0002c7 70ef      	ANDI R30,LOW(0xF)
0002c8 2ffe      	MOV  R31,R30
0002c9 e0e0      	LDI  R30,0
0002ca 940e 04d2 	CALL SUBOPT_0x3
                 ; 0002 006D 
                 ; 0002 006E     PORTA = (1<<PINA7);// pornesc pullup pe pinul a7
0002cc e8e0      	LDI  R30,LOW(128)
0002cd 940e 04c0 	CALL SUBOPT_0x0
                 ; 0002 006F     DDRA = 0xFF;   //fac tot portul a sa fie sink pentru a scoate pinii din high-impedance si a ii aduce intr-o stare de ...
                 ; 0002 0070     delay_us(1);
                 ; 0002 0071     DDRA = (1<<PINA7);  //fac pinul a7 de iesire pentru a alimenta butoanele
0002cf e8e0      	LDI  R30,LOW(128)
0002d0 940e 04c7 	CALL SUBOPT_0x1
                 ; 0002 0072     for(i=0; i<10;i++){
                 _0x40010:
0002d2 81a9      	LDD  R26,Y+1
0002d3 81ba      	LDD  R27,Y+1+1
0002d4 971a      	SBIW R26,10
0002d5 f428      	BRSH _0x40011
                 ; 0002 0073         aux = PINA;      //citesc pinul de mai multe ori pentru a face debounce
0002d6 b1e0      	IN   R30,0x0
0002d7 83e8      	ST   Y,R30
                 ; 0002 0074     }
0002d8 940e 04cc 	CALL SUBOPT_0x2
0002da cff7      	RJMP _0x40010
                 _0x40011:
                 ; 0002 0075     PORTA = 0;
0002db e0e0      	LDI  R30,LOW(0)
0002dc b9e2      	OUT  0x2,R30
                 ; 0002 0076     //dupa asta am starea curenta a butoanelor (apasate/neapasate)
                 ; 0002 0077     StareButoane |= (unsigned short)(aux & ((1<<PINA0) | (1<<PINA1) | (1<< PINA2) | (1<<PINA3))) << 12;  //citesc cei 4  ...
0002dd 81e8      	LD   R30,Y
0002de 70ef      	ANDI R30,LOW(0xF)
0002df e0f0      	LDI  R31,0
0002e0 940e 0574 	CALL __LSLW4
0002e2 2ffe      	MOV  R31,R30
0002e3 e0e0      	LDI  R30,0
0002e4 940e 04d2 	CALL SUBOPT_0x3
                 ; 0002 0078 
                 ; 0002 0079     for(i=0;i<16;i++){//pentru a nu primi input incontinuu, salvam doar trecerea din 0 in 1 a pinilor
0002e6 e0e0      	LDI  R30,LOW(0)
0002e7 83e9      	STD  Y+1,R30
0002e8 83ea      	STD  Y+1+1,R30
                 _0x40013:
0002e9 81a9      	LDD  R26,Y+1
0002ea 81ba      	LDD  R27,Y+1+1
0002eb 9750      	SBIW R26,16
0002ec f4f0      	BRSH _0x40014
                 ; 0002 007A         if(((StareButoaneInainte & ((unsigned short)1<<i)) == 0) && ((StareButoane & ((unsigned short)1<<i)) != 0)){//da ...
0002ed 940e 04d9 	CALL SUBOPT_0x4
0002ef 91a0 0423 	LDS  R26,_StareButoaneInainte_S0020000000
0002f1 91b0 0424 	LDS  R27,_StareButoaneInainte_S0020000000+1
0002f3 23ea      	AND  R30,R26
0002f4 23fb      	AND  R31,R27
0002f5 9730      	SBIW R30,0
0002f6 f441      	BRNE _0x40016
0002f7 940e 04d9 	CALL SUBOPT_0x4
0002f9 81ad      	LDD  R26,Y+5
0002fa 81be      	LDD  R27,Y+5+1
0002fb 23ea      	AND  R30,R26
0002fc 23fb      	AND  R31,R27
0002fd 9730      	SBIW R30,0
0002fe f409      	BRNE _0x40017
                 _0x40016:
0002ff c008      	RJMP _0x40015
                 _0x40017:
                 ; 0002 007B             ButoaneApasate |= ((unsigned short)1<<i);//salvez apasarea o singura data
000300 940e 04d9 	CALL SUBOPT_0x4
000302 81ab      	LDD  R26,Y+3
000303 81bc      	LDD  R27,Y+3+1
000304 2bea      	OR   R30,R26
000305 2bfb      	OR   R31,R27
000306 83eb      	STD  Y+3,R30
000307 83fc      	STD  Y+3+1,R31
                 ; 0002 007C         }
                 ; 0002 007D     }
                 _0x40015:
000308 940e 04cc 	CALL SUBOPT_0x2
00030a cfde      	RJMP _0x40013
                 _0x40014:
                 ; 0002 007E     StareButoaneInainte = StareButoane;   //memorez noua stare a pinilor
00030b 81ed      	LDD  R30,Y+5
00030c 81fe      	LDD  R31,Y+5+1
00030d 93e0 0423 	STS  _StareButoaneInainte_S0020000000,R30
00030f 93f0 0424 	STS  _StareButoaneInainte_S0020000000+1,R31
                 ; 0002 007F     return ButoaneApasate;               //intorc apasarea o singura data
000311 81eb      	LDD  R30,Y+3
000312 81fc      	LDD  R31,Y+3+1
000313 9627      	ADIW R28,7
000314 9508      	RET
                 ; 0002 0080 }
                 ; .FEND
                 ;
                 ;void TrimiteButoane(unsigned short Butoane){
                 ; 0002 0082 void TrimiteButoane(unsigned short Butoane){
                 ; 0002 0083     unsigned char i, Printez = 0;
                 ; 0002 0084     for(i = 0; i < 16; i++){
                 ;	Butoane -> Y+2
                 ;	i -> R17
                 ;	Printez -> R16
                 ; 0002 0085         if(Butoane % 2 == 1){
                 ; 0002 0086             putchar(i + 'a');//printez butoanele apasate ca litere pe uart
                 ; 0002 0087             Printez = 1;
                 ; 0002 0088         }
                 ; 0002 0089         Butoane /= 2;
                 ; 0002 008A     }
                 ; 0002 008B     if(Printez){    //daca a fost printat macar un buton, merg si pe urmatoarea linie
                 ; 0002 008C         putchar('\r');
                 ; 0002 008D     }
                 ; 0002 008E 
                 ; 0002 008F }
                 ;
                 ;void PrinteazaJoc(){
                 ; 0002 0091 void PrinteazaJoc(){
                 ; 0002 0092     unsigned char i = 0, j=0;
                 ; 0002 0093     for(i=0;i<3;i++){
                 ;	i -> R17
                 ;	j -> R16
                 ; 0002 0094         for(j=0;j<3;j++){
                 ; 0002 0095             putchar(displayJoc[i*3U+j]);//printez matricea jocului 3x3
                 ; 0002 0096         }
                 ; 0002 0097         putchar('\r');
                 ; 0002 0098     }
                 ; 0002 0099     putchar('\r');
                 ; 0002 009A }
                 ;
                 ;void VerificaInvingatorul(){
                 ; 0002 009C void VerificaInvingatorul(){
                 _VerificaInvingatorul:
                 ; .FSTART _VerificaInvingatorul
                 ; 0002 009D     unsigned char i;
                 ; 0002 009E     for(i=0;i<3;i++){
000315 931a      	ST   -Y,R17
                 ;	i -> R17
000316 e010      	LDI  R17,LOW(0)
                 _0x40024:
000317 3013      	CPI  R17,3
000318 f008      	BRLO PC+2
000319 c04d      	RJMP _0x40025
                 ; 0002 009F         //verifica invingatorul pe linii
                 ; 0002 00A0         if(((displayJoc[i*3U] == displayJoc[i*3U+1U]) &&( displayJoc[i*3U+1U] == displayJoc[i*3U+2U])) && displayJoc[i*3 ...
00031a e0e3      	LDI  R30,LOW(3)
00031b 9fe1      	MUL  R30,R17
00031c 01f0      	MOVW R30,R0
00031d 01bf      	MOVW R22,R30
00031e 5eee      	SUBI R30,LOW(-_displayJoc)
00031f 4ffd      	SBCI R31,HIGH(-_displayJoc)
000320 81a0      	LD   R26,Z
000321 01f0      	MOVW R30,R0
                +
000322 5eed     +SUBI R30 , LOW ( - _displayJoc - ( 1 ) )
000323 4ffd     +SBCI R31 , HIGH ( - _displayJoc - ( 1 ) )
                 	__ADDW1MN _displayJoc,1
000324 81e0      	LD   R30,Z
000325 17ea      	CP   R30,R26
000326 f451      	BRNE _0x40027
000327 01fb      	MOVW R30,R22
                +
000328 5eed     +SUBI R30 , LOW ( - _displayJoc - ( 1 ) )
000329 4ffd     +SBCI R31 , HIGH ( - _displayJoc - ( 1 ) )
                 	__ADDW1MN _displayJoc,1
00032a 81a0      	LD   R26,Z
00032b 01fb      	MOVW R30,R22
                +
00032c 5eec     +SUBI R30 , LOW ( - _displayJoc - ( 2 ) )
00032d 4ffd     +SBCI R31 , HIGH ( - _displayJoc - ( 2 ) )
                 	__ADDW1MN _displayJoc,2
00032e 81e0      	LD   R30,Z
00032f 17ea      	CP   R30,R26
000330 f009      	BREQ _0x40028
                 _0x40027:
000331 c004      	RJMP _0x40029
                 _0x40028:
000332 01fb      	MOVW R30,R22
000333 940e 04df 	CALL SUBOPT_0x5
000335 f409      	BRNE _0x4002A
                 _0x40029:
000336 c008      	RJMP _0x40026
                 _0x4002A:
                 ; 0002 00A1             castigat = displayJoc[i*3U];
000337 e0e3      	LDI  R30,LOW(3)
000338 9fe1      	MUL  R30,R17
000339 01f0      	MOVW R30,R0
00033a 5eee      	SUBI R30,LOW(-_displayJoc)
00033b 4ffd      	SBCI R31,HIGH(-_displayJoc)
00033c 81e0      	LD   R30,Z
00033d 93e0 0210 	STS  _castigat,R30
                 ; 0002 00A2         }
                 ; 0002 00A3         //verifica invingatorul pe coloane
                 ; 0002 00A4         if(((displayJoc[i] == displayJoc[i+3U]) &&( displayJoc[i+3U] == displayJoc[i+6U])) && displayJoc[i] != '.'){
                 _0x40026:
00033f 2fe1      	MOV  R30,R17
000340 e0f0      	LDI  R31,0
000341 5eee      	SUBI R30,LOW(-_displayJoc)
000342 4ffd      	SBCI R31,HIGH(-_displayJoc)
000343 81a0      	LD   R26,Z
000344 2fe1      	MOV  R30,R17
000345 e0f0      	LDI  R31,0
                +
000346 5eeb     +SUBI R30 , LOW ( - _displayJoc - ( 3 ) )
000347 4ffd     +SBCI R31 , HIGH ( - _displayJoc - ( 3 ) )
                 	__ADDW1MN _displayJoc,3
000348 81e0      	LD   R30,Z
000349 17ea      	CP   R30,R26
00034a f461      	BRNE _0x4002C
00034b 2fe1      	MOV  R30,R17
00034c e0f0      	LDI  R31,0
                +
00034d 5eeb     +SUBI R30 , LOW ( - _displayJoc - ( 3 ) )
00034e 4ffd     +SBCI R31 , HIGH ( - _displayJoc - ( 3 ) )
                 	__ADDW1MN _displayJoc,3
00034f 81a0      	LD   R26,Z
000350 2fe1      	MOV  R30,R17
000351 e0f0      	LDI  R31,0
                +
000352 5ee8     +SUBI R30 , LOW ( - _displayJoc - ( 6 ) )
000353 4ffd     +SBCI R31 , HIGH ( - _displayJoc - ( 6 ) )
                 	__ADDW1MN _displayJoc,6
000354 81e0      	LD   R30,Z
000355 17ea      	CP   R30,R26
000356 f009      	BREQ _0x4002D
                 _0x4002C:
000357 c005      	RJMP _0x4002E
                 _0x4002D:
000358 2fe1      	MOV  R30,R17
000359 e0f0      	LDI  R31,0
00035a 940e 04df 	CALL SUBOPT_0x5
00035c f409      	BRNE _0x4002F
                 _0x4002E:
00035d c007      	RJMP _0x4002B
                 _0x4002F:
                 ; 0002 00A5             castigat = displayJoc[i];
00035e 2fe1      	MOV  R30,R17
00035f e0f0      	LDI  R31,0
000360 5eee      	SUBI R30,LOW(-_displayJoc)
000361 4ffd      	SBCI R31,HIGH(-_displayJoc)
000362 81e0      	LD   R30,Z
000363 93e0 0210 	STS  _castigat,R30
                 ; 0002 00A6         }
                 ; 0002 00A7     }
                 _0x4002B:
000365 5f1f      	SUBI R17,-1
000366 cfb0      	RJMP _0x40024
                 _0x40025:
                 ; 0002 00A8     //verifica invingatorul pe diagonale
                 ; 0002 00A9     if(((displayJoc[0U] == displayJoc[4U]) &&( displayJoc[4U] == displayJoc[8U])) && displayJoc[0U] != '.'){
                +
000367 91e0 0216+LDS R30 , _displayJoc + ( 4 )
                 	__GETB1MN _displayJoc,4
000369 91a0 0212 	LDS  R26,_displayJoc
00036b 17ea      	CP   R30,R26
00036c f431      	BRNE _0x40031
                +
00036d 91a0 0216+LDS R26 , _displayJoc + ( 4 )
                 	__GETB2MN _displayJoc,4
                +
00036f 91e0 021a+LDS R30 , _displayJoc + ( 8 )
                 	__GETB1MN _displayJoc,8
000371 17ea      	CP   R30,R26
000372 f009      	BREQ _0x40032
                 _0x40031:
000373 c004      	RJMP _0x40033
                 _0x40032:
000374 91a0 0212 	LDS  R26,_displayJoc
000376 32ae      	CPI  R26,LOW(0x2E)
000377 f409      	BRNE _0x40034
                 _0x40033:
000378 c004      	RJMP _0x40030
                 _0x40034:
                 ; 0002 00AA             castigat = displayJoc[4U];
                +
000379 91e0 0216+LDS R30 , _displayJoc + ( 4 )
                 	__GETB1MN _displayJoc,4
00037b 93e0 0210 	STS  _castigat,R30
                 ; 0002 00AB     }
                 ; 0002 00AC     if(((displayJoc[6U] == displayJoc[4U]) &&( displayJoc[4U] == displayJoc[2U])) && displayJoc[2U] != '.'){
                 _0x40030:
                +
00037d 91a0 0218+LDS R26 , _displayJoc + ( 6 )
                 	__GETB2MN _displayJoc,6
                +
00037f 91e0 0216+LDS R30 , _displayJoc + ( 4 )
                 	__GETB1MN _displayJoc,4
000381 17ea      	CP   R30,R26
000382 f431      	BRNE _0x40036
                +
000383 91a0 0216+LDS R26 , _displayJoc + ( 4 )
                 	__GETB2MN _displayJoc,4
                +
000385 91e0 0214+LDS R30 , _displayJoc + ( 2 )
                 	__GETB1MN _displayJoc,2
000387 17ea      	CP   R30,R26
000388 f009      	BREQ _0x40037
                 _0x40036:
000389 c004      	RJMP _0x40038
                 _0x40037:
                +
00038a 91a0 0214+LDS R26 , _displayJoc + ( 2 )
                 	__GETB2MN _displayJoc,2
00038c 32ae      	CPI  R26,LOW(0x2E)
00038d f409      	BRNE _0x40039
                 _0x40038:
00038e c004      	RJMP _0x40035
                 _0x40039:
                 ; 0002 00AD             castigat = displayJoc[4U];
                +
00038f 91e0 0216+LDS R30 , _displayJoc + ( 4 )
                 	__GETB1MN _displayJoc,4
000391 93e0 0210 	STS  _castigat,R30
                 ; 0002 00AE     }
                 ; 0002 00AF }
                 _0x40035:
000393 c0b9      	RJMP _0x20A0001
                 ; .FEND
                 ;
                 ;void UpdateJoc(unsigned short butoane){
                 ; 0002 00B1 void UpdateJoc(unsigned short butoane){
                 _UpdateJoc:
                 ; .FSTART _UpdateJoc
                 ; 0002 00B2     unsigned char i, j;
                 ; 0002 00B3     for(i=0;i<3;i++){
000394 93ba      	ST   -Y,R27
000395 93aa      	ST   -Y,R26
000396 931a      	ST   -Y,R17
000397 930a      	ST   -Y,R16
                 ;	butoane -> Y+2
                 ;	i -> R17
                 ;	j -> R16
000398 e010      	LDI  R17,LOW(0)
                 _0x4003B:
000399 3013      	CPI  R17,3
00039a f560      	BRSH _0x4003C
                 ; 0002 00B4         for(j=0; j<3;j++){
00039b e000      	LDI  R16,LOW(0)
                 _0x4003E:
00039c 3003      	CPI  R16,3
00039d f538      	BRSH _0x4003F
                 ; 0002 00B5             if((butoane & ((unsigned short)1<<(i*4+j))) != 0){ //trec prin fiecare casuta in parte si verific daca buton ...
00039e 2fe1      	MOV  R30,R17
00039f 0fee      	LSL  R30
0003a0 0fee      	LSL  R30
0003a1 0fe0      	ADD  R30,R16
0003a2 e0a1      	LDI  R26,LOW(1)
0003a3 e0b0      	LDI  R27,HIGH(1)
0003a4 940e 056b 	CALL __LSLW12
0003a6 81aa      	LDD  R26,Y+2
0003a7 81bb      	LDD  R27,Y+2+1
0003a8 23ea      	AND  R30,R26
0003a9 23fb      	AND  R31,R27
0003aa 9730      	SBIW R30,0
0003ab f0b9      	BREQ _0x40040
                 ; 0002 00B6                 if( displayJoc[j*3U+(2U-i)] == '.'){    //daca nu e niciun semn acolo, pot pune urmatorul caracter
0003ac 940e 04e4 	CALL SUBOPT_0x6
0003ae 940e 04df 	CALL SUBOPT_0x5
0003b0 f489      	BRNE _0x40041
                 ; 0002 00B7                     remiza--;//scad numarul de caractere ramase pana la remiza
0003b1 91e0 0211 	LDS  R30,_remiza
0003b3 50e1      	SUBI R30,LOW(1)
0003b4 93e0 0211 	STS  _remiza,R30
                 ; 0002 00B8                     displayJoc[j*3U+(2U-i)] = caracterUrmator;//pun in casuta caracterul urmator;
0003b6 940e 04e4 	CALL SUBOPT_0x6
0003b8 5eee      	SUBI R30,LOW(-_displayJoc)
0003b9 4ffd      	SBCI R31,HIGH(-_displayJoc)
0003ba 8290      	ST   Z,R9
                 ; 0002 00B9                     if(caracterUrmator == 'X'){//schimb caracterul ce urmeaza
0003bb e5e8      	LDI  R30,LOW(88)
0003bc 15e9      	CP   R30,R9
0003bd f411      	BRNE _0x40042
                 ; 0002 00BA                         caracterUrmator = '0';
0003be e3e0      	LDI  R30,LOW(48)
0003bf c001      	RJMP _0x40060
                 ; 0002 00BB                     }
                 ; 0002 00BC                     else{
                 _0x40042:
                 ; 0002 00BD                         caracterUrmator = 'X';
0003c0 e5e8      	LDI  R30,LOW(88)
                 _0x40060:
0003c1 2e9e      	MOV  R9,R30
                 ; 0002 00BE                     }
                 ; 0002 00BF                 }
                 ; 0002 00C0                 break;
                 _0x40041:
0003c2 c002      	RJMP _0x4003F
                 ; 0002 00C1             }
                 ; 0002 00C2         }
                 _0x40040:
0003c3 5f0f      	SUBI R16,-1
0003c4 cfd7      	RJMP _0x4003E
                 _0x4003F:
                 ; 0002 00C3 
                 ; 0002 00C4     }
0003c5 5f1f      	SUBI R17,-1
0003c6 cfd2      	RJMP _0x4003B
                 _0x4003C:
                 ; 0002 00C5 }
0003c7 8119      	LDD  R17,Y+1
0003c8 8108      	LDD  R16,Y+0
0003c9 9624      	ADIW R28,4
0003ca 9508      	RET
                 ; .FEND
                 ;
                 ;void PrintCaracterDisplay(unsigned char caracter){
                 ; 0002 00C7 void PrintCaracterDisplay(unsigned char caracter){
                 _PrintCaracterDisplay:
                 ; .FSTART _PrintCaracterDisplay
                 ; 0002 00C8     unsigned char i;
                 ; 0002 00C9     if(caracter >= 32){
0003cb 93aa      	ST   -Y,R26
0003cc 931a      	ST   -Y,R17
                 ;	caracter -> Y+1
                 ;	i -> R17
0003cd 81a9      	LDD  R26,Y+1
0003ce 32a0      	CPI  R26,LOW(0x20)
0003cf f0d8      	BRLO _0x40044
                 ; 0002 00CA         caracter-=32;
0003d0 81e9      	LDD  R30,Y+1
0003d1 52e0      	SUBI R30,LOW(32)
0003d2 83e9      	STD  Y+1,R30
                 ; 0002 00CB         i2c_start();
0003d3 940e 04f2 	CALL SUBOPT_0x7
                 ; 0002 00CC         i2c_write(AdresaDisplayMic<<1);
                 ; 0002 00CD         i2c_write(0x40);
0003d5 e4a0      	LDI  R26,LOW(64)
0003d6 940e 054b 	CALL _i2c_write
                 ; 0002 00CE         //construiesc caracterul
                 ; 0002 00CF         for(i=0;i<8U;i++){
0003d8 e010      	LDI  R17,LOW(0)
                 _0x40046:
0003d9 2fa1      	MOV  R26,R17
0003da 27bb      	CLR  R27
0003db 9718      	SBIW R26,8
0003dc f464      	BRGE _0x40047
                 ; 0002 00D0             i2c_write(font8x8_basic[caracter][i]);
0003dd 81e9      	LDD  R30,Y+1
0003de 940e 04f7 	CALL SUBOPT_0x8
0003e0 01df      	MOVW R26,R30
0003e1 27ee      	CLR  R30
0003e2 0fa1      	ADD  R26,R17
0003e3 1fbe      	ADC  R27,R30
0003e4 91ac      	LD   R26,X
0003e5 940e 054b 	CALL _i2c_write
                 ; 0002 00D1         }
0003e7 5f1f      	SUBI R17,-1
0003e8 cff0      	RJMP _0x40046
                 _0x40047:
                 ; 0002 00D2         i2c_stop();
0003e9 940e 0526 	CALL _i2c_stop
                 ; 0002 00D3     }
                 ; 0002 00D4 
                 ; 0002 00D5 }
                 _0x40044:
0003eb 8118      	LDD  R17,Y+0
0003ec c011      	RJMP _0x20A0002
                 ; .FEND
                 ;
                 ;void Data1Bit(unsigned char data){
                 ; 0002 00D7 void Data1Bit(unsigned char data){
                 ; 0002 00D8     i2c_start();
                 ;	data -> Y+0
                 ; 0002 00D9     i2c_write(AdresaDisplayMic<<1);
                 ; 0002 00DA     i2c_write(0xC0);
                 ; 0002 00DB     i2c_write(data);
                 ; 0002 00DC     i2c_stop();
                 ; 0002 00DD }
                 ;
                 ;void Comanda1Bit(unsigned char comanda1){
                 ; 0002 00DF void Comanda1Bit(unsigned char comanda1){
                 _Comanda1Bit:
                 ; .FSTART _Comanda1Bit
                 ; 0002 00E0     i2c_start();
0003ed 93aa      	ST   -Y,R26
                 ;	comanda1 -> Y+0
0003ee 940e 04f2 	CALL SUBOPT_0x7
                 ; 0002 00E1     i2c_write(AdresaDisplayMic<<1);
                 ; 0002 00E2     i2c_write(0x80);
0003f0 e8a0      	LDI  R26,LOW(128)
0003f1 940e 04fd 	CALL SUBOPT_0x9
                 ; 0002 00E3     i2c_write(comanda1);
                 ; 0002 00E4     i2c_stop();
                 ; 0002 00E5 }
0003f3 9621      	ADIW R28,1
0003f4 9508      	RET
                 ; .FEND
                 ;
                 ;void Comanda2Biti(unsigned char comanda1, unsigned char comanda2){
                 ; 0002 00E7 void Comanda2Biti(unsigned char comanda1, unsigned char comanda2){
                 _Comanda2Biti:
                 ; .FSTART _Comanda2Biti
                 ; 0002 00E8     i2c_start();
0003f5 93aa      	ST   -Y,R26
                 ;	comanda1 -> Y+1
                 ;	comanda2 -> Y+0
0003f6 940e 04f2 	CALL SUBOPT_0x7
                 ; 0002 00E9     i2c_write(AdresaDisplayMic<<1);
                 ; 0002 00EA     i2c_write(0x00);
0003f8 e0a0      	LDI  R26,LOW(0)
0003f9 940e 054b 	CALL _i2c_write
                 ; 0002 00EB     i2c_write(comanda1);
0003fb 81a9      	LDD  R26,Y+1
0003fc 940e 04fd 	CALL SUBOPT_0x9
                 ; 0002 00EC     i2c_write(comanda2);
                 ; 0002 00ED     i2c_stop();
                 ; 0002 00EE }
                 _0x20A0002:
0003fe 9622      	ADIW R28,2
0003ff 9508      	RET
                 ; .FEND
                 ;
                 ;void Comanda3Biti(unsigned char comanda1, unsigned char comanda2, unsigned char comanda3){
                 ; 0002 00F0 void Comanda3Biti(unsigned char comanda1, unsigned char comanda2, unsigned char comanda3){
                 _Comanda3Biti:
                 ; .FSTART _Comanda3Biti
                 ; 0002 00F1     i2c_start();
000400 93aa      	ST   -Y,R26
                 ;	comanda1 -> Y+2
                 ;	comanda2 -> Y+1
                 ;	comanda3 -> Y+0
000401 940e 04f2 	CALL SUBOPT_0x7
                 ; 0002 00F2     i2c_write(AdresaDisplayMic<<1);
                 ; 0002 00F3     i2c_write(0x00);
000403 e0a0      	LDI  R26,LOW(0)
000404 940e 054b 	CALL _i2c_write
                 ; 0002 00F4     i2c_write(comanda1);
000406 81aa      	LDD  R26,Y+2
000407 940e 054b 	CALL _i2c_write
                 ; 0002 00F5     i2c_write(comanda2);
000409 81a9      	LDD  R26,Y+1
00040a 940e 04fd 	CALL SUBOPT_0x9
                 ; 0002 00F6     i2c_write(comanda3);
                 ; 0002 00F7     i2c_stop();
                 ; 0002 00F8 }
00040c 9623      	ADIW R28,3
00040d 9508      	RET
                 ; .FEND
                 ;
                 ;void InitDisplay(){
                 ; 0002 00FA void InitDisplay(){
                 _InitDisplay:
                 ; .FSTART _InitDisplay
                 ; 0002 00FB     Comanda1Bit(0xAF);//on
00040e eaaf      	LDI  R26,LOW(175)
00040f dfdd      	RCALL _Comanda1Bit
                 ; 0002 00FC     Comanda2Biti(0xD5, 0x80);//clk
000410 ede5      	LDI  R30,LOW(213)
000411 93ea      	ST   -Y,R30
000412 e8a0      	LDI  R26,LOW(128)
000413 dfe1      	RCALL _Comanda2Biti
                 ; 0002 00FD     Comanda2Biti(0xA8, 0x1F);//multiplex
000414 eae8      	LDI  R30,LOW(168)
000415 93ea      	ST   -Y,R30
000416 e1af      	LDI  R26,LOW(31)
000417 dfdd      	RCALL _Comanda2Biti
                 ; 0002 00FE     Comanda1Bit(0x40);//start line
000418 e4a0      	LDI  R26,LOW(64)
000419 dfd3      	RCALL _Comanda1Bit
                 ; 0002 00FF     Comanda2Biti(0x8D, 0x14);//charge pump
00041a e8ed      	LDI  R30,LOW(141)
00041b 93ea      	ST   -Y,R30
00041c e1a4      	LDI  R26,LOW(20)
00041d dfd7      	RCALL _Comanda2Biti
                 ; 0002 0100     Comanda2Biti(0xA1, 0xC8);//segmente remap
00041e eae1      	LDI  R30,LOW(161)
00041f 93ea      	ST   -Y,R30
000420 eca8      	LDI  R26,LOW(200)
000421 dfd3      	RCALL _Comanda2Biti
                 ; 0002 0101     Comanda2Biti(0xDA, 0x02);//com hw config
000422 edea      	LDI  R30,LOW(218)
000423 93ea      	ST   -Y,R30
000424 e0a2      	LDI  R26,LOW(2)
000425 dfcf      	RCALL _Comanda2Biti
                 ; 0002 0102     Comanda2Biti(0xD3, 0x00);//offset
000426 ede3      	LDI  R30,LOW(211)
000427 93ea      	ST   -Y,R30
000428 e0a0      	LDI  R26,LOW(0)
000429 dfcb      	RCALL _Comanda2Biti
                 ; 0002 0103     Comanda2Biti(0x81, 0x05);//contrast/luminozitate
00042a e8e1      	LDI  R30,LOW(129)
00042b 93ea      	ST   -Y,R30
00042c e0a5      	LDI  R26,LOW(5)
00042d dfc7      	RCALL _Comanda2Biti
                 ; 0002 0104     Comanda2Biti(0xD9, 0xF1);//precharge period
00042e ede9      	LDI  R30,LOW(217)
00042f 93ea      	ST   -Y,R30
000430 efa1      	LDI  R26,LOW(241)
000431 dfc3      	RCALL _Comanda2Biti
                 ; 0002 0105     Comanda2Biti(0xDB, 0x20);//VCOMh deselect level
000432 edeb      	LDI  R30,LOW(219)
000433 93ea      	ST   -Y,R30
000434 e2a0      	LDI  R26,LOW(32)
000435 dfbf      	RCALL _Comanda2Biti
                 ; 0002 0106     Comanda3Biti(0x22, 0x00, 0x03);//page range
000436 940e 0504 	CALL SUBOPT_0xA
                 ; 0002 0107     Comanda3Biti(0x21, 0x00, 0x7F);//column range
                 ; 0002 0108     Comanda1Bit(0xA4);//all pixeli on
000438 eaa4      	LDI  R26,LOW(164)
000439 dfb3      	RCALL _Comanda1Bit
                 ; 0002 0109     Comanda1Bit(0xA6);//non inverted
00043a eaa6      	LDI  R26,LOW(166)
00043b dfb1      	RCALL _Comanda1Bit
                 ; 0002 010A     Comanda1Bit(0xAF);//display on
00043c eaaf      	LDI  R26,LOW(175)
00043d dfaf      	RCALL _Comanda1Bit
                 ; 0002 010B     Comanda2Biti(0x20, 0x00);//address mode
00043e e2e0      	LDI  R30,LOW(32)
00043f 93ea      	ST   -Y,R30
000440 e0a0      	LDI  R26,LOW(0)
000441 dfb3      	RCALL _Comanda2Biti
                 ; 0002 010C }
000442 9508      	RET
                 ; .FEND
                 ;
                 ;void DisplayClear(){
                 ; 0002 010E void DisplayClear(){
                 _DisplayClear:
                 ; .FSTART _DisplayClear
                 ; 0002 010F     unsigned char i;
                 ; 0002 0110     Comanda3Biti(0x22, 0x00, 0x03);//page range
000443 931a      	ST   -Y,R17
                 ;	i -> R17
000444 940e 0504 	CALL SUBOPT_0xA
                 ; 0002 0111     Comanda3Biti(0x21, 0x00, 0x7F);//column range
                 ; 0002 0112     for(i = 0U; i < 16U*4U; i++){
000446 e010      	LDI  R17,LOW(0)
                 _0x40049:
000447 3410      	CPI  R17,64
000448 f420      	BRSH _0x4004A
                 ; 0002 0113         PrintCaracterDisplay(32);
000449 e2a0      	LDI  R26,LOW(32)
00044a df80      	RCALL _PrintCaracterDisplay
                 ; 0002 0114     }
00044b 5f1f      	SUBI R17,-1
00044c cffa      	RJMP _0x40049
                 _0x4004A:
                 ; 0002 0115 }
                 _0x20A0001:
00044d 9119      	LD   R17,Y+
00044e 9508      	RET
                 ; .FEND
                 ;
                 ;void RotescLiterele(){
                 ; 0002 0117 void RotescLiterele(){
                 _RotescLiterele:
                 ; .FSTART _RotescLiterele
                 ; 0002 0118     unsigned char CharactersLine, BitmapCharacterIndex, BitmapLineIndex, i;
                 ; 0002 0119     unsigned char TempCharactersLine[8];
                 ; 0002 011A     int j;
                 ; 0002 011B     for(BitmapCharacterIndex = 0U; BitmapCharacterIndex < 65U; BitmapCharacterIndex++){
00044f 9728      	SBIW R28,8
000450 940e 0584 	CALL __SAVELOCR6
                 ;	CharactersLine -> R17
                 ;	BitmapCharacterIndex -> R16
                 ;	BitmapLineIndex -> R19
                 ;	i -> R18
                 ;	TempCharactersLine -> Y+6
                 ;	j -> R20,R21
000452 e000      	LDI  R16,LOW(0)
                 _0x4004C:
000453 2fa0      	MOV  R26,R16
000454 27bb      	CLR  R27
000455 34a1      	CPI  R26,LOW(0x41)
000456 e0e0      	LDI  R30,HIGH(0x41)
000457 07be      	CPC  R27,R30
000458 f5ec      	BRGE _0x4004D
                 ; 0002 011C         for(BitmapLineIndex = 0U; BitmapLineIndex < 8U; BitmapLineIndex++){
000459 e030      	LDI  R19,LOW(0)
                 _0x4004F:
00045a 2fa3      	MOV  R26,R19
00045b 27bb      	CLR  R27
00045c 9718      	SBIW R26,8
00045d f4ec      	BRGE _0x40050
                 ; 0002 011D             CharactersLine = 0;
00045e e010      	LDI  R17,LOW(0)
                 ; 0002 011E             for(j = 7U; j >= 0U; j--){
                +
00045f e047     +LDI R20 , LOW ( 7 )
000460 e050     +LDI R21 , HIGH ( 7 )
                 	__GETWRN 20,21,7
                 _0x40052:
000461 2355      	TST  R21
000462 f07a      	BRMI _0x40053
                 ; 0002 011F                 CharactersLine = CharactersLine << 1U;
000463 0f11      	LSL  R17
                 ; 0002 0120                 CharactersLine += ((font8x8_basic[BitmapCharacterIndex][j]) >> BitmapLineIndex) % 2U;
000464 2fe0      	MOV  R30,R16
000465 940e 04f7 	CALL SUBOPT_0x8
000467 0fe4      	ADD  R30,R20
000468 1ff5      	ADC  R31,R21
000469 81a0      	LD   R26,Z
00046a 2fe3      	MOV  R30,R19
00046b 940e 0563 	CALL __LSRB12
00046d 70e1      	ANDI R30,LOW(0x1)
00046e 0f1e      	ADD  R17,R30
                 ; 0002 0121             }
                +
00046f 5041     +SUBI R20 , LOW ( 1 )
000470 4050     +SBCI R21 , HIGH ( 1 )
                 	__SUBWRN 20,21,1
000471 cfef      	RJMP _0x40052
                 _0x40053:
                 ; 0002 0122             TempCharactersLine[BitmapLineIndex] = CharactersLine;
000472 2fe3      	MOV  R30,R19
000473 e0f0      	LDI  R31,0
000474 01de      	MOVW R26,R28
000475 9616      	ADIW R26,6
000476 0fea      	ADD  R30,R26
000477 1ffb      	ADC  R31,R27
000478 8310      	ST   Z,R17
                 ; 0002 0123         }
000479 5f3f      	SUBI R19,-1
00047a cfdf      	RJMP _0x4004F
                 _0x40050:
                 ; 0002 0124         for(i = 0U; i < 8U; i++){
00047b e020      	LDI  R18,LOW(0)
                 _0x40055:
00047c 2fa2      	MOV  R26,R18
00047d 27bb      	CLR  R27
00047e 9718      	SBIW R26,8
00047f f4a4      	BRGE _0x40056
                 ; 0002 0125             font8x8_basic[BitmapCharacterIndex][i] = TempCharactersLine[i];
000480 2fe0      	MOV  R30,R16
000481 940e 04f7 	CALL SUBOPT_0x8
000483 01df      	MOVW R26,R30
000484 2fe2      	MOV  R30,R18
000485 e0f0      	LDI  R31,0
000486 0fea      	ADD  R30,R26
000487 1ffb      	ADC  R31,R27
000488 010f      	MOVW R0,R30
000489 2fe2      	MOV  R30,R18
00048a e0f0      	LDI  R31,0
00048b 01de      	MOVW R26,R28
00048c 9616      	ADIW R26,6
00048d 0fae      	ADD  R26,R30
00048e 1fbf      	ADC  R27,R31
00048f 91ec      	LD   R30,X
000490 01d0      	MOVW R26,R0
000491 93ec      	ST   X,R30
                 ; 0002 0126         }
000492 5f2f      	SUBI R18,-1
000493 cfe8      	RJMP _0x40055
                 _0x40056:
                 ; 0002 0127     }
000494 5f0f      	SUBI R16,-1
000495 cfbd      	RJMP _0x4004C
                 _0x4004D:
                 ; 0002 0128 }
000496 940e 058b 	CALL __LOADLOCR6
000498 962e      	ADIW R28,14
000499 9508      	RET
                 ; .FEND
                 ;
                 ;void PrinteazaJocDisplay(){
                 ; 0002 012A void PrinteazaJocDisplay(){
                 _PrinteazaJocDisplay:
                 ; .FSTART _PrinteazaJocDisplay
                 ; 0002 012B     unsigned char i = 0, j=0;
                 ; 0002 012C     Comanda3Biti(0x22, 0x00, 0x03);//page range
00049a 931a      	ST   -Y,R17
00049b 930a      	ST   -Y,R16
                 ;	i -> R17
                 ;	j -> R16
00049c e010      	LDI  R17,0
00049d e000      	LDI  R16,0
00049e 940e 0504 	CALL SUBOPT_0xA
                 ; 0002 012D     Comanda3Biti(0x21, 0x00, 0x7F);//column range
                 ; 0002 012E     for(i=0;i<3;i++){
0004a0 e010      	LDI  R17,LOW(0)
                 _0x40058:
0004a1 3013      	CPI  R17,3
0004a2 f4d0      	BRSH _0x40059
                 ; 0002 012F         for(j=0;j<3;j++){
0004a3 e000      	LDI  R16,LOW(0)
                 _0x4005B:
0004a4 3003      	CPI  R16,3
0004a5 f470      	BRSH _0x4005C
                 ; 0002 0130             PrintCaracterDisplay(displayJoc[i*3U+j]);//printez matricea jocului 3x3
0004a6 e0e3      	LDI  R30,LOW(3)
0004a7 9fe1      	MUL  R30,R17
0004a8 01f0      	MOVW R30,R0
0004a9 01df      	MOVW R26,R30
0004aa 2fe0      	MOV  R30,R16
0004ab e0f0      	LDI  R31,0
0004ac 0fea      	ADD  R30,R26
0004ad 1ffb      	ADC  R31,R27
0004ae 5eee      	SUBI R30,LOW(-_displayJoc)
0004af 4ffd      	SBCI R31,HIGH(-_displayJoc)
0004b0 81a0      	LD   R26,Z
0004b1 df19      	RCALL _PrintCaracterDisplay
                 ; 0002 0131         }
0004b2 5f0f      	SUBI R16,-1
0004b3 cff0      	RJMP _0x4005B
                 _0x4005C:
                 ; 0002 0132         for(j=3;j<16;j++){
0004b4 e003      	LDI  R16,LOW(3)
                 _0x4005E:
0004b5 3100      	CPI  R16,16
0004b6 f420      	BRSH _0x4005F
                 ; 0002 0133             PrintCaracterDisplay(' ');
0004b7 e2a0      	LDI  R26,LOW(32)
0004b8 df12      	RCALL _PrintCaracterDisplay
                 ; 0002 0134         }
0004b9 5f0f      	SUBI R16,-1
0004ba cffa      	RJMP _0x4005E
                 _0x4005F:
                 ; 0002 0135     }
0004bb 5f1f      	SUBI R17,-1
0004bc cfe4      	RJMP _0x40058
                 _0x40059:
                 ; 0002 0136 }
0004bd 9109      	LD   R16,Y+
0004be 9119      	LD   R17,Y+
0004bf 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer0:
000200           	.BYTE 0x8
                 _tx_buffer0:
000208           	.BYTE 0x8
                 _castigat:
000210           	.BYTE 0x1
                 _remiza:
000211           	.BYTE 0x1
                 _displayJoc:
000212           	.BYTE 0x9
                 _font8x8_basic:
00021b           	.BYTE 0x208
                 _StareButoaneInainte_S0020000000:
000423           	.BYTE 0x2
                 __seed_G102:
000425           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
0004c0 b9e2      	OUT  0x2,R30
0004c1 efef      	LDI  R30,LOW(255)
0004c2 b9e1      	OUT  0x1,R30
                +
0004c3 e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
0004c4 958a     +DEC R24
0004c5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
0004c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0004c7 b9e1      	OUT  0x1,R30
0004c8 e0e0      	LDI  R30,LOW(0)
0004c9 83e9      	STD  Y+1,R30
0004ca 83ea      	STD  Y+1+1,R30
0004cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
0004cc 81e9      	LDD  R30,Y+1
0004cd 81fa      	LDD  R31,Y+1+1
0004ce 9631      	ADIW R30,1
0004cf 83e9      	STD  Y+1,R30
0004d0 83fa      	STD  Y+1+1,R31
0004d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
0004d2 81ad      	LDD  R26,Y+5
0004d3 81be      	LDD  R27,Y+5+1
0004d4 2bea      	OR   R30,R26
0004d5 2bfb      	OR   R31,R27
0004d6 83ed      	STD  Y+5,R30
0004d7 83fe      	STD  Y+5+1,R31
0004d8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0004d9 81e9      	LDD  R30,Y+1
0004da e0a1      	LDI  R26,LOW(1)
0004db e0b0      	LDI  R27,HIGH(1)
0004dc 940e 056b 	CALL __LSLW12
0004de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0004df 5eee      	SUBI R30,LOW(-_displayJoc)
0004e0 4ffd      	SBCI R31,HIGH(-_displayJoc)
0004e1 81a0      	LD   R26,Z
0004e2 32ae      	CPI  R26,LOW(0x2E)
0004e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x6:
0004e4 e0e3      	LDI  R30,LOW(3)
0004e5 9fe0      	MUL  R30,R16
0004e6 01b0      	MOVW R22,R0
0004e7 2fe1      	MOV  R30,R17
0004e8 e0f0      	LDI  R31,0
0004e9 e0a2      	LDI  R26,LOW(2)
0004ea e0b0      	LDI  R27,HIGH(2)
0004eb 940e 057d 	CALL __SWAPW12
0004ed 1bea      	SUB  R30,R26
0004ee 0bfb      	SBC  R31,R27
0004ef 0fe6      	ADD  R30,R22
0004f0 1ff7      	ADC  R31,R23
0004f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7:
0004f2 940e 0517 	CALL _i2c_start
0004f4 e7a8      	LDI  R26,LOW(120)
0004f5 940c 054b 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
0004f7 e0f0      	LDI  R31,0
0004f8 940e 0576 	CALL __LSLW3
0004fa 5ee5      	SUBI R30,LOW(-_font8x8_basic)
0004fb 4ffd      	SBCI R31,HIGH(-_font8x8_basic)
0004fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
0004fd 940e 054b 	CALL _i2c_write
0004ff 81a8      	LD   R26,Y
000500 940e 054b 	CALL _i2c_write
000502 940c 0526 	JMP  _i2c_stop
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xA:
000504 e2e2      	LDI  R30,LOW(34)
000505 93ea      	ST   -Y,R30
000506 e0e0      	LDI  R30,LOW(0)
000507 93ea      	ST   -Y,R30
000508 e0a3      	LDI  R26,LOW(3)
000509 940e 0400 	CALL _Comanda3Biti
00050b e2e1      	LDI  R30,LOW(33)
00050c 93ea      	ST   -Y,R30
00050d e0e0      	LDI  R30,LOW(0)
00050e 93ea      	ST   -Y,R30
00050f e7af      	LDI  R26,LOW(127)
000510 940c 0400 	JMP  _Comanda3Biti
                 
                 
                 	.CSEG
                 	.equ __sda_bit=1
                 	.equ __scl_bit=0
                 	.equ __i2c_port=0x08 ;PORTC
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
000512 9840      	cbi  __i2c_port,__scl_bit
000513 9841      	cbi  __i2c_port,__sda_bit
000514 9a38      	sbi  __i2c_dir,__scl_bit
000515 9839      	cbi  __i2c_dir,__sda_bit
000516 c015      	rjmp __i2c_delay2
                 _i2c_start:
000517 9839      	cbi  __i2c_dir,__sda_bit
000518 9838      	cbi  __i2c_dir,__scl_bit
000519 27ee      	clr  r30
00051a 0000      	nop
00051b 9b31      	sbis __i2c_pin,__sda_bit
00051c 9508      	ret
00051d 9b30      	sbis __i2c_pin,__scl_bit
00051e 9508      	ret
00051f d004      	rcall __i2c_delay1
000520 9a39      	sbi  __i2c_dir,__sda_bit
000521 d002      	rcall __i2c_delay1
000522 9a38      	sbi  __i2c_dir,__scl_bit
000523 e0e1      	ldi  r30,1
                 __i2c_delay1:
000524 e261      	ldi  r22,33
000525 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
000526 9a39      	sbi  __i2c_dir,__sda_bit
000527 9a38      	sbi  __i2c_dir,__scl_bit
000528 d003      	rcall __i2c_delay2
000529 9838      	cbi  __i2c_dir,__scl_bit
00052a dff9      	rcall __i2c_delay1
00052b 9839      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
00052c e463      	ldi  r22,67
                 __i2c_delay2l:
00052d 956a      	dec  r22
00052e f7f1      	brne __i2c_delay2l
00052f 9508      	ret
                 _i2c_read:
000530 e078      	ldi  r23,8
                 __i2c_read0:
000531 9838      	cbi  __i2c_dir,__scl_bit
000532 dff1      	rcall __i2c_delay1
                 __i2c_read3:
000533 9b30      	sbis __i2c_pin,__scl_bit
000534 cffe      	rjmp __i2c_read3
000535 dfee      	rcall __i2c_delay1
000536 9488      	clc
000537 9931      	sbic __i2c_pin,__sda_bit
000538 9408      	sec
000539 9a38      	sbi  __i2c_dir,__scl_bit
00053a dff1      	rcall __i2c_delay2
00053b 1fee      	rol  r30
00053c 957a      	dec  r23
00053d f799      	brne __i2c_read0
00053e 2f7a      	mov  r23,r26
00053f 2377      	tst  r23
000540 f411      	brne __i2c_read1
000541 9839      	cbi  __i2c_dir,__sda_bit
000542 c001      	rjmp __i2c_read2
                 __i2c_read1:
000543 9a39      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
000544 dfdf      	rcall __i2c_delay1
000545 9838      	cbi  __i2c_dir,__scl_bit
000546 dfe5      	rcall __i2c_delay2
000547 9a38      	sbi  __i2c_dir,__scl_bit
000548 dfdb      	rcall __i2c_delay1
000549 9839      	cbi  __i2c_dir,__sda_bit
00054a cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
00054b e078      	ldi  r23,8
                 __i2c_write0:
00054c 0faa      	lsl  r26
00054d f410      	brcc __i2c_write1
00054e 9839      	cbi  __i2c_dir,__sda_bit
00054f c001      	rjmp __i2c_write2
                 __i2c_write1:
000550 9a39      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
000551 dfda      	rcall __i2c_delay2
000552 9838      	cbi  __i2c_dir,__scl_bit
000553 dfd0      	rcall __i2c_delay1
                 __i2c_write3:
000554 9b30      	sbis __i2c_pin,__scl_bit
000555 cffe      	rjmp __i2c_write3
000556 dfcd      	rcall __i2c_delay1
000557 9a38      	sbi  __i2c_dir,__scl_bit
000558 957a      	dec  r23
000559 f791      	brne __i2c_write0
00055a 9839      	cbi  __i2c_dir,__sda_bit
00055b dfc8      	rcall __i2c_delay1
00055c 9838      	cbi  __i2c_dir,__scl_bit
00055d dfce      	rcall __i2c_delay2
00055e e0e1      	ldi  r30,1
00055f 9931      	sbic __i2c_pin,__sda_bit
000560 27ee      	clr  r30
000561 9a38      	sbi  __i2c_dir,__scl_bit
000562 cfc1      	rjmp __i2c_delay1
                 
                 __LSRB12:
000563 23ee      	TST  R30
000564 2e0e      	MOV  R0,R30
000565 2fea      	MOV  R30,R26
000566 f019      	BREQ __LSRB12R
                 __LSRB12L:
000567 95e6      	LSR  R30
000568 940a      	DEC  R0
000569 f7e9      	BRNE __LSRB12L
                 __LSRB12R:
00056a 9508      	RET
                 
                 __LSLW12:
00056b 23ee      	TST  R30
00056c 2e0e      	MOV  R0,R30
00056d 01fd      	MOVW R30,R26
00056e f021      	BREQ __LSLW12R
                 __LSLW12L:
00056f 0fee      	LSL  R30
000570 1fff      	ROL  R31
000571 940a      	DEC  R0
000572 f7e1      	BRNE __LSLW12L
                 __LSLW12R:
000573 9508      	RET
                 
                 __LSLW4:
000574 0fee      	LSL  R30
000575 1fff      	ROL  R31
                 __LSLW3:
000576 0fee      	LSL  R30
000577 1fff      	ROL  R31
                 __LSLW2:
000578 0fee      	LSL  R30
000579 1fff      	ROL  R31
00057a 0fee      	LSL  R30
00057b 1fff      	ROL  R31
00057c 9508      	RET
                 
                 __SWAPW12:
00057d 2e1b      	MOV  R1,R27
00057e 2fbf      	MOV  R27,R31
00057f 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000580 2e1a      	MOV  R1,R26
000581 2fae      	MOV  R26,R30
000582 2de1      	MOV  R30,R1
000583 9508      	RET
                 
                 __SAVELOCR6:
000584 935a      	ST   -Y,R21
                 __SAVELOCR5:
000585 934a      	ST   -Y,R20
                 __SAVELOCR4:
000586 933a      	ST   -Y,R19
                 __SAVELOCR3:
000587 932a      	ST   -Y,R18
                 __SAVELOCR2:
000588 931a      	ST   -Y,R17
000589 930a      	ST   -Y,R16
00058a 9508      	RET
                 
                 __LOADLOCR6:
00058b 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00058c 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00058d 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00058e 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00058f 8119      	LDD  R17,Y+1
000590 8108      	LD   R16,Y
000591 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :  17 r1 :   5 r2 :   0 r3 :   4 r4 :   0 r5 :   3 r6 :   2 r7 :   4 
r8 :   0 r9 :   3 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  31 r17:  48 r18:   7 r19:   7 r20:   5 r21:   6 r22:  11 r23:   7 
r24:   9 r25:   2 r26: 127 r27:  35 r28:  11 r29:   1 r30: 327 r31:  69 
x  :   6 y  : 113 z  :  24 
Registers used: 26 out of 35 (74.3%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   7 add   :   9 
adiw  :   9 and   :   6 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  12 
brge  :   4 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   1 brne  :  27 brpl  :   0 brsh  :  11 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  75 
cbi   :  15 cbr   :   1 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  12 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  12 cpc   :   1 cpi   :  15 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   3 jmp   :  35 ld    :  30 ldd   :  39 ldi   : 152 
lds   :  21 lpm   :   7 lsl   :   9 lsr   :   1 mov   :  36 movw  :  22 
mul   :   4 muls  :   0 mulsu :   0 neg   :   0 nop   :   1 or    :   5 
ori   :   0 out   :  29 pop   :   0 push  :   0 rcall :  34 ret   :  27 
reti  :   1 rjmp  :  47 rol   :   6 ror   :   0 sbc   :   1 sbci  :  17 
sbi   :  14 sbic  :   2 sbis  :   4 sbiw  :  16 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  52 std   :  15 sts   :  43 sub   :   1 subi  :  30 swap  :   0 
tst   :   5 wdr   :   2 
Instructions used: 58 out of 116 (50.0%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b24   2260    592   2852   16384  17.4%
[.dseg] 0x000100 0x000429      0    553    553    1024  54.0%
[.eseg] 0x000000 0x000001      0      0      0     512   0.0%

Assembly complete, 0 errors, 13 warnings
