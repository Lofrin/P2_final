
AVRASM ver. 2.1.30  C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm Tue May 28 20:09:08 2024

C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1092): warning: Register r3 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1093): warning: Register r2 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1094): warning: Register r5 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1095): warning: Register r4 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1096): warning: Register r7 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1097): warning: Register r6 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1098): warning: Register r9 already defined by the .DEF directive
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1099): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 20,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': No
                 ;'char' is unsigned     : No
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 	.EQU GPIOR1=0x2A
                 	.EQU GPIOR2=0x2B
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index0=R3
                 	.DEF _rx_rd_index0=R2
                 	.DEF _rx_counter0=R5
                 	.DEF _tx_wr_index0=R4
                 	.DEF _tx_rd_index0=R7
                 	.DEF _tx_counter0=R6
                 	.DEF _AdresaNebuna=R9
                 	.DEF _ComandaFantastica=R8
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0055 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 00e5 	JMP  _timer1_compa_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 008f 	JMP  _usart0_rx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 00af 	JMP  _usart0_tx_isr
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00003e 2710
00003f 03e8
000040 0064
000041 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000042 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000043 1000
000044 0100
000045 0010
000046 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000047 2708      	.DB  0x8,0x27
                 
                 _0x2040060:
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1156): warning: .cseg .db misalignment - padding zero byte
000048 0001      	.DB  0x1
                 _0x2040000:
000049 4e2d
00004a 4e41
00004b 4900
00004c 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Florin\Desktop\ProiectulP2\v1\cc1.asm(1159): warning: .cseg .db misalignment - padding zero byte
00004d 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00004e 0002      	.DW  0x02
00004f 0008      	.DW  0x08
000050 008e      	.DW  __REG_VARS*2
                 
000051 0001      	.DW  0x01
000052 0212      	.DW  __seed_G102
000053 0090      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000054 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000055 94f8      	CLI
000056 27ee      	CLR  R30
000057 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000058 e0f1      	LDI  R31,1
000059 bff5      	OUT  MCUCR,R31
00005a bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00005b e1f8      	LDI  R31,0x18
00005c 95a8      	WDR
00005d b7a4      	IN   R26,MCUSR
00005e 7fa7      	CBR  R26,8
00005f bfa4      	OUT  MCUSR,R26
000060 93f0 0060 	STS  WDTCSR,R31
000062 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
000064 e08d      	LDI  R24,(14-2)+1
000065 e0a2      	LDI  R26,2
000066 27bb      	CLR  R27
                 __CLEAR_REG:
000067 93ed      	ST   X+,R30
000068 958a      	DEC  R24
000069 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006b e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006c e0a0      	LDI  R26,LOW(__SRAM_START)
00006d e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00006e 93ed      	ST   X+,R30
00006f 9701      	SBIW R24,1
000070 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000071 e9ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000072 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000073 9185      	LPM  R24,Z+
000074 9195      	LPM  R25,Z+
000075 9700      	SBIW R24,0
000076 f061      	BREQ __GLOBAL_INI_END
000077 91a5      	LPM  R26,Z+
000078 91b5      	LPM  R27,Z+
000079 9005      	LPM  R0,Z+
00007a 9015      	LPM  R1,Z+
00007b 01bf      	MOVW R22,R30
00007c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007d 9005      	LPM  R0,Z+
00007e 920d      	ST   X+,R0
00007f 9701      	SBIW R24,1
000080 f7e1      	BRNE __GLOBAL_INI_LOOP
000081 01fb      	MOVW R30,R22
000082 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
000083 e0e0      	LDI  R30,__GPIOR0_INIT
000084 bbee      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
000085 bdea      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
000086 bdeb      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000087 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000088 bfed      	OUT  SPL,R30
000089 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008b e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008c e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008d 940c 0195 	JMP  _main
                 
                 	.ESEG
                 	.ORG 1
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 ;/*********************************************
                 ;Project : Test software
                 ;**********************************************
                 ;Chip type: ATmega164A
                 ;Clock frequency: 20 MHz
                 ;Compilers:  CVAVR 2.x
                 ;*********************************************/
                 ;
                 ;#include <mega164a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <stdlib.h>
                 ;#include <stdint.h>
                 ;#include <i2c.h>
                 ;#include "defs.h"
                 ;
                 ;//*************************************************************************************************
                 ;//*********** BEGIN SERIAL STUFF (interrupt-driven, generated by Code Wizard) *********************
                 ;//*************************************************************************************************
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 8
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#else
                 ;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#endif
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 0048 {
                 
                 	.CSEG
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
00008f 93ea      	ST   -Y,R30
000090 93fa      	ST   -Y,R31
000091 b7ef      	IN   R30,SREG
000092 93ea      	ST   -Y,R30
                 ; 0000 0049 char status,data;
                 ; 0000 004A status=UCSR0A;
000093 931a      	ST   -Y,R17
000094 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000095 9110 00c0 	LDS  R17,192
                 ; 0000 004B data=UDR0;
000097 9100 00c6 	LDS  R16,198
                 ; 0000 004C if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000099 2fe1      	MOV  R30,R17
00009a 71ec      	ANDI R30,LOW(0x1C)
00009b f481      	BRNE _0x3
                 ; 0000 004D    {
                 ; 0000 004E    rx_buffer0[rx_wr_index0++]=data;
00009c 2de3      	MOV  R30,R3
00009d 9433      	INC  R3
00009e e0f0      	LDI  R31,0
00009f 50e0      	SUBI R30,LOW(-_rx_buffer0)
0000a0 4ffe      	SBCI R31,HIGH(-_rx_buffer0)
0000a1 8300      	ST   Z,R16
                 ; 0000 004F #if RX_BUFFER_SIZE0 == 256
                 ; 0000 0050    // special case for receiver buffer size=256
                 ; 0000 0051    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0000 0052 #else
                 ; 0000 0053    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0000a2 e0e8      	LDI  R30,LOW(8)
0000a3 15e3      	CP   R30,R3
0000a4 f409      	BRNE _0x4
0000a5 2433      	CLR  R3
                 ; 0000 0054    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x4:
0000a6 9453      	INC  R5
0000a7 e0e8      	LDI  R30,LOW(8)
0000a8 15e5      	CP   R30,R5
0000a9 f411      	BRNE _0x5
                 ; 0000 0055       {
                 ; 0000 0056       rx_counter0=0;
0000aa 2455      	CLR  R5
                 ; 0000 0057       rx_buffer_overflow0=1;
0000ab 9af0      	SBI  0x1E,0
                 ; 0000 0058       }
                 ; 0000 0059 #endif
                 ; 0000 005A    }
                 _0x5:
                 ; 0000 005B }
                 _0x3:
0000ac 9109      	LD   R16,Y+
0000ad 9119      	LD   R17,Y+
0000ae c013      	RJMP _0x35
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0062 {
                 ; 0000 0063 char data;
                 ; 0000 0064 while (rx_counter0==0);
                 ;	data -> R17
                 ; 0000 0065 data=rx_buffer0[rx_rd_index0++];
                 ; 0000 0066 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0067 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                 ; 0000 0068 #endif
                 ; 0000 0069 #asm("cli")
                 ; 0000 006A --rx_counter0;
                 ; 0000 006B #asm("sei")
                 ; 0000 006C return data;
                 ; 0000 006D }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 8
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#else
                 ;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 007D {
                 _usart0_tx_isr:
                 ; .FSTART _usart0_tx_isr
0000af 93ea      	ST   -Y,R30
0000b0 93fa      	ST   -Y,R31
0000b1 b7ef      	IN   R30,SREG
0000b2 93ea      	ST   -Y,R30
                 ; 0000 007E if (tx_counter0)
0000b3 2066      	TST  R6
0000b4 f069      	BREQ _0xC
                 ; 0000 007F    {
                 ; 0000 0080    --tx_counter0;
0000b5 946a      	DEC  R6
                 ; 0000 0081    UDR0=tx_buffer0[tx_rd_index0++];
0000b6 2de7      	MOV  R30,R7
0000b7 9473      	INC  R7
0000b8 e0f0      	LDI  R31,0
0000b9 5fe8      	SUBI R30,LOW(-_tx_buffer0)
0000ba 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0000bb 81e0      	LD   R30,Z
0000bc 93e0 00c6 	STS  198,R30
                 ; 0000 0082 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0083    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
0000be e0e8      	LDI  R30,LOW(8)
0000bf 15e7      	CP   R30,R7
0000c0 f409      	BRNE _0xD
0000c1 2477      	CLR  R7
                 ; 0000 0084 #endif
                 ; 0000 0085    }
                 _0xD:
                 ; 0000 0086 }
                 _0xC:
                 _0x35:
0000c2 91e9      	LD   R30,Y+
0000c3 bfef      	OUT  SREG,R30
0000c4 91f9      	LD   R31,Y+
0000c5 91e9      	LD   R30,Y+
0000c6 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 008D {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 008E while (tx_counter0 == TX_BUFFER_SIZE0);
0000c7 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0xE:
0000c8 e0e8      	LDI  R30,LOW(8)
0000c9 15e6      	CP   R30,R6
0000ca f3e9      	BREQ _0xE
                 ; 0000 008F #asm("cli")
0000cb 94f8      	cli
                 ; 0000 0090 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
0000cc 2066      	TST  R6
0000cd f421      	BRNE _0x12
0000ce 91e0 00c0 	LDS  R30,192
0000d0 72e0      	ANDI R30,LOW(0x20)
0000d1 f469      	BRNE _0x11
                 _0x12:
                 ; 0000 0091    {
                 ; 0000 0092    tx_buffer0[tx_wr_index0++]=c;
0000d2 2de4      	MOV  R30,R4
0000d3 9443      	INC  R4
0000d4 e0f0      	LDI  R31,0
0000d5 5fe8      	SUBI R30,LOW(-_tx_buffer0)
0000d6 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0000d7 81a8      	LD   R26,Y
0000d8 83a0      	STD  Z+0,R26
                 ; 0000 0093 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0094    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
0000d9 e0e8      	LDI  R30,LOW(8)
0000da 15e4      	CP   R30,R4
0000db f409      	BRNE _0x14
0000dc 2444      	CLR  R4
                 ; 0000 0095 #endif
                 ; 0000 0096    ++tx_counter0;
                 _0x14:
0000dd 9463      	INC  R6
                 ; 0000 0097    }
                 ; 0000 0098 else
0000de c003      	RJMP _0x15
                 _0x11:
                 ; 0000 0099    UDR0=c;
0000df 81e8      	LD   R30,Y
0000e0 93e0 00c6 	STS  198,R30
                 ; 0000 009A #asm("sei")
                 _0x15:
0000e2 9478      	sei
                 ; 0000 009B }
0000e3 9621      	ADIW R28,1
0000e4 9508      	RET
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;//*************************************************************************************************
                 ;//********************END SERIAL STUFF (USART0)  **************************************************
                 ;//*************************************************************************************************
                 ;//*******   if you need USART1, enable it in Code Wizard and copy coresponding code here  *********
                 ;//*************************************************************************************************
                 ;
                 ;/*
                 ; * Timer 1 Output Compare A interrupt is used to blink LED
                 ; */
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 00A8 {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
                 ; 0000 00A9 //LED1 = ~LED1; // invert LED
                 ; 0000 00AA }
0000e5 9518      	RETI
                 ; .FEND
                 ;
                 ;unsigned char AdresaNebuna = 0x27;
                 ;unsigned char ComandaFantastica = 0x08;
                 ;//unsigned char StareI2c = 0;*
                 ;
                 ;/*interrupt [TWI]    void i2c_isr(void)
                 ;{
                 ;    if(StareI2c == 0){    //s-a trimis start, fa setup pentru adresa
                 ;       StareI2c = 1;
                 ;       LED1 = ~LED1;
                 ;       TWDR = AdresaNebuna;
                 ;    }
                 ;    else if(StareI2c == 1){//s-a trimis adresa, fa setup pentru stop
                 ;        StareI2c = 2;
                 ;        LED1 = ~LED1;
                 ;        TWCR |= (1<<TWSTO);
                 ;    }
                 ;    else{
                 ;        StareI2c = 0;
                 ;    }
                 ;
                 ;}    */
                 ;
                 ;/*
                 ; * main function of program
                 ; */
                 ;unsigned short ButoaneUpdate(){
                 ; 0000 00C5 unsigned short ButoaneUpdate(){
                 _ButoaneUpdate:
                 ; .FSTART _ButoaneUpdate
                 ; 0000 00C6     static unsigned short StareButoaneInainte = 0x00;
                 ; 0000 00C7     volatile unsigned short StareButoane = 0x00, ButoaneApasate = 0x00, i;
                 ; 0000 00C8     volatile unsigned char aux;
                 ; 0000 00C9 
                 ; 0000 00CA     PORTA = (1<<PINA4);// & 0xF0;
0000e6 9727      	SBIW R28,7
0000e7 e0e0      	LDI  R30,LOW(0)
0000e8 83eb      	STD  Y+3,R30
0000e9 83ec      	STD  Y+4,R30
0000ea 83ed      	STD  Y+5,R30
0000eb 83ee      	STD  Y+6,R30
                 ;	StareButoane -> Y+5
                 ;	ButoaneApasate -> Y+3
                 ;	i -> Y+1
                 ;	aux -> Y+0
0000ec e1e0      	LDI  R30,LOW(16)
0000ed 940e 0228 	CALL SUBOPT_0x0
                 ; 0000 00CB     DDRA = 0xFF;
                 ; 0000 00CC     delay_us(1);
                 ; 0000 00CD     DDRA = (1<<PINA4);
0000ef e1e0      	LDI  R30,LOW(16)
0000f0 940e 022f 	CALL SUBOPT_0x1
                 ; 0000 00CE     for(i=0; i<10;i++){
                 _0x17:
0000f2 81a9      	LDD  R26,Y+1
0000f3 81ba      	LDD  R27,Y+1+1
0000f4 971a      	SBIW R26,10
0000f5 f428      	BRSH _0x18
                 ; 0000 00CF         aux = PINA;
0000f6 b1e0      	IN   R30,0x0
0000f7 83e8      	ST   Y,R30
                 ; 0000 00D0     }
0000f8 940e 0234 	CALL SUBOPT_0x2
0000fa cff7      	RJMP _0x17
                 _0x18:
                 ; 0000 00D1     StareButoane |= (unsigned short)(aux & ((1<<PINA0) | (1<<PINA1) | (1<< PINA2) | (1<<PINA3)));
0000fb 81e8      	LD   R30,Y
0000fc 70ef      	ANDI R30,LOW(0xF)
0000fd e0f0      	LDI  R31,0
0000fe 940e 023a 	CALL SUBOPT_0x3
                 ; 0000 00D2 
                 ; 0000 00D3     PORTA = (1<<PINA5);// & 0xF0;
000100 e2e0      	LDI  R30,LOW(32)
000101 940e 0228 	CALL SUBOPT_0x0
                 ; 0000 00D4     DDRA = 0xFF;
                 ; 0000 00D5     delay_us(1);
                 ; 0000 00D6     DDRA = (1<<PINA5);
000103 e2e0      	LDI  R30,LOW(32)
000104 940e 022f 	CALL SUBOPT_0x1
                 ; 0000 00D7     for(i=0; i<10;i++){
                 _0x1A:
000106 81a9      	LDD  R26,Y+1
000107 81ba      	LDD  R27,Y+1+1
000108 971a      	SBIW R26,10
000109 f428      	BRSH _0x1B
                 ; 0000 00D8         aux = PINA;
00010a b1e0      	IN   R30,0x0
00010b 83e8      	ST   Y,R30
                 ; 0000 00D9     }
00010c 940e 0234 	CALL SUBOPT_0x2
00010e cff7      	RJMP _0x1A
                 _0x1B:
                 ; 0000 00DA     StareButoane |= (unsigned short)(aux & ((1<<PINA0) | (1<<PINA1) | (1<< PINA2) | (1<<PINA3))) << 4;
00010f 81e8      	LD   R30,Y
000110 70ef      	ANDI R30,LOW(0xF)
000111 e0f0      	LDI  R31,0
000112 940e 02b5 	CALL __LSLW4
000114 940e 023a 	CALL SUBOPT_0x3
                 ; 0000 00DB 
                 ; 0000 00DC     PORTA = (1<<PINA6);// & 0xF0;
000116 e4e0      	LDI  R30,LOW(64)
000117 940e 0228 	CALL SUBOPT_0x0
                 ; 0000 00DD     DDRA = 0xFF;
                 ; 0000 00DE     delay_us(1);
                 ; 0000 00DF     DDRA = (1<<PINA6);
000119 e4e0      	LDI  R30,LOW(64)
00011a 940e 022f 	CALL SUBOPT_0x1
                 ; 0000 00E0     for(i=0; i<10;i++){
                 _0x1D:
00011c 81a9      	LDD  R26,Y+1
00011d 81ba      	LDD  R27,Y+1+1
00011e 971a      	SBIW R26,10
00011f f428      	BRSH _0x1E
                 ; 0000 00E1         aux = PINA;
000120 b1e0      	IN   R30,0x0
000121 83e8      	ST   Y,R30
                 ; 0000 00E2     }
000122 940e 0234 	CALL SUBOPT_0x2
000124 cff7      	RJMP _0x1D
                 _0x1E:
                 ; 0000 00E3     StareButoane |= (unsigned short)(aux & ((1<<PINA0) | (1<<PINA1) | (1<< PINA2) | (1<<PINA3))) << 8;
000125 81e8      	LD   R30,Y
000126 70ef      	ANDI R30,LOW(0xF)
000127 2ffe      	MOV  R31,R30
000128 e0e0      	LDI  R30,0
000129 940e 023a 	CALL SUBOPT_0x3
                 ; 0000 00E4 
                 ; 0000 00E5     PORTA = (1<<PINA7);// & 0xF0;
00012b e8e0      	LDI  R30,LOW(128)
00012c 940e 0228 	CALL SUBOPT_0x0
                 ; 0000 00E6     DDRA = 0xFF;
                 ; 0000 00E7     delay_us(1);
                 ; 0000 00E8     DDRA = (1<<PINA7);
00012e e8e0      	LDI  R30,LOW(128)
00012f 940e 022f 	CALL SUBOPT_0x1
                 ; 0000 00E9     for(i=0; i<10;i++){
                 _0x20:
000131 81a9      	LDD  R26,Y+1
000132 81ba      	LDD  R27,Y+1+1
000133 971a      	SBIW R26,10
000134 f428      	BRSH _0x21
                 ; 0000 00EA         aux = PINA;
000135 b1e0      	IN   R30,0x0
000136 83e8      	ST   Y,R30
                 ; 0000 00EB     }
000137 940e 0234 	CALL SUBOPT_0x2
000139 cff7      	RJMP _0x20
                 _0x21:
                 ; 0000 00EC     PORTA = 0;
00013a e0e0      	LDI  R30,LOW(0)
00013b b9e2      	OUT  0x2,R30
                 ; 0000 00ED     StareButoane |= (unsigned short)(aux & ((1<<PINA0) | (1<<PINA1) | (1<< PINA2) | (1<<PINA3))) << 12;
00013c 81e8      	LD   R30,Y
00013d 70ef      	ANDI R30,LOW(0xF)
00013e e0f0      	LDI  R31,0
00013f 940e 02b5 	CALL __LSLW4
000141 2ffe      	MOV  R31,R30
000142 e0e0      	LDI  R30,0
000143 940e 023a 	CALL SUBOPT_0x3
                 ; 0000 00EE 
                 ; 0000 00EF     for(i=0;i<16;i++){
000145 e0e0      	LDI  R30,LOW(0)
000146 83e9      	STD  Y+1,R30
000147 83ea      	STD  Y+1+1,R30
                 _0x23:
000148 81a9      	LDD  R26,Y+1
000149 81ba      	LDD  R27,Y+1+1
00014a 9750      	SBIW R26,16
00014b f4f0      	BRSH _0x24
                 ; 0000 00F0         if(((StareButoaneInainte & ((unsigned short)1<<i)) == 0) && ((StareButoane & ((unsigned short)1<<i)) != 0)){
00014c 940e 0241 	CALL SUBOPT_0x4
00014e 91a0 0210 	LDS  R26,_StareButoaneInainte_S0000005000
000150 91b0 0211 	LDS  R27,_StareButoaneInainte_S0000005000+1
000152 23ea      	AND  R30,R26
000153 23fb      	AND  R31,R27
000154 9730      	SBIW R30,0
000155 f441      	BRNE _0x26
000156 940e 0241 	CALL SUBOPT_0x4
000158 81ad      	LDD  R26,Y+5
000159 81be      	LDD  R27,Y+5+1
00015a 23ea      	AND  R30,R26
00015b 23fb      	AND  R31,R27
00015c 9730      	SBIW R30,0
00015d f409      	BRNE _0x27
                 _0x26:
00015e c008      	RJMP _0x25
                 _0x27:
                 ; 0000 00F1             ButoaneApasate |= ((unsigned short)1<<i);
00015f 940e 0241 	CALL SUBOPT_0x4
000161 81ab      	LDD  R26,Y+3
000162 81bc      	LDD  R27,Y+3+1
000163 2bea      	OR   R30,R26
000164 2bfb      	OR   R31,R27
000165 83eb      	STD  Y+3,R30
000166 83fc      	STD  Y+3+1,R31
                 ; 0000 00F2         }
                 ; 0000 00F3     }
                 _0x25:
000167 940e 0234 	CALL SUBOPT_0x2
000169 cfde      	RJMP _0x23
                 _0x24:
                 ; 0000 00F4     StareButoaneInainte = StareButoane;
00016a 81ed      	LDD  R30,Y+5
00016b 81fe      	LDD  R31,Y+5+1
00016c 93e0 0210 	STS  _StareButoaneInainte_S0000005000,R30
00016e 93f0 0211 	STS  _StareButoaneInainte_S0000005000+1,R31
                 ; 0000 00F5     return ButoaneApasate;
000170 81eb      	LDD  R30,Y+3
000171 81fc      	LDD  R31,Y+3+1
000172 9627      	ADIW R28,7
000173 9508      	RET
                 ; 0000 00F6 }
                 ; .FEND
                 ;
                 ;void TrimiteButoane(unsigned short Butoane){
                 ; 0000 00F8 void TrimiteButoane(unsigned short Butoane){
                 _TrimiteButoane:
                 ; .FSTART _TrimiteButoane
                 ; 0000 00F9     unsigned char i, Printez = 0;
                 ; 0000 00FA     for(i = 0; i < 16; i++){
000174 93ba      	ST   -Y,R27
000175 93aa      	ST   -Y,R26
000176 931a      	ST   -Y,R17
000177 930a      	ST   -Y,R16
                 ;	Butoane -> Y+2
                 ;	i -> R17
                 ;	Printez -> R16
000178 e000      	LDI  R16,0
000179 e010      	LDI  R17,LOW(0)
                 _0x29:
00017a 3110      	CPI  R17,16
00017b f488      	BRSH _0x2A
                 ; 0000 00FB         if(Butoane % 2 == 1){
00017c 81ea      	LDD  R30,Y+2
00017d 81fb      	LDD  R31,Y+2+1
00017e 70e1      	ANDI R30,LOW(0x1)
00017f 30e1      	CPI  R30,LOW(0x1)
000180 f421      	BRNE _0x2B
                 ; 0000 00FC             putchar(i + 'a');
000181 2fa1      	MOV  R26,R17
000182 59af      	SUBI R26,-LOW(97)
000183 df43      	RCALL _putchar
                 ; 0000 00FD             Printez = 1;
000184 e001      	LDI  R16,LOW(1)
                 ; 0000 00FE         }
                 ; 0000 00FF         Butoane /= 2;
                 _0x2B:
000185 81ea      	LDD  R30,Y+2
000186 81fb      	LDD  R31,Y+2+1
000187 95f6      	LSR  R31
000188 95e7      	ROR  R30
000189 83ea      	STD  Y+2,R30
00018a 83fb      	STD  Y+2+1,R31
                 ; 0000 0100     }
00018b 5f1f      	SUBI R17,-1
00018c cfed      	RJMP _0x29
                 _0x2A:
                 ; 0000 0101     if(Printez){
00018d 3000      	CPI  R16,0
00018e f011      	BREQ _0x2C
                 ; 0000 0102         putchar('\r');
00018f e0ad      	LDI  R26,LOW(13)
000190 df36      	RCALL _putchar
                 ; 0000 0103     }
                 ; 0000 0104 
                 ; 0000 0105 }
                 _0x2C:
000191 8119      	LDD  R17,Y+1
000192 8108      	LDD  R16,Y+0
000193 9624      	ADIW R28,4
000194 9508      	RET
                 ; .FEND
                 ;void main (void)
                 ; 0000 0107 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0108 unsigned short butoane;
                 ; 0000 0109 	Init_initController();  // this must be the first "init" action/call!
                 ;	butoane -> R16,R17
000195 d02a      	RCALL _Init_initController
                 ; 0000 010A 	#asm("sei")             // enable interrupts
000196 9478      	sei
                 ; 0000 010B 	LED1 = 1;           	// initial state, will be changed by timer 1
000197 9a5e      	SBI  0xB,6
                 ; 0000 010C     //putchar(AdresaNebuna);
                 ; 0000 010D     DDRC &= (1<<0) | (1<<1);
000198 b1e7      	IN   R30,0x7
000199 70e3      	ANDI R30,LOW(0x3)
00019a b9e7      	OUT  0x7,R30
                 ; 0000 010E     PORTC=(1<<0) | (1<<1);
00019b e0e3      	LDI  R30,LOW(3)
00019c b9e8      	OUT  0x8,R30
                 ; 0000 010F     //TWBR = (1<<6) & (1<<3);
                 ; 0000 0110     //TWCR = (1<<TWIE);
                 ; 0000 0111     i2c_init();
00019d 940e 0251 	CALL _i2c_init
                 ; 0000 0112 
                 ; 0000 0113 	while(TRUE)
                 _0x2F:
                 ; 0000 0114 	{
                 ; 0000 0115         LED1 = ~LED1;
00019f 9b5e      	SBIS 0xB,6
0001a0 c002      	RJMP _0x32
0001a1 985e      	CBI  0xB,6
0001a2 c001      	RJMP _0x33
                 _0x32:
0001a3 9a5e      	SBI  0xB,6
                 _0x33:
                 ; 0000 0116         delay_ms(2000);
0001a4 eda0      	LDI  R26,LOW(2000)
0001a5 e0b7      	LDI  R27,HIGH(2000)
0001a6 940e 02a2 	CALL _delay_ms
                 ; 0000 0117         butoane = ButoaneUpdate();
0001a8 df3d      	RCALL _ButoaneUpdate
0001a9 018f      	MOVW R16,R30
                 ; 0000 0118         TrimiteButoane(butoane);
0001aa 01d8      	MOVW R26,R16
0001ab dfc8      	RCALL _TrimiteButoane
                 ; 0000 0119         //ComandaFantastica = 0x0F;
                 ; 0000 011A         //TWDR = AdresaNebuna;
                 ; 0000 011B         //TWCR |= (1<<TWEN) | (1<<TWSTA);
                 ; 0000 011C         i2c_start();
0001ac 940e 0247 	CALL SUBOPT_0x5
                 ; 0000 011D         i2c_write(AdresaNebuna<<1);
                 ; 0000 011E         i2c_write(0x80);
                 ; 0000 011F         i2c_write(0x08);
0001ae e0a8      	LDI  R26,LOW(8)
0001af 940e 028a 	CALL _i2c_write
                 ; 0000 0120         //i2c_write(unsigned char data);
                 ; 0000 0121         i2c_stop();
0001b1 940e 0265 	CALL _i2c_stop
                 ; 0000 0122         delay_ms(2000);
0001b3 eda0      	LDI  R26,LOW(2000)
0001b4 e0b7      	LDI  R27,HIGH(2000)
0001b5 940e 02a2 	CALL _delay_ms
                 ; 0000 0123                 i2c_start();
0001b7 940e 0247 	CALL SUBOPT_0x5
                 ; 0000 0124         i2c_write(AdresaNebuna<<1);
                 ; 0000 0125         i2c_write(0x80);
                 ; 0000 0126         i2c_write(0x00);
0001b9 e0a0      	LDI  R26,LOW(0)
0001ba 940e 028a 	CALL _i2c_write
                 ; 0000 0127         //i2c_write(unsigned char data);
                 ; 0000 0128         i2c_stop();
0001bc 940e 0265 	CALL _i2c_stop
                 ; 0000 0129     }
0001be cfe0      	RJMP _0x2F
                 ; 0000 012A 
                 ; 0000 012B 
                 ; 0000 012C }// end main loop
                 _0x34:
0001bf cfff      	RJMP _0x34
                 ; .FEND
                 ;
                 ;
                 ;/* initialization file */
                 ;
                 ;#include <mega164a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "defs.h"
                 ;
                 ;
                 ;/*
                 ; * most intialization values are generated using Code Wizard and depend on clock value
                 ; */
                 ;void Init_initController(void)
                 ; 0001 000B {
                 
                 	.CSEG
                 _Init_initController:
                 ; .FSTART _Init_initController
                 ; 0001 000C // Crystal Oscillator division factor: 1
                 ; 0001 000D #pragma optsize-
                 ; 0001 000E CLKPR=0x80;
0001c0 e8e0      	LDI  R30,LOW(128)
0001c1 93e0 0061 	STS  97,R30
                 ; 0001 000F CLKPR=0x00;
0001c3 e0e0      	LDI  R30,LOW(0)
0001c4 93e0 0061 	STS  97,R30
                 ; 0001 0010 #ifdef _OPTIMIZE_SIZE_
                 ; 0001 0011 #pragma optsize+
                 ; 0001 0012 #endif
                 ; 0001 0013 
                 ; 0001 0014 // Input/Output Ports initialization
                 ; 0001 0015 // Port A initialization
                 ; 0001 0016 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0001 0017 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0001 0018 PORTA=0x00;
0001c6 b9e2      	OUT  0x2,R30
                 ; 0001 0019 DDRA=0x00;
0001c7 b9e1      	OUT  0x1,R30
                 ; 0001 001A 
                 ; 0001 001B // Port B initialization
                 ; 0001 001C PORTB=0x00;
0001c8 b9e5      	OUT  0x5,R30
                 ; 0001 001D DDRB=0x00;
0001c9 b9e4      	OUT  0x4,R30
                 ; 0001 001E 
                 ; 0001 001F // Port C initialization
                 ; 0001 0020 PORTC=0x00;
0001ca b9e8      	OUT  0x8,R30
                 ; 0001 0021 DDRC=0x00;
0001cb b9e7      	OUT  0x7,R30
                 ; 0001 0022 
                 ; 0001 0023 // Port D initialization
                 ; 0001 0024 PORTD=0b00100000; // D.5 needs pull-up resistor
0001cc e2e0      	LDI  R30,LOW(32)
0001cd b9eb      	OUT  0xB,R30
                 ; 0001 0025 DDRD= 0b01010000; // D.6 is LED, D.4 is test output
0001ce e5e0      	LDI  R30,LOW(80)
0001cf b9ea      	OUT  0xA,R30
                 ; 0001 0026 
                 ; 0001 0027 // Timer/Counter 0 initialization
                 ; 0001 0028 // Clock source: System Clock
                 ; 0001 0029 // Clock value: Timer 0 Stopped
                 ; 0001 002A // Mode: Normal top=FFh
                 ; 0001 002B // OC0 output: Disconnected
                 ; 0001 002C TCCR0A=0x00;
0001d0 e0e0      	LDI  R30,LOW(0)
0001d1 bde4      	OUT  0x24,R30
                 ; 0001 002D TCCR0B=0x00;
0001d2 bde5      	OUT  0x25,R30
                 ; 0001 002E TCNT0=0x00;
0001d3 bde6      	OUT  0x26,R30
                 ; 0001 002F OCR0A=0x00;
0001d4 bde7      	OUT  0x27,R30
                 ; 0001 0030 OCR0B=0x00;
0001d5 bde8      	OUT  0x28,R30
                 ; 0001 0031 
                 ; 0001 0032 // Timer/Counter 1 initialization
                 ; 0001 0033 // Clock source: System Clock
                 ; 0001 0034 // Clock value: 19.531 kHz = CLOCK/256
                 ; 0001 0035 // Mode: CTC top=OCR1A
                 ; 0001 0036 // OC1A output: Discon.
                 ; 0001 0037 // OC1B output: Discon.
                 ; 0001 0038 // Noise Canceler: Off
                 ; 0001 0039 // Input Capture on Falling Edge
                 ; 0001 003A // Timer 1 Overflow Interrupt: Off
                 ; 0001 003B // Input Capture Interrupt: Off
                 ; 0001 003C // Compare A Match Interrupt: On
                 ; 0001 003D // Compare B Match Interrupt: Off
                 ; 0001 003E 
                 ; 0001 003F TCCR1A=0x00;
0001d6 93e0 0080 	STS  128,R30
                 ; 0001 0040 TCCR1B=0x0D;
0001d8 e0ed      	LDI  R30,LOW(13)
0001d9 93e0 0081 	STS  129,R30
                 ; 0001 0041 TCNT1H=0x00;
0001db e0e0      	LDI  R30,LOW(0)
0001dc 93e0 0085 	STS  133,R30
                 ; 0001 0042 TCNT1L=0x00;
0001de 93e0 0084 	STS  132,R30
                 ; 0001 0043 ICR1H=0x00;
0001e0 93e0 0087 	STS  135,R30
                 ; 0001 0044 ICR1L=0x00;
0001e2 93e0 0086 	STS  134,R30
                 ; 0001 0045 
                 ; 0001 0046 // 1 sec = 19531 counts = 4C41H counts, from 0 to 4C40
                 ; 0001 0047 // 4C40H = 4CH (MSB) and 40H (LSB)
                 ; 0001 0048 OCR1AH=0x4C;
0001e4 e4ec      	LDI  R30,LOW(76)
0001e5 93e0 0089 	STS  137,R30
                 ; 0001 0049 OCR1AL=0x40;
0001e7 e4e0      	LDI  R30,LOW(64)
0001e8 93e0 0088 	STS  136,R30
                 ; 0001 004A 
                 ; 0001 004B OCR1BH=0x00;
0001ea e0e0      	LDI  R30,LOW(0)
0001eb 93e0 008b 	STS  139,R30
                 ; 0001 004C OCR1BL=0x00;
0001ed 93e0 008a 	STS  138,R30
                 ; 0001 004D 
                 ; 0001 004E // Timer/Counter 2 initialization
                 ; 0001 004F // Clock source: System Clock
                 ; 0001 0050 // Clock value: Timer2 Stopped
                 ; 0001 0051 // Mode: Normal top=0xFF
                 ; 0001 0052 // OC2A output: Disconnected
                 ; 0001 0053 // OC2B output: Disconnected
                 ; 0001 0054 ASSR=0x00;
0001ef 93e0 00b6 	STS  182,R30
                 ; 0001 0055 TCCR2A=0x00;
0001f1 93e0 00b0 	STS  176,R30
                 ; 0001 0056 TCCR2B=0x00;
0001f3 93e0 00b1 	STS  177,R30
                 ; 0001 0057 TCNT2=0x00;
0001f5 93e0 00b2 	STS  178,R30
                 ; 0001 0058 OCR2A=0x00;
0001f7 93e0 00b3 	STS  179,R30
                 ; 0001 0059 OCR2B=0x00;
0001f9 93e0 00b4 	STS  180,R30
                 ; 0001 005A 
                 ; 0001 005B // External Interrupt(s) initialization
                 ; 0001 005C // INT0: Off
                 ; 0001 005D // INT1: Off
                 ; 0001 005E // INT2: Off
                 ; 0001 005F // Interrupt on any change on pins PCINT0-7: Off
                 ; 0001 0060 // Interrupt on any change on pins PCINT8-15: Off
                 ; 0001 0061 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0001 0062 // Interrupt on any change on pins PCINT24-31: Off
                 ; 0001 0063 EICRA=0x00;
0001fb 93e0 0069 	STS  105,R30
                 ; 0001 0064 EIMSK=0x00;
0001fd bbed      	OUT  0x1D,R30
                 ; 0001 0065 PCICR=0x00;
0001fe 93e0 0068 	STS  104,R30
                 ; 0001 0066 
                 ; 0001 0067 // Timer/Counter 0,1,2 Interrupt(s) initialization
                 ; 0001 0068 TIMSK0=0x00;
000200 93e0 006e 	STS  110,R30
                 ; 0001 0069 TIMSK1=0x02;
000202 e0e2      	LDI  R30,LOW(2)
000203 93e0 006f 	STS  111,R30
                 ; 0001 006A TIMSK2=0x00;
000205 e0e0      	LDI  R30,LOW(0)
000206 93e0 0070 	STS  112,R30
                 ; 0001 006B 
                 ; 0001 006C // USART0 initialization
                 ; 0001 006D // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0001 006E // USART0 Receiver: On
                 ; 0001 006F // USART0 Transmitter: On
                 ; 0001 0070 // USART0 Mode: Asynchronous
                 ; 0001 0071 // USART0 Baud rate: 9600
                 ; 0001 0072 UCSR0A=0x00;
000208 93e0 00c0 	STS  192,R30
                 ; 0001 0073 UCSR0B=0xD8;
00020a ede8      	LDI  R30,LOW(216)
00020b 93e0 00c1 	STS  193,R30
                 ; 0001 0074 UCSR0C=0x06;
00020d e0e6      	LDI  R30,LOW(6)
00020e 93e0 00c2 	STS  194,R30
                 ; 0001 0075 UBRR0H=0x00;
000210 e0e0      	LDI  R30,LOW(0)
000211 93e0 00c5 	STS  197,R30
                 ; 0001 0076 UBRR0L=0x81;
000213 e8e1      	LDI  R30,LOW(129)
000214 93e0 00c4 	STS  196,R30
                 ; 0001 0077 
                 ; 0001 0078 // USART1 initialization
                 ; 0001 0079 // USART1 disabled
                 ; 0001 007A UCSR1B=0x00;
000216 e0e0      	LDI  R30,LOW(0)
000217 93e0 00c9 	STS  201,R30
                 ; 0001 007B 
                 ; 0001 007C 
                 ; 0001 007D // Analog Comparator initialization
                 ; 0001 007E // Analog Comparator: Off
                 ; 0001 007F // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0001 0080 ACSR=0x80;
000219 e8e0      	LDI  R30,LOW(128)
00021a bfe0      	OUT  0x30,R30
                 ; 0001 0081 ADCSRB=0x00;
00021b e0e0      	LDI  R30,LOW(0)
00021c 93e0 007b 	STS  123,R30
                 ; 0001 0082 DIDR1=0x00;
00021e 93e0 007f 	STS  127,R30
                 ; 0001 0083 
                 ; 0001 0084 // Watchdog Timer initialization
                 ; 0001 0085 // Watchdog Timer Prescaler: OSC/2048
                 ; 0001 0086 #pragma optsize-
                 ; 0001 0087 #asm("wdr")
000220 95a8      	wdr
                 ; 0001 0088 // Write 2 consecutive values to enable watchdog
                 ; 0001 0089 // this is NOT a mistake !
                 ; 0001 008A WDTCSR=0x10;
000221 e1e0      	LDI  R30,LOW(16)
000222 93e0 0060 	STS  96,R30
                 ; 0001 008B WDTCSR=0x00;
000224 e0e0      	LDI  R30,LOW(0)
000225 93e0 0060 	STS  96,R30
                 ; 0001 008C #ifdef _OPTIMIZE_SIZE_
                 ; 0001 008D #pragma optsize+
                 ; 0001 008E #endif
                 ; 0001 008F 
                 ; 0001 0090 }
000227 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer0:
000200           	.BYTE 0x8
                 _tx_buffer0:
000208           	.BYTE 0x8
                 _StareButoaneInainte_S0000005000:
000210           	.BYTE 0x2
                 __seed_G102:
000212           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
000228 b9e2      	OUT  0x2,R30
000229 efef      	LDI  R30,LOW(255)
00022a b9e1      	OUT  0x1,R30
                +
00022b e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
00022c 958a     +DEC R24
00022d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
00022e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
00022f b9e1      	OUT  0x1,R30
000230 e0e0      	LDI  R30,LOW(0)
000231 83e9      	STD  Y+1,R30
000232 83ea      	STD  Y+1+1,R30
000233 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
000234 81e9      	LDD  R30,Y+1
000235 81fa      	LDD  R31,Y+1+1
000236 9631      	ADIW R30,1
000237 83e9      	STD  Y+1,R30
000238 83fa      	STD  Y+1+1,R31
000239 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
00023a 81ad      	LDD  R26,Y+5
00023b 81be      	LDD  R27,Y+5+1
00023c 2bea      	OR   R30,R26
00023d 2bfb      	OR   R31,R27
00023e 83ed      	STD  Y+5,R30
00023f 83fe      	STD  Y+5+1,R31
000240 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000241 81e9      	LDD  R30,Y+1
000242 e0a1      	LDI  R26,LOW(1)
000243 e0b0      	LDI  R27,HIGH(1)
000244 940e 02ac 	CALL __LSLW12
000246 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
000247 940e 0256 	CALL _i2c_start
000249 2de9      	MOV  R30,R9
00024a 0fee      	LSL  R30
00024b 2fae      	MOV  R26,R30
00024c 940e 028a 	CALL _i2c_write
00024e e8a0      	LDI  R26,LOW(128)
00024f 940c 028a 	JMP  _i2c_write
                 
                 
                 	.CSEG
                 	.equ __sda_bit=1
                 	.equ __scl_bit=0
                 	.equ __i2c_port=0x08 ;PORTC
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
000251 9840      	cbi  __i2c_port,__scl_bit
000252 9841      	cbi  __i2c_port,__sda_bit
000253 9a38      	sbi  __i2c_dir,__scl_bit
000254 9839      	cbi  __i2c_dir,__sda_bit
000255 c015      	rjmp __i2c_delay2
                 _i2c_start:
000256 9839      	cbi  __i2c_dir,__sda_bit
000257 9838      	cbi  __i2c_dir,__scl_bit
000258 27ee      	clr  r30
000259 0000      	nop
00025a 9b31      	sbis __i2c_pin,__sda_bit
00025b 9508      	ret
00025c 9b30      	sbis __i2c_pin,__scl_bit
00025d 9508      	ret
00025e d004      	rcall __i2c_delay1
00025f 9a39      	sbi  __i2c_dir,__sda_bit
000260 d002      	rcall __i2c_delay1
000261 9a38      	sbi  __i2c_dir,__scl_bit
000262 e0e1      	ldi  r30,1
                 __i2c_delay1:
000263 e261      	ldi  r22,33
000264 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
000265 9a39      	sbi  __i2c_dir,__sda_bit
000266 9a38      	sbi  __i2c_dir,__scl_bit
000267 d003      	rcall __i2c_delay2
000268 9838      	cbi  __i2c_dir,__scl_bit
000269 dff9      	rcall __i2c_delay1
00026a 9839      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
00026b e463      	ldi  r22,67
                 __i2c_delay2l:
00026c 956a      	dec  r22
00026d f7f1      	brne __i2c_delay2l
00026e 9508      	ret
                 _i2c_read:
00026f e078      	ldi  r23,8
                 __i2c_read0:
000270 9838      	cbi  __i2c_dir,__scl_bit
000271 dff1      	rcall __i2c_delay1
                 __i2c_read3:
000272 9b30      	sbis __i2c_pin,__scl_bit
000273 cffe      	rjmp __i2c_read3
000274 dfee      	rcall __i2c_delay1
000275 9488      	clc
000276 9931      	sbic __i2c_pin,__sda_bit
000277 9408      	sec
000278 9a38      	sbi  __i2c_dir,__scl_bit
000279 dff1      	rcall __i2c_delay2
00027a 1fee      	rol  r30
00027b 957a      	dec  r23
00027c f799      	brne __i2c_read0
00027d 2f7a      	mov  r23,r26
00027e 2377      	tst  r23
00027f f411      	brne __i2c_read1
000280 9839      	cbi  __i2c_dir,__sda_bit
000281 c001      	rjmp __i2c_read2
                 __i2c_read1:
000282 9a39      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
000283 dfdf      	rcall __i2c_delay1
000284 9838      	cbi  __i2c_dir,__scl_bit
000285 dfe5      	rcall __i2c_delay2
000286 9a38      	sbi  __i2c_dir,__scl_bit
000287 dfdb      	rcall __i2c_delay1
000288 9839      	cbi  __i2c_dir,__sda_bit
000289 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
00028a e078      	ldi  r23,8
                 __i2c_write0:
00028b 0faa      	lsl  r26
00028c f410      	brcc __i2c_write1
00028d 9839      	cbi  __i2c_dir,__sda_bit
00028e c001      	rjmp __i2c_write2
                 __i2c_write1:
00028f 9a39      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
000290 dfda      	rcall __i2c_delay2
000291 9838      	cbi  __i2c_dir,__scl_bit
000292 dfd0      	rcall __i2c_delay1
                 __i2c_write3:
000293 9b30      	sbis __i2c_pin,__scl_bit
000294 cffe      	rjmp __i2c_write3
000295 dfcd      	rcall __i2c_delay1
000296 9a38      	sbi  __i2c_dir,__scl_bit
000297 957a      	dec  r23
000298 f791      	brne __i2c_write0
000299 9839      	cbi  __i2c_dir,__sda_bit
00029a dfc8      	rcall __i2c_delay1
00029b 9838      	cbi  __i2c_dir,__scl_bit
00029c dfce      	rcall __i2c_delay2
00029d e0e1      	ldi  r30,1
00029e 9931      	sbic __i2c_pin,__sda_bit
00029f 27ee      	clr  r30
0002a0 9a38      	sbi  __i2c_dir,__scl_bit
0002a1 cfc1      	rjmp __i2c_delay1
                 
                 _delay_ms:
0002a2 9610      	adiw r26,0
0002a3 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002a4 e888     +LDI R24 , LOW ( 0x1388 )
0002a5 e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
0002a6 9701     +SBIW R24 , 1
0002a7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
0002a8 95a8      	wdr
0002a9 9711      	sbiw r26,1
0002aa f7c9      	brne __delay_ms0
                 __delay_ms1:
0002ab 9508      	ret
                 
                 __LSLW12:
0002ac 23ee      	TST  R30
0002ad 2e0e      	MOV  R0,R30
0002ae 01fd      	MOVW R30,R26
0002af f021      	BREQ __LSLW12R
                 __LSLW12L:
0002b0 0fee      	LSL  R30
0002b1 1fff      	ROL  R31
0002b2 940a      	DEC  R0
0002b3 f7e1      	BRNE __LSLW12L
                 __LSLW12R:
0002b4 9508      	RET
                 
                 __LSLW4:
0002b5 0fee      	LSL  R30
0002b6 1fff      	ROL  R31
                 __LSLW3:
0002b7 0fee      	LSL  R30
0002b8 1fff      	ROL  R31
                 __LSLW2:
0002b9 0fee      	LSL  R30
0002ba 1fff      	ROL  R31
0002bb 0fee      	LSL  R30
0002bc 1fff      	ROL  R31
0002bd 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :   6 r1 :   1 r2 :   0 r3 :   4 r4 :   4 r5 :   3 r6 :   5 r7 :   4 
r8 :   0 r9 :   1 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  11 r17:  10 r18:   0 r19:   0 r20:   0 r21:   0 r22:   5 r23:   6 
r24:  11 r25:   3 r26:  44 r27:  20 r28:   5 r29:   1 r30: 208 r31:  39 
x  :   3 y  :  73 z  :  10 
Registers used: 23 out of 35 (65.7%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   5 and   :   4 andi  :   8 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   6 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  21 brpl  :   0 brsh  :   6 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  34 
cbi   :  16 cbr   :   1 clc   :   1 clh   :   0 cli   :   2 cln   :   0 
clr   :   8 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   0 cpi   :   3 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   8 inc   :   5 jmp   :  33 ld    :  12 ldd   :  29 ldi   :  85 
lds   :   5 lpm   :   7 lsl   :   7 lsr   :   1 mov   :  11 movw  :   6 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   1 or    :   4 
ori   :   0 out   :  31 pop   :   0 push  :   0 rcall :  20 ret   :  15 
reti  :   2 rjmp  :  22 rol   :   6 ror   :   1 sbc   :   0 sbci  :   3 
sbi   :  14 sbic  :   2 sbis  :   5 sbiw  :  13 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   1 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  21 std   :  17 sts   :  39 sub   :   0 subi  :   5 swap  :   0 
tst   :   4 wdr   :   3 
Instructions used: 50 out of 116 (43.1%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00057c   1358     46   1404   16384   8.6%
[.dseg] 0x000100 0x000216      0     22     22    1024   2.1%
[.eseg] 0x000000 0x000001      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
